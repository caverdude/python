 2020-01-08 16:43:51,656 - DEBUG - Start of Logging Leitner Module
 2020-01-08 16:43:51,656 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-08 16:43:51,656 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-08 16:43:51,656 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-08 16:43:51,656 - INFO - on things you get right.
 2020-01-08 16:43:51,706 - DEBUG - C:\dev\github\python\quiz
 2020-01-08 16:43:51,707 - DEBUG - 9 }
 2020-01-08 16:43:51,707 - DEBUG - 82 }
 2020-01-08 16:43:51,735 - DEBUG - 151 }
 2020-01-08 16:43:51,736 - DEBUG - uml-1
 2020-01-08 16:43:51,736 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-08 16:43:51,736 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-08 16:43:51,737 - DEBUG - 162 }
 2020-01-08 16:43:51,737 - DEBUG - 206 }
 2020-01-08 16:43:51,738 - DEBUG - 303 }
 2020-01-08 16:43:51,738 - DEBUG - uml-2
 2020-01-08 16:43:51,738 - DEBUG -  What is an interaction diagram?
 2020-01-08 16:43:51,739 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-08 16:43:51,739 - DEBUG - 314 }
 2020-01-08 16:43:51,740 - DEBUG - 355 }
 2020-01-08 16:43:51,740 - DEBUG - 665 }
 2020-01-08 16:43:51,741 - DEBUG - uml-3
 2020-01-08 16:43:51,741 - DEBUG -  What is a structure diagram?
 2020-01-08 16:43:51,742 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures 
that make up a system such as a database or an application. It shows the hierarchy or structure of the 
different components or modules of the system and shows how they connect and interact with each other.
 2020-01-08 16:43:51,742 - DEBUG - 676 }
 2020-01-08 16:43:51,742 - DEBUG - 716 }
 2020-01-08 16:43:51,743 - DEBUG - 830 }
 2020-01-08 16:43:51,743 - DEBUG - uml-4
 2020-01-08 16:43:51,744 - DEBUG -  What is a behavior diagram?
 2020-01-08 16:43:51,744 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects
 of a system.
 2020-01-08 16:43:51,744 - DEBUG - 851 }
 2020-01-08 16:43:51,745 - DEBUG - 902 }
 2020-01-08 16:43:51,745 - DEBUG - 984 }
 2020-01-08 16:43:51,746 - DEBUG - uml-structure-1
 2020-01-08 16:43:51,746 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-08 16:43:51,746 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-08 16:43:51,747 - DEBUG - 1004 }
 2020-01-08 16:43:51,747 - DEBUG - 1069 }
 2020-01-08 16:43:51,748 - DEBUG - 1129 }
 2020-01-08 16:43:51,749 - DEBUG - uml-behavior-1
 2020-01-08 16:43:51,749 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-08 16:43:51,750 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-08 16:43:51,750 - DEBUG - 1152 }
 2020-01-08 16:43:51,751 - DEBUG - 1209 }
 2020-01-08 16:43:51,752 - DEBUG - 1274 }
 2020-01-08 16:43:51,752 - DEBUG - uml-interaction-1
 2020-01-08 16:43:51,753 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-08 16:43:51,753 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-08 16:43:51,754 - DEBUG - 1285 }
 2020-01-08 16:43:51,754 - DEBUG - 1329 }
 2020-01-08 16:43:51,755 - DEBUG - 1363 }
 2020-01-08 16:43:51,755 - DEBUG - uml-2
 2020-01-08 16:43:51,756 - DEBUG -  How many uml digrams are there?
 2020-01-08 16:43:51,756 - DEBUG -  Around 14 give or take.
 2020-01-08 16:43:51,757 - DEBUG - 1384 }
 2020-01-08 16:43:51,757 - DEBUG - 1435 }
 2020-01-08 16:43:51,758 - DEBUG - 1683 }
 2020-01-08 16:43:51,758 - DEBUG - uml-structure-2
 2020-01-08 16:43:51,758 - DEBUG -  Describe the structure Package diagram
 2020-01-08 16:43:51,758 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder 
with tab. Packages can implement an inteface or package. Dashed lines with arrows
shows dependencies. A package symbol can be nested within a package symbol.
 2020-01-08 16:43:51,758 - DEBUG - 1704 }
 2020-01-08 16:43:51,758 - DEBUG - 1754 }
 2020-01-08 16:43:51,758 - DEBUG - 2027 }
 2020-01-08 16:43:51,758 - DEBUG - uml-structure-3
 2020-01-08 16:43:51,758 - DEBUG -  Describe the structure Class diagram.
 2020-01-08 16:43:51,758 - DEBUG -  Have boxes that represent classes with name, properties which
are attributes and opeartions. Various association lines with different arrows
show how classes interelate. Keywords can describe things. Multiplicity is where
thee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-08 16:43:51,758 - DEBUG - 2048 }
 2020-01-08 16:43:51,758 - DEBUG - 2099 }
 2020-01-08 16:43:51,758 - DEBUG - 2233 }
 2020-01-08 16:43:51,758 - DEBUG - uml-structure-4
 2020-01-08 16:43:51,758 - DEBUG -  Describe the structure Object diagram.
 2020-01-08 16:43:51,758 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname and
name=value for fields or data.
 2020-01-08 16:43:51,758 - DEBUG - 2254 }
 2020-01-08 16:43:51,758 - DEBUG - 2308 }
 2020-01-08 16:43:51,758 - DEBUG - 2560 }
 2020-01-08 16:43:51,758 - DEBUG - uml-structure-5
 2020-01-08 16:43:51,758 - DEBUG -  Describe the structure Component diagram.
 2020-01-08 16:43:51,758 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in 
half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where 
connectors come in. Similar to composite.
 2020-01-08 16:43:51,758 - DEBUG - 2581 }
 2020-01-08 16:43:51,758 - DEBUG - 2635 }
 2020-01-08 16:43:51,758 - DEBUG - 2972 }
 2020-01-08 16:43:51,758 - DEBUG - uml-structure-6
 2020-01-08 16:43:51,758 - DEBUG -  Describe the structure Composite diagram.
 2020-01-08 16:43:51,774 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.
Circle lolipops are controls and half circle are input/output. These boxes can be nested and there
maybe be control flow association lines called connectors. May have little squares on the sides of
box called ports. Similar to Component
 2020-01-08 16:43:51,774 - DEBUG - 2993 }
 2020-01-08 16:43:51,774 - DEBUG - 3050 }
 2020-01-08 16:43:51,774 - DEBUG - 3238 }
 2020-01-08 16:43:51,774 - DEBUG - uml-structure-7
 2020-01-08 16:43:51,774 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-08 16:43:51,774 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.
Has no flow or arrows and a dashed circle or lines that show collaboration occurance.
Boxes name roles.
 2020-01-08 16:43:51,774 - DEBUG - 3259 }
 2020-01-08 16:43:51,774 - DEBUG - 3314 }
 2020-01-08 16:43:51,790 - DEBUG - 3622 }
 2020-01-08 16:43:51,790 - DEBUG - uml-structure-8
 2020-01-08 16:43:51,790 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-08 16:43:51,790 - DEBUG -  These diagrams show communications paths between parts of a system. And show the 
parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They can
show artifacts like executables, and containers or execution enviroments. Also 
deployment files and operating systems.
 2020-01-08 16:43:51,790 - DEBUG - 3642 }
 2020-01-08 16:43:51,790 - DEBUG - 3694 }
 2020-01-08 16:43:51,790 - DEBUG - 3860 }
 2020-01-08 16:43:51,790 - DEBUG - uml-behavior-1
 2020-01-08 16:43:51,790 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-08 16:43:51,790 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These
 are reminicent of flow charts. However they support parallel behavior.
 2020-01-08 16:43:51,790 - DEBUG - 3880 }
 2020-01-08 16:43:51,790 - DEBUG - 3932 }
 2020-01-08 16:43:51,790 - DEBUG - 4177 }
 2020-01-08 16:43:51,790 - DEBUG - uml-behavior-2
 2020-01-08 16:43:51,790 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-08 16:43:51,790 - DEBUG -  These capture the functional requirements of a system. Describe users of a system 
and interaction with the system itself. Uses a senario which are steps that a user takes to
interact with the system. Users are actors that play roles.
 2020-01-08 16:43:51,790 - DEBUG - 4197 }
 2020-01-08 16:43:51,790 - DEBUG - 4246 }
 2020-01-08 16:43:51,790 - DEBUG - 4552 }
 2020-01-08 16:43:51,790 - DEBUG - uml-behavior-3
 2020-01-08 16:43:51,790 - DEBUG -  Describe the behavior State diagram.
 2020-01-08 16:43:51,790 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state 
machine diagram to show the lifetime behavior of a single object. They use flow lines thats
show flow of change in state, not flow of execution. You can have physical or activity states. Can
have concurrent states.
 2020-01-08 16:43:51,790 - DEBUG - 4575 }
 2020-01-08 16:43:51,790 - DEBUG - 4630 }
 2020-01-08 16:43:51,805 - DEBUG - 4788 }
 2020-01-08 16:43:51,805 - DEBUG - uml-interaction-2
 2020-01-08 16:43:51,805 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-08 16:43:51,805 - DEBUG -  Captures the behavior of a single senario. Show messages that are passed
between objects in a given use case. This resembles a call trace diagram.
 2020-01-08 16:43:51,805 - DEBUG - 4811 }
 2020-01-08 16:43:51,805 - DEBUG - 4864 }
 2020-01-08 16:43:51,805 - DEBUG - 5114 }
 2020-01-08 16:43:51,805 - DEBUG - uml-interaction-3
 2020-01-08 16:43:51,805 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-08 16:43:51,805 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single object
or more usefully for a bunch of objects. Shows a horizontal time line and list state changes or
activities with time shown in (s)econds or (m)inutes etc.
 2020-01-08 16:43:51,805 - DEBUG - 5137 }
 2020-01-08 16:43:51,805 - DEBUG - 5198 }
 2020-01-08 16:43:51,805 - DEBUG - 5469 }
 2020-01-08 16:43:51,805 - DEBUG - uml-interaction-4
 2020-01-08 16:43:51,805 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-08 16:43:51,805 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but 
uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc 
to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-08 16:43:51,805 - DEBUG - 5492 }
 2020-01-08 16:43:51,805 - DEBUG - 5559 }
 2020-01-08 16:43:51,805 - DEBUG - 5717 }
 2020-01-08 16:43:51,805 - DEBUG - uml-interaction-5
 2020-01-08 16:43:51,805 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-08 16:43:51,805 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity 
diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-08 16:43:51,805 - DEBUG - algo_cards
 2020-01-08 16:43:51,805 - DEBUG - cards
 2020-01-08 16:43:51,821 - DEBUG - data_struct_cards
 2020-01-08 16:43:51,821 - DEBUG - oop_cards
 2020-01-08 16:43:51,821 - DEBUG - testcycle1
 2020-01-08 16:43:51,821 - DEBUG - uml_cards
 2020-01-08 16:43:51,821 - DEBUG - install
 2020-01-08 16:43:51,821 - DEBUG - leitner_log
 2020-01-08 16:43:51,821 - DEBUG - qui
 2020-01-08 16:43:51,821 - DEBUG - setu
 2020-01-08 16:43:51,821 - DEBUG - None
 2020-01-08 16:43:51,821 - DEBUG - quizs\
 2020-01-08 16:43:51,821 - DEBUG - No Test Cycle File Found. Creating new Cycle 1.
 2020-01-08 16:43:51,821 - DEBUG - Number of cards 20
 2020-01-08 16:43:51,821 - DEBUG - ['uml-1', 'uml-2', 'uml-3', 'uml-4', 'uml-structure-1', 'uml-behavior-1', 'uml-interaction-1', 'uml-structure-2', 'uml-structure-3', 'uml-structure-4', 'uml-structure-5', 'uml-structure-6', 'uml-structure-7', 'uml-structure-8', 'uml-behavior-2', 'uml-behavior-3', 'uml-interaction-2', 'uml-interaction-3', 'uml-interaction-4', 'uml-interaction-5']
 2020-01-08 16:43:51,821 - DEBUG - Done making ids
 2020-01-08 16:43:51,821 - DEBUG - Loading cards into Box1
 2020-01-08 16:43:51,821 - DEBUG - Set Cards to Box1
 2020-01-08 16:43:51,821 - DEBUG - Made TestCycle
 2020-01-08 16:43:51,821 - DEBUG - Making box1
 2020-01-08 16:43:51,821 - DEBUG - Making box2
 2020-01-08 16:43:51,836 - DEBUG - Making box3
 2020-01-08 16:43:51,838 - DEBUG - Making box4
 2020-01-08 16:43:51,839 - DEBUG - Making box5
 2020-01-08 16:43:51,841 - DEBUG - Making box6
