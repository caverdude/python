 2020-01-20 14:34:33,715 - DEBUG - Start of Logging Leitner Module
 2020-01-20 14:34:33,715 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 14:34:33,715 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 14:34:33,715 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 14:34:33,715 - INFO - on things you get right.
 2020-01-20 14:34:33,762 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 14:34:33,762 - DEBUG - 15 }
 2020-01-20 14:34:33,762 - DEBUG - 57 }
 2020-01-20 14:34:33,762 - DEBUG - 225 }
 2020-01-20 14:34:33,762 - DEBUG - algorithm-1
 2020-01-20 14:34:33,762 - DEBUG -  What is algorithm efficiency?
 2020-01-20 14:34:33,762 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 14:34:33,762 - DEBUG - 242 }
 2020-01-20 14:34:33,762 - DEBUG - 324 }
 2020-01-20 14:34:33,762 - DEBUG - 403 }
 2020-01-20 14:34:33,762 - DEBUG - algorithm-2
 2020-01-20 14:34:33,762 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 14:34:33,762 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 14:34:33,762 - DEBUG - 420 }
 2020-01-20 14:34:33,762 - DEBUG - 502 }
 2020-01-20 14:34:33,762 - DEBUG - 531 }
 2020-01-20 14:34:33,762 - DEBUG - algorithm-3
 2020-01-20 14:34:33,762 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 14:34:33,762 - DEBUG -  Little O notation.
 2020-01-20 14:34:33,762 - DEBUG - 554 }
 2020-01-20 14:34:33,762 - DEBUG - 597 }
 2020-01-20 14:34:33,762 - DEBUG - 846 }
 2020-01-20 14:34:33,762 - DEBUG - alogorithm-bigo-1
 2020-01-20 14:34:33,762 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 14:34:33,762 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 14:34:33,762 - DEBUG - 868 }
 2020-01-20 14:34:33,762 - DEBUG - 911 }
 2020-01-20 14:34:33,778 - DEBUG - 1271 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-2
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 14:34:33,778 - DEBUG - 1293 }
 2020-01-20 14:34:33,778 - DEBUG - 1338 }
 2020-01-20 14:34:33,778 - DEBUG - 1581 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-3
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 14:34:33,778 - DEBUG - 1603 }
 2020-01-20 14:34:33,778 - DEBUG - 1650 }
 2020-01-20 14:34:33,778 - DEBUG - 1941 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-4
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 14:34:33,778 - DEBUG - 1963 }
 2020-01-20 14:34:33,778 - DEBUG - 2008 }
 2020-01-20 14:34:33,778 - DEBUG - 2088 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-5
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 14:34:33,778 - DEBUG - 2110 }
 2020-01-20 14:34:33,778 - DEBUG - 2155 }
 2020-01-20 14:34:33,778 - DEBUG - 2250 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-6
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 14:34:33,778 - DEBUG - 2272 }
 2020-01-20 14:34:33,778 - DEBUG - 2321 }
 2020-01-20 14:34:33,778 - DEBUG - 2517 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-7
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 14:34:33,778 - DEBUG - 2539 }
 2020-01-20 14:34:33,778 - DEBUG - 2606 }
 2020-01-20 14:34:33,778 - DEBUG - 2693 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-8
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 14:34:33,778 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 14:34:33,778 - DEBUG - 2715 }
 2020-01-20 14:34:33,778 - DEBUG - 2765 }
 2020-01-20 14:34:33,778 - DEBUG - 2893 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-9
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 14:34:33,778 - DEBUG - 2915 }
 2020-01-20 14:34:33,778 - DEBUG - 2959 }
 2020-01-20 14:34:33,778 - DEBUG - 3176 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-9
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 14:34:33,778 - DEBUG - 3199 }
 2020-01-20 14:34:33,778 - DEBUG - 3250 }
 2020-01-20 14:34:33,778 - DEBUG - 3415 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-10
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 14:34:33,778 - DEBUG - 3438 }
 2020-01-20 14:34:33,778 - DEBUG - 3493 }
 2020-01-20 14:34:33,778 - DEBUG - 3618 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-11
 2020-01-20 14:34:33,778 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 14:34:33,778 - DEBUG - 3641 }
 2020-01-20 14:34:33,778 - DEBUG - 3686 }
 2020-01-20 14:34:33,778 - DEBUG - 3838 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-12
 2020-01-20 14:34:33,778 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 14:34:33,778 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 14:34:33,778 - DEBUG - 3861 }
 2020-01-20 14:34:33,778 - DEBUG - 3916 }
 2020-01-20 14:34:33,778 - DEBUG - 4018 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-13
 2020-01-20 14:34:33,778 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 14:34:33,778 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 14:34:33,778 - DEBUG - 4041 }
 2020-01-20 14:34:33,778 - DEBUG - 4094 }
 2020-01-20 14:34:33,778 - DEBUG - 4229 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-14
 2020-01-20 14:34:33,778 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 14:34:33,778 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 14:34:33,778 - DEBUG - 4252 }
 2020-01-20 14:34:33,778 - DEBUG - 4299 }
 2020-01-20 14:34:33,778 - DEBUG - 4365 }
 2020-01-20 14:34:33,778 - DEBUG - algorithm-bigo-15
 2020-01-20 14:34:33,778 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 14:34:33,793 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 14:34:33,793 - DEBUG - 4388 }
 2020-01-20 14:34:33,793 - DEBUG - 4439 }
 2020-01-20 14:34:33,793 - DEBUG - 4545 }
 2020-01-20 14:34:33,793 - DEBUG - algorithm-bigo-16
 2020-01-20 14:34:33,793 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 14:34:33,793 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 14:34:33,793 - DEBUG - 4568 }
 2020-01-20 14:34:33,793 - DEBUG - 4613 }
 2020-01-20 14:34:33,793 - DEBUG - 4720 }
 2020-01-20 14:34:33,793 - DEBUG - algorithm-bigo-17
 2020-01-20 14:34:33,793 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 14:34:33,793 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 14:34:33,793 - DEBUG - 4742 }
 2020-01-20 14:34:33,793 - DEBUG - 4806 }
 2020-01-20 14:34:33,793 - DEBUG - 4927 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-1
 2020-01-20 14:34:33,793 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 14:34:33,793 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 14:34:33,793 - DEBUG - 4950 }
 2020-01-20 14:34:33,793 - DEBUG - 5021 }
 2020-01-20 14:34:33,793 - DEBUG - 5096 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-2
 2020-01-20 14:34:33,793 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 14:34:33,793 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 14:34:33,793 - DEBUG - 5119 }
 2020-01-20 14:34:33,793 - DEBUG - 5169 }
 2020-01-20 14:34:33,793 - DEBUG - 5250 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-3
 2020-01-20 14:34:33,793 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 14:34:33,793 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 14:34:33,793 - DEBUG - 5273 }
 2020-01-20 14:34:33,793 - DEBUG - 5344 }
 2020-01-20 14:34:33,793 - DEBUG - 5390 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-4
 2020-01-20 14:34:33,793 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 14:34:33,793 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 14:34:33,793 - DEBUG - 5413 }
 2020-01-20 14:34:33,793 - DEBUG - 5447 }
 2020-01-20 14:34:33,793 - DEBUG - 5479 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-5
 2020-01-20 14:34:33,793 - DEBUG -  List kinds of Queues.
 2020-01-20 14:34:33,793 - DEBUG -  Queue, Piority Queue.
 2020-01-20 14:34:33,793 - DEBUG - 5502 }
 2020-01-20 14:34:33,793 - DEBUG - 5553 }
 2020-01-20 14:34:33,793 - DEBUG - 5614 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-6
 2020-01-20 14:34:33,793 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 14:34:33,793 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 14:34:33,793 - DEBUG - 5637 }
 2020-01-20 14:34:33,793 - DEBUG - 5680 }
 2020-01-20 14:34:33,793 - DEBUG - 5746 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-7
 2020-01-20 14:34:33,793 - DEBUG -  List some main kinds of Trees.
 2020-01-20 14:34:33,793 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 14:34:33,793 - DEBUG - 5769 }
 2020-01-20 14:34:33,793 - DEBUG - 5829 }
 2020-01-20 14:34:33,793 - DEBUG - 5922 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-8
 2020-01-20 14:34:33,793 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 14:34:33,793 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 14:34:33,793 - DEBUG - 5945 }
 2020-01-20 14:34:33,793 - DEBUG - 6050 }
 2020-01-20 14:34:33,793 - DEBUG - 6359 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-9
 2020-01-20 14:34:33,793 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 14:34:33,793 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 14:34:33,793 - DEBUG - 6383 }
 2020-01-20 14:34:33,793 - DEBUG - 6428 }
 2020-01-20 14:34:33,793 - DEBUG - 6848 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-10
 2020-01-20 14:34:33,793 - DEBUG -  What is a linked data structure?
 2020-01-20 14:34:33,793 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 14:34:33,793 - DEBUG - 6872 }
 2020-01-20 14:34:33,793 - DEBUG - 6905 }
 2020-01-20 14:34:33,793 - DEBUG - 6937 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-11
 2020-01-20 14:34:33,793 - DEBUG -  List kinds of Graphs
 2020-01-20 14:34:33,793 - DEBUG -  Graph and Scene Graph
 2020-01-20 14:34:33,793 - DEBUG - 6961 }
 2020-01-20 14:34:33,793 - DEBUG - 6988 }
 2020-01-20 14:34:33,793 - DEBUG - 7456 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-12
 2020-01-20 14:34:33,793 - DEBUG -  Describe List.
 2020-01-20 14:34:33,793 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 14:34:33,793 - DEBUG - 7480 }
 2020-01-20 14:34:33,793 - DEBUG - 7511 }
 2020-01-20 14:34:33,793 - DEBUG - 7625 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-13
 2020-01-20 14:34:33,793 - DEBUG -  Describe a Vector.
 2020-01-20 14:34:33,793 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 14:34:33,793 - DEBUG - 7649 }
 2020-01-20 14:34:33,793 - DEBUG - 7675 }
 2020-01-20 14:34:33,793 - DEBUG - 7840 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-14
 2020-01-20 14:34:33,793 - DEBUG -  Describe Set.
 2020-01-20 14:34:33,793 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 14:34:33,793 - DEBUG - 7864 }
 2020-01-20 14:34:33,793 - DEBUG - 7894 }
 2020-01-20 14:34:33,793 - DEBUG - 8360 }
 2020-01-20 14:34:33,793 - DEBUG - data_structures-15
 2020-01-20 14:34:33,793 - DEBUG -  Describe a Stack.
 2020-01-20 14:34:33,793 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 14:34:33,793 - DEBUG - 8384 }
 2020-01-20 14:34:33,809 - DEBUG - 8414 }
 2020-01-20 14:34:33,809 - DEBUG - 8949 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-16
 2020-01-20 14:34:33,809 - DEBUG -  Describe a queue.
 2020-01-20 14:34:33,809 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 14:34:33,809 - DEBUG - 8973 }
 2020-01-20 14:34:33,809 - DEBUG - 9008 }
 2020-01-20 14:34:33,809 - DEBUG - 9456 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-17
 2020-01-20 14:34:33,809 - DEBUG -  Describe a Dictionary.
 2020-01-20 14:34:33,809 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 14:34:33,809 - DEBUG - 9480 }
 2020-01-20 14:34:33,809 - DEBUG - 9525 }
 2020-01-20 14:34:33,809 - DEBUG - 10271 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-18
 2020-01-20 14:34:33,809 - DEBUG -  Describe a Tree data structures.
 2020-01-20 14:34:33,809 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 14:34:33,809 - DEBUG - 10295 }
 2020-01-20 14:34:33,809 - DEBUG - 10325 }
 2020-01-20 14:34:33,809 - DEBUG - 10932 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-19
 2020-01-20 14:34:33,809 - DEBUG -  Describe a Graph.
 2020-01-20 14:34:33,809 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 14:34:33,809 - DEBUG - 10960 }
 2020-01-20 14:34:33,809 - DEBUG - 11042 }
 2020-01-20 14:34:33,809 - DEBUG - 11361 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-java-1
 2020-01-20 14:34:33,809 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 14:34:33,809 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 14:34:33,809 - DEBUG - 11389 }
 2020-01-20 14:34:33,809 - DEBUG - 11460 }
 2020-01-20 14:34:33,809 - DEBUG - 11641 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-java-2
 2020-01-20 14:34:33,809 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 14:34:33,809 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 14:34:33,809 - DEBUG - 11669 }
 2020-01-20 14:34:33,809 - DEBUG - 11714 }
 2020-01-20 14:34:33,809 - DEBUG - 11877 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-java-3
 2020-01-20 14:34:33,809 - DEBUG -  Describe java boolean primitive.
 2020-01-20 14:34:33,809 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 14:34:33,809 - DEBUG - 11905 }
 2020-01-20 14:34:33,809 - DEBUG - 11943 }
 2020-01-20 14:34:33,809 - DEBUG - 12272 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-java-4
 2020-01-20 14:34:33,809 - DEBUG -  Describe java references.
 2020-01-20 14:34:33,809 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 14:34:33,809 - DEBUG - 12296 }
 2020-01-20 14:34:33,809 - DEBUG - 12375 }
 2020-01-20 14:34:33,809 - DEBUG - 12458 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-20
 2020-01-20 14:34:33,809 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 14:34:33,809 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 14:34:33,809 - DEBUG - 12492 }
 2020-01-20 14:34:33,809 - DEBUG - 12532 }
 2020-01-20 14:34:33,809 - DEBUG - 12826 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-javascript-1
 2020-01-20 14:34:33,809 - DEBUG -  Name JavaScript primitives.
 2020-01-20 14:34:33,809 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 14:34:33,809 - DEBUG - 12850 }
 2020-01-20 14:34:33,809 - DEBUG - 12956 }
 2020-01-20 14:34:33,809 - DEBUG - 13123 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-21
 2020-01-20 14:34:33,809 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 14:34:33,809 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 14:34:33,809 - DEBUG - 13153 }
 2020-01-20 14:34:33,809 - DEBUG - 13189 }
 2020-01-20 14:34:33,809 - DEBUG - 13247 }
 2020-01-20 14:34:33,809 - DEBUG - data_structures-python-1
 2020-01-20 14:34:33,809 - DEBUG -  List python primitives.
 2020-01-20 14:34:33,809 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 14:34:33,809 - DEBUG - 13277 }
 2020-01-20 14:34:33,809 - DEBUG - 13309 }
 2020-01-20 14:34:33,809 - DEBUG - 13422 }
 2020-01-20 14:34:33,825 - DEBUG - data_structures-csharp-1
 2020-01-20 14:34:33,825 - DEBUG -  List c# primitives.
 2020-01-20 14:34:33,825 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 14:34:33,825 - DEBUG - 13434 }
 2020-01-20 14:34:33,825 - DEBUG - 13477 }
 2020-01-20 14:34:33,825 - DEBUG - 13821 }
 2020-01-20 14:34:33,825 - DEBUG - oop-1
 2020-01-20 14:34:33,825 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 14:34:33,825 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 14:34:33,825 - DEBUG - 13832 }
 2020-01-20 14:34:33,825 - DEBUG - 13899 }
 2020-01-20 14:34:33,825 - DEBUG - 13965 }
 2020-01-20 14:34:33,825 - DEBUG - oop-2
 2020-01-20 14:34:33,825 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 14:34:33,825 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 14:34:33,825 - DEBUG - 13976 }
 2020-01-20 14:34:33,825 - DEBUG - 14039 }
 2020-01-20 14:34:33,825 - DEBUG - 14084 }
 2020-01-20 14:34:33,825 - DEBUG - oop-3
 2020-01-20 14:34:33,825 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 14:34:33,825 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 14:34:33,825 - DEBUG - 14095 }
 2020-01-20 14:34:33,825 - DEBUG - 14149 }
 2020-01-20 14:34:33,825 - DEBUG - 14406 }
 2020-01-20 14:34:33,825 - DEBUG - oop-4
 2020-01-20 14:34:33,825 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 14:34:33,825 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 14:34:33,825 - DEBUG - 14417 }
 2020-01-20 14:34:33,825 - DEBUG - 14471 }
 2020-01-20 14:34:33,825 - DEBUG - 14834 }
 2020-01-20 14:34:33,825 - DEBUG - oop-5
 2020-01-20 14:34:33,825 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 14:34:33,825 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 14:34:33,825 - DEBUG - 14845 }
 2020-01-20 14:34:33,825 - DEBUG - 14899 }
 2020-01-20 14:34:33,825 - DEBUG - 15220 }
 2020-01-20 14:34:33,825 - DEBUG - oop-6
 2020-01-20 14:34:33,825 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 14:34:33,825 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 14:34:33,825 - DEBUG - 15242 }
 2020-01-20 14:34:33,825 - DEBUG - 15294 }
 2020-01-20 14:34:33,825 - DEBUG - 15369 }
 2020-01-20 14:34:33,825 - DEBUG - oop-creational-1
 2020-01-20 14:34:33,825 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 14:34:33,825 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 14:34:33,825 - DEBUG - 15391 }
 2020-01-20 14:34:33,825 - DEBUG - 15444 }
 2020-01-20 14:34:33,825 - DEBUG - 15583 }
 2020-01-20 14:34:33,825 - DEBUG - oop-behavioral-1
 2020-01-20 14:34:33,825 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 14:34:33,825 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 14:34:33,825 - DEBUG - 15605 }
 2020-01-20 14:34:33,825 - DEBUG - 15657 }
 2020-01-20 14:34:33,825 - DEBUG - 15733 }
 2020-01-20 14:34:33,825 - DEBUG - oop-structural-1
 2020-01-20 14:34:33,825 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 14:34:33,825 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 14:34:33,825 - DEBUG - 15755 }
 2020-01-20 14:34:33,825 - DEBUG - 15842 }
 2020-01-20 14:34:33,825 - DEBUG - 15882 }
 2020-01-20 14:34:33,825 - DEBUG - oop-structural-2
 2020-01-20 14:34:33,825 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 14:34:33,825 - DEBUG -  Model View Controller or MVC.
 2020-01-20 14:34:33,825 - DEBUG - 15904 }
 2020-01-20 14:34:33,825 - DEBUG - 15938 }
 2020-01-20 14:34:33,825 - DEBUG - 16451 }
 2020-01-20 14:34:33,825 - DEBUG - oop-structural-3
 2020-01-20 14:34:33,825 - DEBUG -  Describe MVC pattern.
 2020-01-20 14:34:33,825 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 14:34:33,825 - DEBUG - 16473 }
 2020-01-20 14:34:33,825 - DEBUG - 16513 }
 2020-01-20 14:34:33,825 - DEBUG - 16769 }
 2020-01-20 14:34:33,825 - DEBUG - oop-creational-2
 2020-01-20 14:34:33,825 - DEBUG -  What is the Factory Method?
 2020-01-20 14:34:33,825 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 14:34:33,825 - DEBUG - 16791 }
 2020-01-20 14:34:33,825 - DEBUG - 16822 }
 2020-01-20 14:34:33,825 - DEBUG - 17062 }
 2020-01-20 14:34:33,825 - DEBUG - oop-creational-3
 2020-01-20 14:34:33,825 - DEBUG -  What is Prototype?
 2020-01-20 14:34:33,825 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 14:34:33,825 - DEBUG - 17084 }
 2020-01-20 14:34:33,825 - DEBUG - 17115 }
 2020-01-20 14:34:33,825 - DEBUG - 17404 }
 2020-01-20 14:34:33,825 - DEBUG - oop-creational-4
 2020-01-20 14:34:33,825 - DEBUG -  What is Singleton?
 2020-01-20 14:34:33,825 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 14:34:33,825 - DEBUG - 17426 }
 2020-01-20 14:34:33,825 - DEBUG - 17464 }
 2020-01-20 14:34:33,825 - DEBUG - 18097 }
 2020-01-20 14:34:33,825 - DEBUG - oop-creational-5
 2020-01-20 14:34:33,825 - DEBUG -  What is Abstract Factory?
 2020-01-20 14:34:33,825 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 14:34:33,825 - DEBUG - 18119 }
 2020-01-20 14:34:33,840 - DEBUG - 18174 }
 2020-01-20 14:34:33,840 - DEBUG - 18512 }
 2020-01-20 14:34:33,840 - DEBUG - oop-creational-6
 2020-01-20 14:34:33,840 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 14:34:33,840 - DEBUG - 18534 }
 2020-01-20 14:34:33,840 - DEBUG - 18597 }
 2020-01-20 14:34:33,840 - DEBUG - 18869 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-2
 2020-01-20 14:34:33,840 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 14:34:33,840 - DEBUG - 18891 }
 2020-01-20 14:34:33,840 - DEBUG - 18947 }
 2020-01-20 14:34:33,840 - DEBUG - 19298 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-3
 2020-01-20 14:34:33,840 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 14:34:33,840 - DEBUG - 19320 }
 2020-01-20 14:34:33,840 - DEBUG - 19379 }
 2020-01-20 14:34:33,840 - DEBUG - 19657 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-4
 2020-01-20 14:34:33,840 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 14:34:33,840 - DEBUG - 19679 }
 2020-01-20 14:34:33,840 - DEBUG - 19734 }
 2020-01-20 14:34:33,840 - DEBUG - 20104 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-5
 2020-01-20 14:34:33,840 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 14:34:33,840 - DEBUG - 20126 }
 2020-01-20 14:34:33,840 - DEBUG - 20182 }
 2020-01-20 14:34:33,840 - DEBUG - 20562 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-6
 2020-01-20 14:34:33,840 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 14:34:33,840 - DEBUG - 20584 }
 2020-01-20 14:34:33,840 - DEBUG - 20637 }
 2020-01-20 14:34:33,840 - DEBUG - 20945 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-7
 2020-01-20 14:34:33,840 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 14:34:33,840 - DEBUG - 20967 }
 2020-01-20 14:34:33,840 - DEBUG - 21023 }
 2020-01-20 14:34:33,840 - DEBUG - 21457 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-8
 2020-01-20 14:34:33,840 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 14:34:33,840 - DEBUG - 21479 }
 2020-01-20 14:34:33,840 - DEBUG - 21535 }
 2020-01-20 14:34:33,840 - DEBUG - 21801 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-9
 2020-01-20 14:34:33,840 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 14:34:33,840 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 14:34:33,840 - DEBUG - 21824 }
 2020-01-20 14:34:33,840 - DEBUG - 21894 }
 2020-01-20 14:34:33,840 - DEBUG - 22311 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-10
 2020-01-20 14:34:33,840 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 14:34:33,840 - DEBUG - 22334 }
 2020-01-20 14:34:33,840 - DEBUG - 22393 }
 2020-01-20 14:34:33,840 - DEBUG - 22719 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-11
 2020-01-20 14:34:33,840 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 14:34:33,840 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 14:34:33,840 - DEBUG - 22742 }
 2020-01-20 14:34:33,840 - DEBUG - 22801 }
 2020-01-20 14:34:33,840 - DEBUG - 23266 }
 2020-01-20 14:34:33,840 - DEBUG - oop-behavioral-12
 2020-01-20 14:34:33,840 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 14:34:33,840 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 14:34:33,856 - DEBUG - 23288 }
 2020-01-20 14:34:33,856 - DEBUG - 23343 }
 2020-01-20 14:34:33,856 - DEBUG - 23656 }
 2020-01-20 14:34:33,856 - DEBUG - oop-structural-4
 2020-01-20 14:34:33,856 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 14:34:33,856 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 14:34:33,856 - DEBUG - 23678 }
 2020-01-20 14:34:33,856 - DEBUG - 23735 }
 2020-01-20 14:34:33,856 - DEBUG - 24091 }
 2020-01-20 14:34:33,856 - DEBUG - oop-structural-5
 2020-01-20 14:34:33,856 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 14:34:33,856 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 14:34:33,856 - DEBUG - 24113 }
 2020-01-20 14:34:33,856 - DEBUG - 24170 }
 2020-01-20 14:34:33,856 - DEBUG - 24554 }
 2020-01-20 14:34:33,856 - DEBUG - oop-structural-6
 2020-01-20 14:34:33,856 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 14:34:33,856 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 14:34:33,856 - DEBUG - 24576 }
 2020-01-20 14:34:33,856 - DEBUG - 24629 }
 2020-01-20 14:34:33,856 - DEBUG - 24995 }
 2020-01-20 14:34:33,856 - DEBUG - oop-structural-7
 2020-01-20 14:34:33,856 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 14:34:33,856 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 14:34:33,856 - DEBUG - 25017 }
 2020-01-20 14:34:33,856 - DEBUG - 25071 }
 2020-01-20 14:34:33,856 - DEBUG - 25501 }
 2020-01-20 14:34:33,856 - DEBUG - oop-structural-8
 2020-01-20 14:34:33,856 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 14:34:33,856 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 14:34:33,856 - DEBUG - 25523 }
 2020-01-20 14:34:33,856 - DEBUG - 25580 }
 2020-01-20 14:34:33,856 - DEBUG - 26139 }
 2020-01-20 14:34:33,856 - DEBUG - oop-structural-9
 2020-01-20 14:34:33,856 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 14:34:33,856 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 14:34:33,856 - DEBUG - 26162 }
 2020-01-20 14:34:33,856 - DEBUG - 26216 }
 2020-01-20 14:34:33,856 - DEBUG - 26748 }
 2020-01-20 14:34:33,856 - DEBUG - oop-structural-10
 2020-01-20 14:34:33,856 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 14:34:33,856 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 14:34:33,856 - DEBUG - 26782 }
 2020-01-20 14:34:33,856 - DEBUG - 26838 }
 2020-01-20 14:34:33,856 - DEBUG - 26980 }
 2020-01-20 14:34:33,856 - DEBUG - python-datatypes-strings-1
 2020-01-20 14:34:33,856 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 14:34:33,856 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 14:34:33,856 - DEBUG - 27013 }
 2020-01-20 14:34:33,856 - DEBUG - 27073 }
 2020-01-20 14:34:33,856 - DEBUG - 27141 }
 2020-01-20 14:34:33,856 - DEBUG - python-datatypes-strings-2
 2020-01-20 14:34:33,856 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 14:34:33,856 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 14:34:33,856 - DEBUG - 27174 }
 2020-01-20 14:34:33,856 - DEBUG - 27247 }
 2020-01-20 14:34:33,856 - DEBUG - 27409 }
 2020-01-20 14:34:33,856 - DEBUG - python-datatypes-strings-3
 2020-01-20 14:34:33,856 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 14:34:33,856 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 14:34:33,856 - DEBUG - 27442 }
 2020-01-20 14:34:33,856 - DEBUG - 27502 }
 2020-01-20 14:34:33,856 - DEBUG - 27600 }
 2020-01-20 14:34:33,856 - DEBUG - python-datatypes-strings-4
 2020-01-20 14:34:33,856 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 14:34:33,856 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 14:34:33,856 - DEBUG - 27634 }
 2020-01-20 14:34:33,856 - DEBUG - 27685 }
 2020-01-20 14:34:33,856 - DEBUG - 27715 }
 2020-01-20 14:34:33,856 - DEBUG - python-datatypes-strings-5
 2020-01-20 14:34:33,856 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 14:34:33,856 - DEBUG -  len(mystring) is 5
 2020-01-20 14:34:33,856 - DEBUG - 27748 }
 2020-01-20 14:34:33,856 - DEBUG - 27790 }
 2020-01-20 14:34:33,856 - DEBUG - 27877 }
 2020-01-20 14:34:33,856 - DEBUG - python-datatypes-strings-6
 2020-01-20 14:34:33,856 - DEBUG -  How do you merge two strings?
 2020-01-20 14:34:33,856 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 14:34:33,856 - DEBUG - 27912 }
 2020-01-20 14:34:33,856 - DEBUG - 27961 }
 2020-01-20 14:34:33,856 - DEBUG - 28039 }
 2020-01-20 14:34:33,856 - DEBUG - python-datatypes-strings-7
 2020-01-20 14:34:33,856 - DEBUG -  How do you use a number in a string?
 2020-01-20 14:34:33,871 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 14:34:33,871 - DEBUG - 28074 }
 2020-01-20 14:34:33,871 - DEBUG - 28153 }
 2020-01-20 14:34:33,871 - DEBUG - 28184 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-strings-8
 2020-01-20 14:34:33,871 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 14:34:33,871 - DEBUG -  mystring.split(',')
 2020-01-20 14:34:33,871 - DEBUG - 28217 }
 2020-01-20 14:34:33,871 - DEBUG - 28272 }
 2020-01-20 14:34:33,871 - DEBUG - 28300 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-strings-9
 2020-01-20 14:34:33,871 - DEBUG -  How do you trim white space from a string?
 2020-01-20 14:34:33,871 - DEBUG -  mystring.strip()
 2020-01-20 14:34:33,871 - DEBUG - 28334 }
 2020-01-20 14:34:33,871 - DEBUG - 28394 }
 2020-01-20 14:34:33,871 - DEBUG - 28446 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-strings-10
 2020-01-20 14:34:33,871 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 14:34:33,871 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 14:34:33,871 - DEBUG - 28479 }
 2020-01-20 14:34:33,871 - DEBUG - 28525 }
 2020-01-20 14:34:33,871 - DEBUG - 28640 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-numbers-1
 2020-01-20 14:34:33,871 - DEBUG -  Describe types of python numbers.
 2020-01-20 14:34:33,871 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 14:34:33,871 - DEBUG - 28673 }
 2020-01-20 14:34:33,871 - DEBUG - 28745 }
 2020-01-20 14:34:33,871 - DEBUG - 28893 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-numbers-2
 2020-01-20 14:34:33,871 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 14:34:33,871 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 14:34:33,871 - DEBUG - 28926 }
 2020-01-20 14:34:33,871 - DEBUG - 29001 }
 2020-01-20 14:34:33,871 - DEBUG - 29095 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-numbers-3
 2020-01-20 14:34:33,871 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 14:34:33,871 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 14:34:33,871 - DEBUG - 29128 }
 2020-01-20 14:34:33,871 - DEBUG - 29179 }
 2020-01-20 14:34:33,871 - DEBUG - 29201 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-numbers-4
 2020-01-20 14:34:33,871 - DEBUG -  How do the absolute value of a number?
 2020-01-20 14:34:33,871 - DEBUG -  abs(mynum)
 2020-01-20 14:34:33,871 - DEBUG - 29234 }
 2020-01-20 14:34:33,871 - DEBUG - 29284 }
 2020-01-20 14:34:33,871 - DEBUG - 29313 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-numbers-5
 2020-01-20 14:34:33,871 - DEBUG -  How do you raise a number to a power?
 2020-01-20 14:34:33,871 - DEBUG -  pow(power,number)
 2020-01-20 14:34:33,871 - DEBUG - 29346 }
 2020-01-20 14:34:33,871 - DEBUG - 29390 }
 2020-01-20 14:34:33,871 - DEBUG - 29426 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-numbers-6
 2020-01-20 14:34:33,871 - DEBUG -  How do you round a real number?
 2020-01-20 14:34:33,871 - DEBUG -  round(num,decimalplaces)
 2020-01-20 14:34:33,871 - DEBUG - 29459 }
 2020-01-20 14:34:33,871 - DEBUG - 29513 }
 2020-01-20 14:34:33,871 - DEBUG - 29681 }
 2020-01-20 14:34:33,871 - DEBUG - python-datatypes-numbers-7
 2020-01-20 14:34:33,871 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 14:34:33,871 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 14:34:33,871 - DEBUG - 29695 }
 2020-01-20 14:34:33,871 - DEBUG - 29768 }
 2020-01-20 14:34:33,871 - DEBUG - 29837 }
 2020-01-20 14:34:33,871 - DEBUG - uml-1
 2020-01-20 14:34:33,871 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 14:34:33,871 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 14:34:33,871 - DEBUG - 29848 }
 2020-01-20 14:34:33,871 - DEBUG - 29892 }
 2020-01-20 14:34:33,871 - DEBUG - 29989 }
 2020-01-20 14:34:33,871 - DEBUG - uml-2
 2020-01-20 14:34:33,871 - DEBUG -  What is an interaction diagram?
 2020-01-20 14:34:33,871 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 14:34:33,871 - DEBUG - 30000 }
 2020-01-20 14:34:33,871 - DEBUG - 30041 }
 2020-01-20 14:34:33,871 - DEBUG - 30351 }
 2020-01-20 14:34:33,871 - DEBUG - uml-3
 2020-01-20 14:34:33,871 - DEBUG -  What is a structure diagram?
 2020-01-20 14:34:33,871 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 14:34:33,871 - DEBUG - 30362 }
 2020-01-20 14:34:33,871 - DEBUG - 30402 }
 2020-01-20 14:34:33,871 - DEBUG - 30516 }
 2020-01-20 14:34:33,871 - DEBUG - uml-4
 2020-01-20 14:34:33,871 - DEBUG -  What is a behavior diagram?
 2020-01-20 14:34:33,871 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 14:34:33,871 - DEBUG - 30537 }
 2020-01-20 14:34:33,871 - DEBUG - 30588 }
 2020-01-20 14:34:33,871 - DEBUG - 30670 }
 2020-01-20 14:34:33,871 - DEBUG - uml-structure-1
 2020-01-20 14:34:33,871 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 14:34:33,871 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 14:34:33,871 - DEBUG - 30690 }
 2020-01-20 14:34:33,871 - DEBUG - 30755 }
 2020-01-20 14:34:33,871 - DEBUG - 30815 }
 2020-01-20 14:34:33,871 - DEBUG - uml-behavior-1
 2020-01-20 14:34:33,871 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 14:34:33,871 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 14:34:33,871 - DEBUG - 30838 }
 2020-01-20 14:34:33,871 - DEBUG - 30895 }
 2020-01-20 14:34:33,871 - DEBUG - 30960 }
 2020-01-20 14:34:33,871 - DEBUG - uml-interaction-1
 2020-01-20 14:34:33,871 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 14:34:33,887 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 14:34:33,887 - DEBUG - 30971 }
 2020-01-20 14:34:33,887 - DEBUG - 31015 }
 2020-01-20 14:34:33,887 - DEBUG - 31049 }
 2020-01-20 14:34:33,887 - DEBUG - uml-2
 2020-01-20 14:34:33,887 - DEBUG -  How many uml digrams are there?
 2020-01-20 14:34:33,887 - DEBUG -  Around 14 give or take.
 2020-01-20 14:34:33,887 - DEBUG - 31070 }
 2020-01-20 14:34:33,887 - DEBUG - 31121 }
 2020-01-20 14:34:33,887 - DEBUG - 31369 }
 2020-01-20 14:34:33,887 - DEBUG - uml-structure-2
 2020-01-20 14:34:33,887 - DEBUG -  Describe the structure Package diagram
 2020-01-20 14:34:33,887 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 14:34:33,887 - DEBUG - 31390 }
 2020-01-20 14:34:33,887 - DEBUG - 31440 }
 2020-01-20 14:34:33,887 - DEBUG - 31713 }
 2020-01-20 14:34:33,887 - DEBUG - uml-structure-3
 2020-01-20 14:34:33,887 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 14:34:33,887 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 14:34:33,887 - DEBUG - 31734 }
 2020-01-20 14:34:33,887 - DEBUG - 31785 }
 2020-01-20 14:34:33,887 - DEBUG - 31919 }
 2020-01-20 14:34:33,887 - DEBUG - uml-structure-4
 2020-01-20 14:34:33,887 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 14:34:33,887 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 14:34:33,887 - DEBUG - 31940 }
 2020-01-20 14:34:33,887 - DEBUG - 31994 }
 2020-01-20 14:34:33,887 - DEBUG - 32246 }
 2020-01-20 14:34:33,887 - DEBUG - uml-structure-5
 2020-01-20 14:34:33,887 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 14:34:33,887 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 14:34:33,887 - DEBUG - 32267 }
 2020-01-20 14:34:33,887 - DEBUG - 32321 }
 2020-01-20 14:34:33,887 - DEBUG - 32658 }
 2020-01-20 14:34:33,887 - DEBUG - uml-structure-6
 2020-01-20 14:34:33,887 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 14:34:33,887 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 14:34:33,887 - DEBUG - 32679 }
 2020-01-20 14:34:33,887 - DEBUG - 32736 }
 2020-01-20 14:34:33,887 - DEBUG - 32924 }
 2020-01-20 14:34:33,887 - DEBUG - uml-structure-7
 2020-01-20 14:34:33,887 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 14:34:33,887 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 14:34:33,887 - DEBUG - 32945 }
 2020-01-20 14:34:33,887 - DEBUG - 33000 }
 2020-01-20 14:34:33,887 - DEBUG - 33308 }
 2020-01-20 14:34:33,887 - DEBUG - uml-structure-8
 2020-01-20 14:34:33,887 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 14:34:33,887 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 14:34:33,887 - DEBUG - 33328 }
 2020-01-20 14:34:33,887 - DEBUG - 33380 }
 2020-01-20 14:34:33,887 - DEBUG - 33546 }
 2020-01-20 14:34:33,887 - DEBUG - uml-behavior-1
 2020-01-20 14:34:33,887 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 14:34:33,887 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 14:34:33,887 - DEBUG - 33566 }
 2020-01-20 14:34:33,887 - DEBUG - 33618 }
 2020-01-20 14:34:33,887 - DEBUG - 33863 }
 2020-01-20 14:34:33,887 - DEBUG - uml-behavior-2
 2020-01-20 14:34:33,887 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 14:34:33,887 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 14:34:33,887 - DEBUG - 33883 }
 2020-01-20 14:34:33,887 - DEBUG - 33932 }
 2020-01-20 14:34:33,887 - DEBUG - 34238 }
 2020-01-20 14:34:33,887 - DEBUG - uml-behavior-3
 2020-01-20 14:34:33,887 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 14:34:33,887 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 14:34:33,887 - DEBUG - 34261 }
 2020-01-20 14:34:33,887 - DEBUG - 34316 }
 2020-01-20 14:34:33,887 - DEBUG - 34474 }
 2020-01-20 14:34:33,887 - DEBUG - uml-interaction-2
 2020-01-20 14:34:33,887 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 14:34:33,887 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 14:34:33,887 - DEBUG - 34497 }
 2020-01-20 14:34:33,887 - DEBUG - 34550 }
 2020-01-20 14:34:33,887 - DEBUG - 34800 }
 2020-01-20 14:34:33,887 - DEBUG - uml-interaction-3
 2020-01-20 14:34:33,887 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 14:34:33,887 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 14:34:33,887 - DEBUG - 34823 }
 2020-01-20 14:34:33,887 - DEBUG - 34884 }
 2020-01-20 14:34:33,887 - DEBUG - 35155 }
 2020-01-20 14:34:33,887 - DEBUG - uml-interaction-4
 2020-01-20 14:34:33,887 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 14:34:33,887 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 14:34:33,887 - DEBUG - 35178 }
 2020-01-20 14:34:33,887 - DEBUG - 35245 }
 2020-01-20 14:34:33,887 - DEBUG - 35403 }
 2020-01-20 14:34:33,887 - DEBUG - uml-interaction-5
 2020-01-20 14:34:33,887 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 14:34:33,903 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 14:34:33,903 - DEBUG - algo_cards
 2020-01-20 14:34:33,903 - DEBUG - box1
 2020-01-20 14:34:33,903 - DEBUG - algo_cards
 2020-01-20 14:34:33,903 - DEBUG - box1
 2020-01-20 14:34:33,903 - DEBUG - box2
 2020-01-20 14:34:33,903 - DEBUG - algo_cards
 2020-01-20 14:34:33,903 - DEBUG - box1
 2020-01-20 14:34:33,903 - DEBUG - box2
 2020-01-20 14:34:33,903 - DEBUG - box3
 2020-01-20 14:34:33,903 - DEBUG - algo_cards
 2020-01-20 14:34:33,903 - DEBUG - box1
 2020-01-20 14:34:33,903 - DEBUG - box2
 2020-01-20 14:34:33,903 - DEBUG - box3
 2020-01-20 14:34:33,903 - DEBUG - box4
 2020-01-20 14:34:33,903 - DEBUG - algo_cards
 2020-01-20 14:34:33,903 - DEBUG - box1
 2020-01-20 14:34:33,903 - DEBUG - box2
 2020-01-20 14:34:33,903 - DEBUG - box3
 2020-01-20 14:34:33,903 - DEBUG - box4
 2020-01-20 14:34:33,903 - DEBUG - box5
 2020-01-20 14:34:33,903 - DEBUG - algo_cards
 2020-01-20 14:34:33,903 - DEBUG - box1
 2020-01-20 14:34:33,903 - DEBUG - box2
 2020-01-20 14:34:33,903 - DEBUG - box3
 2020-01-20 14:34:33,903 - DEBUG - box4
 2020-01-20 14:34:33,903 - DEBUG - box5
 2020-01-20 14:34:33,903 - DEBUG - box6
 2020-01-20 14:34:33,903 - DEBUG - finding test cycle file
 2020-01-20 14:34:33,903 - DEBUG - quizs\
 2020-01-20 14:34:33,903 - DEBUG - algo_cards.txt
 2020-01-20 14:34:33,903 - DEBUG - box1.txt
 2020-01-20 14:34:33,903 - DEBUG - box2.txt
 2020-01-20 14:34:33,903 - DEBUG - box3.txt
 2020-01-20 14:34:33,903 - DEBUG - box4.txt
 2020-01-20 14:34:33,903 - DEBUG - box5.txt
 2020-01-20 14:34:33,903 - DEBUG - box6.txt
 2020-01-20 14:34:33,903 - DEBUG - data_struct_cards.txt
 2020-01-20 14:34:33,903 - DEBUG - oop_cards.txt
 2020-01-20 14:34:33,903 - DEBUG - python_cards.txt
 2020-01-20 14:34:33,903 - DEBUG - testcycle1.txt
 2020-01-20 14:34:33,903 - DEBUG - uml_cards.txt
 2020-01-20 14:34:33,903 - DEBUG - algo_cards
 2020-01-20 14:34:33,903 - DEBUG - box1
 2020-01-20 14:34:33,903 - DEBUG - box2
 2020-01-20 14:34:33,903 - DEBUG - box3
 2020-01-20 14:34:33,903 - DEBUG - box4
 2020-01-20 14:34:33,903 - DEBUG - box5
 2020-01-20 14:34:33,903 - DEBUG - box6
 2020-01-20 14:34:33,903 - DEBUG - data_struct_cards
 2020-01-20 14:34:33,903 - DEBUG - oop_cards
 2020-01-20 14:34:33,903 - DEBUG - python_cards
 2020-01-20 14:34:33,903 - DEBUG - testcycle1
 2020-01-20 14:34:33,903 - DEBUG - found testcycle1.txt
 2020-01-20 14:34:33,903 - DEBUG - testcycle1
 2020-01-20 14:34:33,903 - DEBUG - quizs\
 2020-01-20 14:34:33,903 - DEBUG - Starting new cycle number 1
 2020-01-20 14:34:33,903 - DEBUG - highestbox 1
 2020-01-20 14:34:33,903 - DEBUG - Loading box1 to box1
 2020-01-20 14:34:33,918 - DEBUG - Cycle number 2
 2020-01-20 15:33:15,723 - DEBUG - Start of Logging Leitner Module
 2020-01-20 15:33:15,723 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 15:33:15,723 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 15:33:15,723 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 15:33:15,723 - INFO - on things you get right.
 2020-01-20 15:33:15,757 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 15:33:15,757 - DEBUG - 15 }
 2020-01-20 15:33:15,757 - DEBUG - 57 }
 2020-01-20 15:33:15,757 - DEBUG - 225 }
 2020-01-20 15:33:15,757 - DEBUG - algorithm-1
 2020-01-20 15:33:15,757 - DEBUG -  What is algorithm efficiency?
 2020-01-20 15:33:15,757 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 15:33:15,757 - DEBUG - 242 }
 2020-01-20 15:33:15,757 - DEBUG - 324 }
 2020-01-20 15:33:15,757 - DEBUG - 403 }
 2020-01-20 15:33:15,757 - DEBUG - algorithm-2
 2020-01-20 15:33:15,757 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 15:33:15,757 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 15:33:15,757 - DEBUG - 420 }
 2020-01-20 15:33:15,757 - DEBUG - 502 }
 2020-01-20 15:33:15,757 - DEBUG - 531 }
 2020-01-20 15:33:15,757 - DEBUG - algorithm-3
 2020-01-20 15:33:15,757 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 15:33:15,757 - DEBUG -  Little O notation.
 2020-01-20 15:33:15,757 - DEBUG - 554 }
 2020-01-20 15:33:15,773 - DEBUG - 597 }
 2020-01-20 15:33:15,773 - DEBUG - 846 }
 2020-01-20 15:33:15,773 - DEBUG - alogorithm-bigo-1
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 15:33:15,773 - DEBUG - 868 }
 2020-01-20 15:33:15,773 - DEBUG - 911 }
 2020-01-20 15:33:15,773 - DEBUG - 1271 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-2
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 15:33:15,773 - DEBUG - 1293 }
 2020-01-20 15:33:15,773 - DEBUG - 1338 }
 2020-01-20 15:33:15,773 - DEBUG - 1581 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-3
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 15:33:15,773 - DEBUG - 1603 }
 2020-01-20 15:33:15,773 - DEBUG - 1650 }
 2020-01-20 15:33:15,773 - DEBUG - 1941 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-4
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 15:33:15,773 - DEBUG - 1963 }
 2020-01-20 15:33:15,773 - DEBUG - 2008 }
 2020-01-20 15:33:15,773 - DEBUG - 2088 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-5
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 15:33:15,773 - DEBUG - 2110 }
 2020-01-20 15:33:15,773 - DEBUG - 2155 }
 2020-01-20 15:33:15,773 - DEBUG - 2250 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-6
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 15:33:15,773 - DEBUG - 2272 }
 2020-01-20 15:33:15,773 - DEBUG - 2321 }
 2020-01-20 15:33:15,773 - DEBUG - 2517 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-7
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 15:33:15,773 - DEBUG - 2539 }
 2020-01-20 15:33:15,773 - DEBUG - 2606 }
 2020-01-20 15:33:15,773 - DEBUG - 2693 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-8
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 15:33:15,773 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 15:33:15,773 - DEBUG - 2715 }
 2020-01-20 15:33:15,773 - DEBUG - 2765 }
 2020-01-20 15:33:15,773 - DEBUG - 2893 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-9
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 15:33:15,773 - DEBUG - 2915 }
 2020-01-20 15:33:15,773 - DEBUG - 2959 }
 2020-01-20 15:33:15,773 - DEBUG - 3176 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-9
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 15:33:15,773 - DEBUG - 3199 }
 2020-01-20 15:33:15,773 - DEBUG - 3250 }
 2020-01-20 15:33:15,773 - DEBUG - 3415 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-10
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 15:33:15,773 - DEBUG - 3438 }
 2020-01-20 15:33:15,773 - DEBUG - 3493 }
 2020-01-20 15:33:15,773 - DEBUG - 3618 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-11
 2020-01-20 15:33:15,773 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 15:33:15,773 - DEBUG - 3641 }
 2020-01-20 15:33:15,773 - DEBUG - 3686 }
 2020-01-20 15:33:15,773 - DEBUG - 3838 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-12
 2020-01-20 15:33:15,773 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 15:33:15,773 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 15:33:15,773 - DEBUG - 3861 }
 2020-01-20 15:33:15,773 - DEBUG - 3916 }
 2020-01-20 15:33:15,773 - DEBUG - 4018 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-13
 2020-01-20 15:33:15,773 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 15:33:15,773 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 15:33:15,773 - DEBUG - 4041 }
 2020-01-20 15:33:15,773 - DEBUG - 4094 }
 2020-01-20 15:33:15,773 - DEBUG - 4229 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-14
 2020-01-20 15:33:15,773 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 15:33:15,773 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 15:33:15,773 - DEBUG - 4252 }
 2020-01-20 15:33:15,773 - DEBUG - 4299 }
 2020-01-20 15:33:15,773 - DEBUG - 4365 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-15
 2020-01-20 15:33:15,773 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 15:33:15,773 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 15:33:15,773 - DEBUG - 4388 }
 2020-01-20 15:33:15,773 - DEBUG - 4439 }
 2020-01-20 15:33:15,773 - DEBUG - 4545 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-16
 2020-01-20 15:33:15,773 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 15:33:15,773 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 15:33:15,773 - DEBUG - 4568 }
 2020-01-20 15:33:15,773 - DEBUG - 4613 }
 2020-01-20 15:33:15,773 - DEBUG - 4720 }
 2020-01-20 15:33:15,773 - DEBUG - algorithm-bigo-17
 2020-01-20 15:33:15,788 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 15:33:15,788 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 15:33:15,788 - DEBUG - 4742 }
 2020-01-20 15:33:15,788 - DEBUG - 4806 }
 2020-01-20 15:33:15,788 - DEBUG - 4927 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-1
 2020-01-20 15:33:15,788 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 15:33:15,788 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 15:33:15,788 - DEBUG - 4950 }
 2020-01-20 15:33:15,788 - DEBUG - 5021 }
 2020-01-20 15:33:15,788 - DEBUG - 5096 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-2
 2020-01-20 15:33:15,788 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 15:33:15,788 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 15:33:15,788 - DEBUG - 5119 }
 2020-01-20 15:33:15,788 - DEBUG - 5169 }
 2020-01-20 15:33:15,788 - DEBUG - 5250 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-3
 2020-01-20 15:33:15,788 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 15:33:15,788 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 15:33:15,788 - DEBUG - 5273 }
 2020-01-20 15:33:15,788 - DEBUG - 5344 }
 2020-01-20 15:33:15,788 - DEBUG - 5390 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-4
 2020-01-20 15:33:15,788 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 15:33:15,788 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 15:33:15,788 - DEBUG - 5413 }
 2020-01-20 15:33:15,788 - DEBUG - 5447 }
 2020-01-20 15:33:15,788 - DEBUG - 5479 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-5
 2020-01-20 15:33:15,788 - DEBUG -  List kinds of Queues.
 2020-01-20 15:33:15,788 - DEBUG -  Queue, Piority Queue.
 2020-01-20 15:33:15,788 - DEBUG - 5502 }
 2020-01-20 15:33:15,788 - DEBUG - 5553 }
 2020-01-20 15:33:15,788 - DEBUG - 5614 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-6
 2020-01-20 15:33:15,788 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 15:33:15,788 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 15:33:15,788 - DEBUG - 5637 }
 2020-01-20 15:33:15,788 - DEBUG - 5680 }
 2020-01-20 15:33:15,788 - DEBUG - 5746 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-7
 2020-01-20 15:33:15,788 - DEBUG -  List some main kinds of Trees.
 2020-01-20 15:33:15,788 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 15:33:15,788 - DEBUG - 5769 }
 2020-01-20 15:33:15,788 - DEBUG - 5829 }
 2020-01-20 15:33:15,788 - DEBUG - 5922 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-8
 2020-01-20 15:33:15,788 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 15:33:15,788 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 15:33:15,788 - DEBUG - 5945 }
 2020-01-20 15:33:15,788 - DEBUG - 6050 }
 2020-01-20 15:33:15,788 - DEBUG - 6359 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-9
 2020-01-20 15:33:15,788 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 15:33:15,788 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 15:33:15,788 - DEBUG - 6383 }
 2020-01-20 15:33:15,788 - DEBUG - 6428 }
 2020-01-20 15:33:15,788 - DEBUG - 6848 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-10
 2020-01-20 15:33:15,788 - DEBUG -  What is a linked data structure?
 2020-01-20 15:33:15,788 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 15:33:15,788 - DEBUG - 6872 }
 2020-01-20 15:33:15,788 - DEBUG - 6905 }
 2020-01-20 15:33:15,788 - DEBUG - 6937 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-11
 2020-01-20 15:33:15,788 - DEBUG -  List kinds of Graphs
 2020-01-20 15:33:15,788 - DEBUG -  Graph and Scene Graph
 2020-01-20 15:33:15,788 - DEBUG - 6961 }
 2020-01-20 15:33:15,788 - DEBUG - 6988 }
 2020-01-20 15:33:15,788 - DEBUG - 7456 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-12
 2020-01-20 15:33:15,788 - DEBUG -  Describe List.
 2020-01-20 15:33:15,788 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 15:33:15,788 - DEBUG - 7480 }
 2020-01-20 15:33:15,788 - DEBUG - 7511 }
 2020-01-20 15:33:15,788 - DEBUG - 7625 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-13
 2020-01-20 15:33:15,788 - DEBUG -  Describe a Vector.
 2020-01-20 15:33:15,788 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 15:33:15,788 - DEBUG - 7649 }
 2020-01-20 15:33:15,788 - DEBUG - 7675 }
 2020-01-20 15:33:15,788 - DEBUG - 7840 }
 2020-01-20 15:33:15,788 - DEBUG - data_structures-14
 2020-01-20 15:33:15,788 - DEBUG -  Describe Set.
 2020-01-20 15:33:15,788 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 15:33:15,788 - DEBUG - 7864 }
 2020-01-20 15:33:15,788 - DEBUG - 7894 }
 2020-01-20 15:33:15,804 - DEBUG - 8360 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-15
 2020-01-20 15:33:15,804 - DEBUG -  Describe a Stack.
 2020-01-20 15:33:15,804 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 15:33:15,804 - DEBUG - 8384 }
 2020-01-20 15:33:15,804 - DEBUG - 8414 }
 2020-01-20 15:33:15,804 - DEBUG - 8949 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-16
 2020-01-20 15:33:15,804 - DEBUG -  Describe a queue.
 2020-01-20 15:33:15,804 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 15:33:15,804 - DEBUG - 8973 }
 2020-01-20 15:33:15,804 - DEBUG - 9008 }
 2020-01-20 15:33:15,804 - DEBUG - 9456 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-17
 2020-01-20 15:33:15,804 - DEBUG -  Describe a Dictionary.
 2020-01-20 15:33:15,804 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 15:33:15,804 - DEBUG - 9480 }
 2020-01-20 15:33:15,804 - DEBUG - 9525 }
 2020-01-20 15:33:15,804 - DEBUG - 10271 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-18
 2020-01-20 15:33:15,804 - DEBUG -  Describe a Tree data structures.
 2020-01-20 15:33:15,804 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 15:33:15,804 - DEBUG - 10295 }
 2020-01-20 15:33:15,804 - DEBUG - 10325 }
 2020-01-20 15:33:15,804 - DEBUG - 10932 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-19
 2020-01-20 15:33:15,804 - DEBUG -  Describe a Graph.
 2020-01-20 15:33:15,804 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 15:33:15,804 - DEBUG - 10960 }
 2020-01-20 15:33:15,804 - DEBUG - 11042 }
 2020-01-20 15:33:15,804 - DEBUG - 11361 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-java-1
 2020-01-20 15:33:15,804 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 15:33:15,804 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 15:33:15,804 - DEBUG - 11389 }
 2020-01-20 15:33:15,804 - DEBUG - 11460 }
 2020-01-20 15:33:15,804 - DEBUG - 11641 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-java-2
 2020-01-20 15:33:15,804 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 15:33:15,804 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 15:33:15,804 - DEBUG - 11669 }
 2020-01-20 15:33:15,804 - DEBUG - 11714 }
 2020-01-20 15:33:15,804 - DEBUG - 11877 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-java-3
 2020-01-20 15:33:15,804 - DEBUG -  Describe java boolean primitive.
 2020-01-20 15:33:15,804 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 15:33:15,804 - DEBUG - 11905 }
 2020-01-20 15:33:15,804 - DEBUG - 11943 }
 2020-01-20 15:33:15,804 - DEBUG - 12272 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-java-4
 2020-01-20 15:33:15,804 - DEBUG -  Describe java references.
 2020-01-20 15:33:15,804 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 15:33:15,804 - DEBUG - 12296 }
 2020-01-20 15:33:15,804 - DEBUG - 12375 }
 2020-01-20 15:33:15,804 - DEBUG - 12458 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-20
 2020-01-20 15:33:15,804 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 15:33:15,804 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 15:33:15,804 - DEBUG - 12492 }
 2020-01-20 15:33:15,804 - DEBUG - 12532 }
 2020-01-20 15:33:15,804 - DEBUG - 12826 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-javascript-1
 2020-01-20 15:33:15,804 - DEBUG -  Name JavaScript primitives.
 2020-01-20 15:33:15,804 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 15:33:15,804 - DEBUG - 12850 }
 2020-01-20 15:33:15,804 - DEBUG - 12956 }
 2020-01-20 15:33:15,804 - DEBUG - 13123 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-21
 2020-01-20 15:33:15,804 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 15:33:15,804 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 15:33:15,804 - DEBUG - 13153 }
 2020-01-20 15:33:15,804 - DEBUG - 13189 }
 2020-01-20 15:33:15,804 - DEBUG - 13247 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-python-1
 2020-01-20 15:33:15,804 - DEBUG -  List python primitives.
 2020-01-20 15:33:15,804 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 15:33:15,804 - DEBUG - 13277 }
 2020-01-20 15:33:15,804 - DEBUG - 13309 }
 2020-01-20 15:33:15,804 - DEBUG - 13422 }
 2020-01-20 15:33:15,804 - DEBUG - data_structures-csharp-1
 2020-01-20 15:33:15,804 - DEBUG -  List c# primitives.
 2020-01-20 15:33:15,804 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 15:33:15,804 - DEBUG - 13434 }
 2020-01-20 15:33:15,819 - DEBUG - 13477 }
 2020-01-20 15:33:15,819 - DEBUG - 13821 }
 2020-01-20 15:33:15,819 - DEBUG - oop-1
 2020-01-20 15:33:15,819 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 15:33:15,819 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 15:33:15,819 - DEBUG - 13832 }
 2020-01-20 15:33:15,819 - DEBUG - 13899 }
 2020-01-20 15:33:15,819 - DEBUG - 13965 }
 2020-01-20 15:33:15,819 - DEBUG - oop-2
 2020-01-20 15:33:15,819 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 15:33:15,819 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 15:33:15,819 - DEBUG - 13976 }
 2020-01-20 15:33:15,819 - DEBUG - 14039 }
 2020-01-20 15:33:15,819 - DEBUG - 14084 }
 2020-01-20 15:33:15,819 - DEBUG - oop-3
 2020-01-20 15:33:15,819 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 15:33:15,819 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 15:33:15,819 - DEBUG - 14095 }
 2020-01-20 15:33:15,819 - DEBUG - 14149 }
 2020-01-20 15:33:15,819 - DEBUG - 14406 }
 2020-01-20 15:33:15,819 - DEBUG - oop-4
 2020-01-20 15:33:15,819 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 15:33:15,819 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 15:33:15,819 - DEBUG - 14417 }
 2020-01-20 15:33:15,819 - DEBUG - 14471 }
 2020-01-20 15:33:15,819 - DEBUG - 14834 }
 2020-01-20 15:33:15,819 - DEBUG - oop-5
 2020-01-20 15:33:15,819 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 15:33:15,819 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 15:33:15,819 - DEBUG - 14845 }
 2020-01-20 15:33:15,819 - DEBUG - 14899 }
 2020-01-20 15:33:15,819 - DEBUG - 15220 }
 2020-01-20 15:33:15,819 - DEBUG - oop-6
 2020-01-20 15:33:15,819 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 15:33:15,819 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 15:33:15,819 - DEBUG - 15242 }
 2020-01-20 15:33:15,819 - DEBUG - 15294 }
 2020-01-20 15:33:15,819 - DEBUG - 15369 }
 2020-01-20 15:33:15,819 - DEBUG - oop-creational-1
 2020-01-20 15:33:15,819 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 15:33:15,819 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 15:33:15,819 - DEBUG - 15391 }
 2020-01-20 15:33:15,819 - DEBUG - 15444 }
 2020-01-20 15:33:15,819 - DEBUG - 15583 }
 2020-01-20 15:33:15,819 - DEBUG - oop-behavioral-1
 2020-01-20 15:33:15,819 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 15:33:15,819 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 15:33:15,819 - DEBUG - 15605 }
 2020-01-20 15:33:15,819 - DEBUG - 15657 }
 2020-01-20 15:33:15,819 - DEBUG - 15733 }
 2020-01-20 15:33:15,819 - DEBUG - oop-structural-1
 2020-01-20 15:33:15,819 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 15:33:15,819 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 15:33:15,819 - DEBUG - 15755 }
 2020-01-20 15:33:15,819 - DEBUG - 15842 }
 2020-01-20 15:33:15,819 - DEBUG - 15882 }
 2020-01-20 15:33:15,819 - DEBUG - oop-structural-2
 2020-01-20 15:33:15,819 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 15:33:15,819 - DEBUG -  Model View Controller or MVC.
 2020-01-20 15:33:15,819 - DEBUG - 15904 }
 2020-01-20 15:33:15,819 - DEBUG - 15938 }
 2020-01-20 15:33:15,819 - DEBUG - 16451 }
 2020-01-20 15:33:15,819 - DEBUG - oop-structural-3
 2020-01-20 15:33:15,819 - DEBUG -  Describe MVC pattern.
 2020-01-20 15:33:15,819 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 15:33:15,819 - DEBUG - 16473 }
 2020-01-20 15:33:15,819 - DEBUG - 16513 }
 2020-01-20 15:33:15,819 - DEBUG - 16769 }
 2020-01-20 15:33:15,819 - DEBUG - oop-creational-2
 2020-01-20 15:33:15,819 - DEBUG -  What is the Factory Method?
 2020-01-20 15:33:15,819 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 15:33:15,819 - DEBUG - 16791 }
 2020-01-20 15:33:15,819 - DEBUG - 16822 }
 2020-01-20 15:33:15,819 - DEBUG - 17062 }
 2020-01-20 15:33:15,819 - DEBUG - oop-creational-3
 2020-01-20 15:33:15,819 - DEBUG -  What is Prototype?
 2020-01-20 15:33:15,819 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 15:33:15,819 - DEBUG - 17084 }
 2020-01-20 15:33:15,819 - DEBUG - 17115 }
 2020-01-20 15:33:15,819 - DEBUG - 17404 }
 2020-01-20 15:33:15,819 - DEBUG - oop-creational-4
 2020-01-20 15:33:15,819 - DEBUG -  What is Singleton?
 2020-01-20 15:33:15,819 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 15:33:15,819 - DEBUG - 17426 }
 2020-01-20 15:33:15,819 - DEBUG - 17464 }
 2020-01-20 15:33:15,819 - DEBUG - 18097 }
 2020-01-20 15:33:15,819 - DEBUG - oop-creational-5
 2020-01-20 15:33:15,819 - DEBUG -  What is Abstract Factory?
 2020-01-20 15:33:15,819 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 15:33:15,819 - DEBUG - 18119 }
 2020-01-20 15:33:15,819 - DEBUG - 18174 }
 2020-01-20 15:33:15,835 - DEBUG - 18512 }
 2020-01-20 15:33:15,835 - DEBUG - oop-creational-6
 2020-01-20 15:33:15,835 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 15:33:15,835 - DEBUG - 18534 }
 2020-01-20 15:33:15,835 - DEBUG - 18597 }
 2020-01-20 15:33:15,835 - DEBUG - 18869 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-2
 2020-01-20 15:33:15,835 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 15:33:15,835 - DEBUG - 18891 }
 2020-01-20 15:33:15,835 - DEBUG - 18947 }
 2020-01-20 15:33:15,835 - DEBUG - 19298 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-3
 2020-01-20 15:33:15,835 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 15:33:15,835 - DEBUG - 19320 }
 2020-01-20 15:33:15,835 - DEBUG - 19379 }
 2020-01-20 15:33:15,835 - DEBUG - 19657 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-4
 2020-01-20 15:33:15,835 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 15:33:15,835 - DEBUG - 19679 }
 2020-01-20 15:33:15,835 - DEBUG - 19734 }
 2020-01-20 15:33:15,835 - DEBUG - 20104 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-5
 2020-01-20 15:33:15,835 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 15:33:15,835 - DEBUG - 20126 }
 2020-01-20 15:33:15,835 - DEBUG - 20182 }
 2020-01-20 15:33:15,835 - DEBUG - 20562 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-6
 2020-01-20 15:33:15,835 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 15:33:15,835 - DEBUG - 20584 }
 2020-01-20 15:33:15,835 - DEBUG - 20637 }
 2020-01-20 15:33:15,835 - DEBUG - 20945 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-7
 2020-01-20 15:33:15,835 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 15:33:15,835 - DEBUG - 20967 }
 2020-01-20 15:33:15,835 - DEBUG - 21023 }
 2020-01-20 15:33:15,835 - DEBUG - 21457 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-8
 2020-01-20 15:33:15,835 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 15:33:15,835 - DEBUG - 21479 }
 2020-01-20 15:33:15,835 - DEBUG - 21535 }
 2020-01-20 15:33:15,835 - DEBUG - 21801 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-9
 2020-01-20 15:33:15,835 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 15:33:15,835 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 15:33:15,835 - DEBUG - 21824 }
 2020-01-20 15:33:15,835 - DEBUG - 21894 }
 2020-01-20 15:33:15,835 - DEBUG - 22311 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-10
 2020-01-20 15:33:15,835 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 15:33:15,835 - DEBUG - 22334 }
 2020-01-20 15:33:15,835 - DEBUG - 22393 }
 2020-01-20 15:33:15,835 - DEBUG - 22719 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-11
 2020-01-20 15:33:15,835 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 15:33:15,835 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 15:33:15,835 - DEBUG - 22742 }
 2020-01-20 15:33:15,835 - DEBUG - 22801 }
 2020-01-20 15:33:15,835 - DEBUG - 23266 }
 2020-01-20 15:33:15,835 - DEBUG - oop-behavioral-12
 2020-01-20 15:33:15,835 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 15:33:15,835 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 15:33:15,835 - DEBUG - 23288 }
 2020-01-20 15:33:15,851 - DEBUG - 23343 }
 2020-01-20 15:33:15,851 - DEBUG - 23656 }
 2020-01-20 15:33:15,851 - DEBUG - oop-structural-4
 2020-01-20 15:33:15,851 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 15:33:15,851 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 15:33:15,851 - DEBUG - 23678 }
 2020-01-20 15:33:15,851 - DEBUG - 23735 }
 2020-01-20 15:33:15,851 - DEBUG - 24091 }
 2020-01-20 15:33:15,851 - DEBUG - oop-structural-5
 2020-01-20 15:33:15,851 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 15:33:15,851 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 15:33:15,851 - DEBUG - 24113 }
 2020-01-20 15:33:15,851 - DEBUG - 24170 }
 2020-01-20 15:33:15,851 - DEBUG - 24554 }
 2020-01-20 15:33:15,851 - DEBUG - oop-structural-6
 2020-01-20 15:33:15,851 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 15:33:15,851 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 15:33:15,851 - DEBUG - 24576 }
 2020-01-20 15:33:15,851 - DEBUG - 24629 }
 2020-01-20 15:33:15,851 - DEBUG - 24995 }
 2020-01-20 15:33:15,851 - DEBUG - oop-structural-7
 2020-01-20 15:33:15,851 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 15:33:15,851 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 15:33:15,851 - DEBUG - 25017 }
 2020-01-20 15:33:15,851 - DEBUG - 25071 }
 2020-01-20 15:33:15,851 - DEBUG - 25501 }
 2020-01-20 15:33:15,851 - DEBUG - oop-structural-8
 2020-01-20 15:33:15,851 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 15:33:15,851 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 15:33:15,851 - DEBUG - 25523 }
 2020-01-20 15:33:15,851 - DEBUG - 25580 }
 2020-01-20 15:33:15,851 - DEBUG - 26139 }
 2020-01-20 15:33:15,851 - DEBUG - oop-structural-9
 2020-01-20 15:33:15,851 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 15:33:15,851 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 15:33:15,851 - DEBUG - 26162 }
 2020-01-20 15:33:15,851 - DEBUG - 26216 }
 2020-01-20 15:33:15,851 - DEBUG - 26748 }
 2020-01-20 15:33:15,851 - DEBUG - oop-structural-10
 2020-01-20 15:33:15,851 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 15:33:15,851 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 15:33:15,851 - DEBUG - 26782 }
 2020-01-20 15:33:15,851 - DEBUG - 26838 }
 2020-01-20 15:33:15,851 - DEBUG - 26980 }
 2020-01-20 15:33:15,851 - DEBUG - python-datatypes-strings-1
 2020-01-20 15:33:15,851 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 15:33:15,851 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 15:33:15,851 - DEBUG - 27013 }
 2020-01-20 15:33:15,851 - DEBUG - 27073 }
 2020-01-20 15:33:15,851 - DEBUG - 27141 }
 2020-01-20 15:33:15,851 - DEBUG - python-datatypes-strings-2
 2020-01-20 15:33:15,851 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 15:33:15,851 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 15:33:15,851 - DEBUG - 27174 }
 2020-01-20 15:33:15,851 - DEBUG - 27247 }
 2020-01-20 15:33:15,851 - DEBUG - 27409 }
 2020-01-20 15:33:15,851 - DEBUG - python-datatypes-strings-3
 2020-01-20 15:33:15,851 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 15:33:15,851 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 15:33:15,851 - DEBUG - 27442 }
 2020-01-20 15:33:15,851 - DEBUG - 27502 }
 2020-01-20 15:33:15,851 - DEBUG - 27600 }
 2020-01-20 15:33:15,851 - DEBUG - python-datatypes-strings-4
 2020-01-20 15:33:15,851 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 15:33:15,851 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 15:33:15,851 - DEBUG - 27634 }
 2020-01-20 15:33:15,851 - DEBUG - 27685 }
 2020-01-20 15:33:15,851 - DEBUG - 27715 }
 2020-01-20 15:33:15,851 - DEBUG - python-datatypes-strings-5
 2020-01-20 15:33:15,851 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 15:33:15,851 - DEBUG -  len(mystring) is 5
 2020-01-20 15:33:15,851 - DEBUG - 27748 }
 2020-01-20 15:33:15,851 - DEBUG - 27790 }
 2020-01-20 15:33:15,851 - DEBUG - 27877 }
 2020-01-20 15:33:15,851 - DEBUG - python-datatypes-strings-6
 2020-01-20 15:33:15,851 - DEBUG -  How do you merge two strings?
 2020-01-20 15:33:15,851 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 15:33:15,851 - DEBUG - 27912 }
 2020-01-20 15:33:15,851 - DEBUG - 27961 }
 2020-01-20 15:33:15,851 - DEBUG - 28039 }
 2020-01-20 15:33:15,851 - DEBUG - python-datatypes-strings-7
 2020-01-20 15:33:15,851 - DEBUG -  How do you use a number in a string?
 2020-01-20 15:33:15,851 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 15:33:15,851 - DEBUG - 28074 }
 2020-01-20 15:33:15,851 - DEBUG - 28153 }
 2020-01-20 15:33:15,866 - DEBUG - 28184 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-strings-8
 2020-01-20 15:33:15,866 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 15:33:15,866 - DEBUG -  mystring.split(',')
 2020-01-20 15:33:15,866 - DEBUG - 28217 }
 2020-01-20 15:33:15,866 - DEBUG - 28272 }
 2020-01-20 15:33:15,866 - DEBUG - 28300 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-strings-9
 2020-01-20 15:33:15,866 - DEBUG -  How do you trim white space from a string?
 2020-01-20 15:33:15,866 - DEBUG -  mystring.strip()
 2020-01-20 15:33:15,866 - DEBUG - 28334 }
 2020-01-20 15:33:15,866 - DEBUG - 28394 }
 2020-01-20 15:33:15,866 - DEBUG - 28446 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-strings-10
 2020-01-20 15:33:15,866 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 15:33:15,866 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 15:33:15,866 - DEBUG - 28479 }
 2020-01-20 15:33:15,866 - DEBUG - 28525 }
 2020-01-20 15:33:15,866 - DEBUG - 28640 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-numbers-1
 2020-01-20 15:33:15,866 - DEBUG -  Describe types of python numbers.
 2020-01-20 15:33:15,866 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 15:33:15,866 - DEBUG - 28673 }
 2020-01-20 15:33:15,866 - DEBUG - 28745 }
 2020-01-20 15:33:15,866 - DEBUG - 28893 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-numbers-2
 2020-01-20 15:33:15,866 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 15:33:15,866 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 15:33:15,866 - DEBUG - 28926 }
 2020-01-20 15:33:15,866 - DEBUG - 29001 }
 2020-01-20 15:33:15,866 - DEBUG - 29095 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-numbers-3
 2020-01-20 15:33:15,866 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 15:33:15,866 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 15:33:15,866 - DEBUG - 29128 }
 2020-01-20 15:33:15,866 - DEBUG - 29179 }
 2020-01-20 15:33:15,866 - DEBUG - 29201 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-numbers-4
 2020-01-20 15:33:15,866 - DEBUG -  How do the absolute value of a number?
 2020-01-20 15:33:15,866 - DEBUG -  abs(mynum)
 2020-01-20 15:33:15,866 - DEBUG - 29234 }
 2020-01-20 15:33:15,866 - DEBUG - 29284 }
 2020-01-20 15:33:15,866 - DEBUG - 29313 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-numbers-5
 2020-01-20 15:33:15,866 - DEBUG -  How do you raise a number to a power?
 2020-01-20 15:33:15,866 - DEBUG -  pow(power,number)
 2020-01-20 15:33:15,866 - DEBUG - 29346 }
 2020-01-20 15:33:15,866 - DEBUG - 29390 }
 2020-01-20 15:33:15,866 - DEBUG - 29426 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-numbers-6
 2020-01-20 15:33:15,866 - DEBUG -  How do you round a real number?
 2020-01-20 15:33:15,866 - DEBUG -  round(num,decimalplaces)
 2020-01-20 15:33:15,866 - DEBUG - 29459 }
 2020-01-20 15:33:15,866 - DEBUG - 29513 }
 2020-01-20 15:33:15,866 - DEBUG - 29681 }
 2020-01-20 15:33:15,866 - DEBUG - python-datatypes-numbers-7
 2020-01-20 15:33:15,866 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 15:33:15,866 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 15:33:15,866 - DEBUG - 29695 }
 2020-01-20 15:33:15,866 - DEBUG - 29768 }
 2020-01-20 15:33:15,866 - DEBUG - 29837 }
 2020-01-20 15:33:15,866 - DEBUG - uml-1
 2020-01-20 15:33:15,866 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 15:33:15,866 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 15:33:15,866 - DEBUG - 29848 }
 2020-01-20 15:33:15,866 - DEBUG - 29892 }
 2020-01-20 15:33:15,866 - DEBUG - 29989 }
 2020-01-20 15:33:15,866 - DEBUG - uml-2
 2020-01-20 15:33:15,866 - DEBUG -  What is an interaction diagram?
 2020-01-20 15:33:15,866 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 15:33:15,866 - DEBUG - 30000 }
 2020-01-20 15:33:15,866 - DEBUG - 30041 }
 2020-01-20 15:33:15,866 - DEBUG - 30351 }
 2020-01-20 15:33:15,866 - DEBUG - uml-3
 2020-01-20 15:33:15,866 - DEBUG -  What is a structure diagram?
 2020-01-20 15:33:15,866 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 15:33:15,866 - DEBUG - 30362 }
 2020-01-20 15:33:15,866 - DEBUG - 30402 }
 2020-01-20 15:33:15,866 - DEBUG - 30516 }
 2020-01-20 15:33:15,866 - DEBUG - uml-4
 2020-01-20 15:33:15,866 - DEBUG -  What is a behavior diagram?
 2020-01-20 15:33:15,866 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 15:33:15,866 - DEBUG - 30537 }
 2020-01-20 15:33:15,866 - DEBUG - 30588 }
 2020-01-20 15:33:15,866 - DEBUG - 30670 }
 2020-01-20 15:33:15,866 - DEBUG - uml-structure-1
 2020-01-20 15:33:15,866 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 15:33:15,866 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 15:33:15,866 - DEBUG - 30690 }
 2020-01-20 15:33:15,866 - DEBUG - 30755 }
 2020-01-20 15:33:15,866 - DEBUG - 30815 }
 2020-01-20 15:33:15,866 - DEBUG - uml-behavior-1
 2020-01-20 15:33:15,866 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 15:33:15,866 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 15:33:15,882 - DEBUG - 30838 }
 2020-01-20 15:33:15,882 - DEBUG - 30895 }
 2020-01-20 15:33:15,882 - DEBUG - 30960 }
 2020-01-20 15:33:15,882 - DEBUG - uml-interaction-1
 2020-01-20 15:33:15,882 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 15:33:15,882 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 15:33:15,882 - DEBUG - 30971 }
 2020-01-20 15:33:15,882 - DEBUG - 31015 }
 2020-01-20 15:33:15,882 - DEBUG - 31049 }
 2020-01-20 15:33:15,882 - DEBUG - uml-2
 2020-01-20 15:33:15,882 - DEBUG -  How many uml digrams are there?
 2020-01-20 15:33:15,882 - DEBUG -  Around 14 give or take.
 2020-01-20 15:33:15,882 - DEBUG - 31070 }
 2020-01-20 15:33:15,882 - DEBUG - 31121 }
 2020-01-20 15:33:15,882 - DEBUG - 31369 }
 2020-01-20 15:33:15,882 - DEBUG - uml-structure-2
 2020-01-20 15:33:15,882 - DEBUG -  Describe the structure Package diagram
 2020-01-20 15:33:15,882 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 15:33:15,882 - DEBUG - 31390 }
 2020-01-20 15:33:15,882 - DEBUG - 31440 }
 2020-01-20 15:33:15,882 - DEBUG - 31713 }
 2020-01-20 15:33:15,882 - DEBUG - uml-structure-3
 2020-01-20 15:33:15,882 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 15:33:15,882 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 15:33:15,882 - DEBUG - 31734 }
 2020-01-20 15:33:15,882 - DEBUG - 31785 }
 2020-01-20 15:33:15,882 - DEBUG - 31919 }
 2020-01-20 15:33:15,882 - DEBUG - uml-structure-4
 2020-01-20 15:33:15,882 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 15:33:15,882 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 15:33:15,882 - DEBUG - 31940 }
 2020-01-20 15:33:15,882 - DEBUG - 31994 }
 2020-01-20 15:33:15,882 - DEBUG - 32246 }
 2020-01-20 15:33:15,882 - DEBUG - uml-structure-5
 2020-01-20 15:33:15,882 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 15:33:15,882 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 15:33:15,882 - DEBUG - 32267 }
 2020-01-20 15:33:15,882 - DEBUG - 32321 }
 2020-01-20 15:33:15,882 - DEBUG - 32658 }
 2020-01-20 15:33:15,882 - DEBUG - uml-structure-6
 2020-01-20 15:33:15,882 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 15:33:15,882 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 15:33:15,882 - DEBUG - 32679 }
 2020-01-20 15:33:15,882 - DEBUG - 32736 }
 2020-01-20 15:33:15,882 - DEBUG - 32924 }
 2020-01-20 15:33:15,882 - DEBUG - uml-structure-7
 2020-01-20 15:33:15,882 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 15:33:15,882 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 15:33:15,882 - DEBUG - 32945 }
 2020-01-20 15:33:15,882 - DEBUG - 33000 }
 2020-01-20 15:33:15,882 - DEBUG - 33308 }
 2020-01-20 15:33:15,882 - DEBUG - uml-structure-8
 2020-01-20 15:33:15,882 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 15:33:15,882 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 15:33:15,882 - DEBUG - 33328 }
 2020-01-20 15:33:15,882 - DEBUG - 33380 }
 2020-01-20 15:33:15,882 - DEBUG - 33546 }
 2020-01-20 15:33:15,882 - DEBUG - uml-behavior-1
 2020-01-20 15:33:15,882 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 15:33:15,882 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 15:33:15,882 - DEBUG - 33566 }
 2020-01-20 15:33:15,882 - DEBUG - 33618 }
 2020-01-20 15:33:15,882 - DEBUG - 33863 }
 2020-01-20 15:33:15,882 - DEBUG - uml-behavior-2
 2020-01-20 15:33:15,882 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 15:33:15,882 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 15:33:15,882 - DEBUG - 33883 }
 2020-01-20 15:33:15,882 - DEBUG - 33932 }
 2020-01-20 15:33:15,882 - DEBUG - 34238 }
 2020-01-20 15:33:15,882 - DEBUG - uml-behavior-3
 2020-01-20 15:33:15,882 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 15:33:15,882 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 15:33:15,882 - DEBUG - 34261 }
 2020-01-20 15:33:15,882 - DEBUG - 34316 }
 2020-01-20 15:33:15,898 - DEBUG - 34474 }
 2020-01-20 15:33:15,898 - DEBUG - uml-interaction-2
 2020-01-20 15:33:15,898 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 15:33:15,898 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 15:33:15,898 - DEBUG - 34497 }
 2020-01-20 15:33:15,898 - DEBUG - 34550 }
 2020-01-20 15:33:15,898 - DEBUG - 34800 }
 2020-01-20 15:33:15,898 - DEBUG - uml-interaction-3
 2020-01-20 15:33:15,898 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 15:33:15,898 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 15:33:15,898 - DEBUG - 34823 }
 2020-01-20 15:33:15,898 - DEBUG - 34884 }
 2020-01-20 15:33:15,898 - DEBUG - 35155 }
 2020-01-20 15:33:15,898 - DEBUG - uml-interaction-4
 2020-01-20 15:33:15,898 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 15:33:15,898 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 15:33:15,898 - DEBUG - 35178 }
 2020-01-20 15:33:15,898 - DEBUG - 35245 }
 2020-01-20 15:33:15,898 - DEBUG - 35403 }
 2020-01-20 15:33:15,898 - DEBUG - uml-interaction-5
 2020-01-20 15:33:15,898 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 15:33:15,898 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 15:33:15,898 - DEBUG - algo_cards
 2020-01-20 15:33:15,898 - DEBUG - box1
 2020-01-20 15:33:15,898 - DEBUG - algo_cards
 2020-01-20 15:33:15,898 - DEBUG - box1
 2020-01-20 15:33:15,898 - DEBUG - box2
 2020-01-20 15:33:15,898 - DEBUG - algo_cards
 2020-01-20 15:33:15,898 - DEBUG - box1
 2020-01-20 15:33:15,898 - DEBUG - box2
 2020-01-20 15:33:15,898 - DEBUG - box3
 2020-01-20 15:33:15,898 - DEBUG - algo_cards
 2020-01-20 15:33:15,898 - DEBUG - box1
 2020-01-20 15:33:15,898 - DEBUG - box2
 2020-01-20 15:33:15,898 - DEBUG - box3
 2020-01-20 15:33:15,898 - DEBUG - box4
 2020-01-20 15:33:15,898 - DEBUG - algo_cards
 2020-01-20 15:33:15,898 - DEBUG - box1
 2020-01-20 15:33:15,898 - DEBUG - box2
 2020-01-20 15:33:15,898 - DEBUG - box3
 2020-01-20 15:33:15,898 - DEBUG - box4
 2020-01-20 15:33:15,898 - DEBUG - box5
 2020-01-20 15:33:15,898 - DEBUG - algo_cards
 2020-01-20 15:33:15,898 - DEBUG - box1
 2020-01-20 15:33:15,898 - DEBUG - box2
 2020-01-20 15:33:15,898 - DEBUG - box3
 2020-01-20 15:33:15,898 - DEBUG - box4
 2020-01-20 15:33:15,898 - DEBUG - box5
 2020-01-20 15:33:15,898 - DEBUG - box6
 2020-01-20 15:33:15,898 - DEBUG - finding test cycle file
 2020-01-20 15:33:15,898 - DEBUG - quizs\
 2020-01-20 15:33:15,898 - DEBUG - algo_cards.txt
 2020-01-20 15:33:15,898 - DEBUG - box1.txt
 2020-01-20 15:33:15,898 - DEBUG - box2.txt
 2020-01-20 15:33:15,898 - DEBUG - box3.txt
 2020-01-20 15:33:15,898 - DEBUG - box4.txt
 2020-01-20 15:33:15,898 - DEBUG - box5.txt
 2020-01-20 15:33:15,898 - DEBUG - box6.txt
 2020-01-20 15:33:15,898 - DEBUG - data_struct_cards.txt
 2020-01-20 15:33:15,898 - DEBUG - oop_cards.txt
 2020-01-20 15:33:15,898 - DEBUG - python_cards.txt
 2020-01-20 15:33:15,898 - DEBUG - testcycle1.txt
 2020-01-20 15:33:15,898 - DEBUG - uml_cards.txt
 2020-01-20 15:33:15,898 - DEBUG - algo_cards
 2020-01-20 15:33:15,898 - DEBUG - box1
 2020-01-20 15:33:15,898 - DEBUG - box2
 2020-01-20 15:33:15,898 - DEBUG - box3
 2020-01-20 15:33:15,898 - DEBUG - box4
 2020-01-20 15:33:15,898 - DEBUG - box5
 2020-01-20 15:33:15,898 - DEBUG - box6
 2020-01-20 15:33:15,898 - DEBUG - data_struct_cards
 2020-01-20 15:33:15,898 - DEBUG - oop_cards
 2020-01-20 15:33:15,898 - DEBUG - python_cards
 2020-01-20 15:33:15,898 - DEBUG - testcycle1
 2020-01-20 15:33:15,898 - DEBUG - found testcycle1.txt
 2020-01-20 15:33:15,898 - DEBUG - testcycle1
 2020-01-20 15:33:15,898 - DEBUG - quizs\
 2020-01-20 15:33:15,898 - DEBUG - Starting new cycle number 1
 2020-01-20 15:33:15,898 - DEBUG - highestbox 1
 2020-01-20 15:33:15,898 - DEBUG - Loading box1 to box1
 2020-01-20 15:34:28,319 - DEBUG - Start of Logging Leitner Module
 2020-01-20 15:34:28,335 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 15:34:28,335 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 15:34:28,335 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 15:34:28,335 - INFO - on things you get right.
 2020-01-20 15:34:28,382 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 15:34:28,382 - DEBUG - 15 }
 2020-01-20 15:34:28,382 - DEBUG - 57 }
 2020-01-20 15:34:28,382 - DEBUG - 225 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-1
 2020-01-20 15:34:28,382 - DEBUG -  What is algorithm efficiency?
 2020-01-20 15:34:28,382 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 15:34:28,382 - DEBUG - 242 }
 2020-01-20 15:34:28,382 - DEBUG - 324 }
 2020-01-20 15:34:28,382 - DEBUG - 403 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-2
 2020-01-20 15:34:28,382 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 15:34:28,382 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 15:34:28,382 - DEBUG - 420 }
 2020-01-20 15:34:28,382 - DEBUG - 502 }
 2020-01-20 15:34:28,382 - DEBUG - 531 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-3
 2020-01-20 15:34:28,382 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 15:34:28,382 - DEBUG -  Little O notation.
 2020-01-20 15:34:28,382 - DEBUG - 554 }
 2020-01-20 15:34:28,382 - DEBUG - 597 }
 2020-01-20 15:34:28,382 - DEBUG - 846 }
 2020-01-20 15:34:28,382 - DEBUG - alogorithm-bigo-1
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 15:34:28,382 - DEBUG - 868 }
 2020-01-20 15:34:28,382 - DEBUG - 911 }
 2020-01-20 15:34:28,382 - DEBUG - 1271 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-2
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 15:34:28,382 - DEBUG - 1293 }
 2020-01-20 15:34:28,382 - DEBUG - 1338 }
 2020-01-20 15:34:28,382 - DEBUG - 1581 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-3
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 15:34:28,382 - DEBUG - 1603 }
 2020-01-20 15:34:28,382 - DEBUG - 1650 }
 2020-01-20 15:34:28,382 - DEBUG - 1941 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-4
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 15:34:28,382 - DEBUG - 1963 }
 2020-01-20 15:34:28,382 - DEBUG - 2008 }
 2020-01-20 15:34:28,382 - DEBUG - 2088 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-5
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 15:34:28,382 - DEBUG - 2110 }
 2020-01-20 15:34:28,382 - DEBUG - 2155 }
 2020-01-20 15:34:28,382 - DEBUG - 2250 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-6
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 15:34:28,382 - DEBUG - 2272 }
 2020-01-20 15:34:28,382 - DEBUG - 2321 }
 2020-01-20 15:34:28,382 - DEBUG - 2517 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-7
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 15:34:28,382 - DEBUG - 2539 }
 2020-01-20 15:34:28,382 - DEBUG - 2606 }
 2020-01-20 15:34:28,382 - DEBUG - 2693 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-8
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 15:34:28,382 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 15:34:28,382 - DEBUG - 2715 }
 2020-01-20 15:34:28,382 - DEBUG - 2765 }
 2020-01-20 15:34:28,382 - DEBUG - 2893 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-9
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 15:34:28,382 - DEBUG - 2915 }
 2020-01-20 15:34:28,382 - DEBUG - 2959 }
 2020-01-20 15:34:28,382 - DEBUG - 3176 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-9
 2020-01-20 15:34:28,382 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 15:34:28,382 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 15:34:28,382 - DEBUG - 3199 }
 2020-01-20 15:34:28,382 - DEBUG - 3250 }
 2020-01-20 15:34:28,382 - DEBUG - 3415 }
 2020-01-20 15:34:28,382 - DEBUG - algorithm-bigo-10
 2020-01-20 15:34:28,398 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 15:34:28,398 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 15:34:28,398 - DEBUG - 3438 }
 2020-01-20 15:34:28,398 - DEBUG - 3493 }
 2020-01-20 15:34:28,398 - DEBUG - 3618 }
 2020-01-20 15:34:28,398 - DEBUG - algorithm-bigo-11
 2020-01-20 15:34:28,398 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 15:34:28,398 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 15:34:28,398 - DEBUG - 3641 }
 2020-01-20 15:34:28,398 - DEBUG - 3686 }
 2020-01-20 15:34:28,398 - DEBUG - 3838 }
 2020-01-20 15:34:28,398 - DEBUG - algorithm-bigo-12
 2020-01-20 15:34:28,398 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 15:34:28,398 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 15:34:28,398 - DEBUG - 3861 }
 2020-01-20 15:34:28,398 - DEBUG - 3916 }
 2020-01-20 15:34:28,398 - DEBUG - 4018 }
 2020-01-20 15:34:28,398 - DEBUG - algorithm-bigo-13
 2020-01-20 15:34:28,398 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 15:34:28,398 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 15:34:28,398 - DEBUG - 4041 }
 2020-01-20 15:34:28,398 - DEBUG - 4094 }
 2020-01-20 15:34:28,398 - DEBUG - 4229 }
 2020-01-20 15:34:28,398 - DEBUG - algorithm-bigo-14
 2020-01-20 15:34:28,398 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 15:34:28,398 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 15:34:28,398 - DEBUG - 4252 }
 2020-01-20 15:34:28,398 - DEBUG - 4299 }
 2020-01-20 15:34:28,398 - DEBUG - 4365 }
 2020-01-20 15:34:28,398 - DEBUG - algorithm-bigo-15
 2020-01-20 15:34:28,398 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 15:34:28,398 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 15:34:28,398 - DEBUG - 4388 }
 2020-01-20 15:34:28,398 - DEBUG - 4439 }
 2020-01-20 15:34:28,398 - DEBUG - 4545 }
 2020-01-20 15:34:28,398 - DEBUG - algorithm-bigo-16
 2020-01-20 15:34:28,398 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 15:34:28,398 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 15:34:28,398 - DEBUG - 4568 }
 2020-01-20 15:34:28,398 - DEBUG - 4613 }
 2020-01-20 15:34:28,398 - DEBUG - 4720 }
 2020-01-20 15:34:28,398 - DEBUG - algorithm-bigo-17
 2020-01-20 15:34:28,398 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 15:34:28,398 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 15:34:28,398 - DEBUG - 4742 }
 2020-01-20 15:34:28,398 - DEBUG - 4806 }
 2020-01-20 15:34:28,398 - DEBUG - 4927 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-1
 2020-01-20 15:34:28,398 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 15:34:28,398 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 15:34:28,398 - DEBUG - 4950 }
 2020-01-20 15:34:28,398 - DEBUG - 5021 }
 2020-01-20 15:34:28,398 - DEBUG - 5096 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-2
 2020-01-20 15:34:28,398 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 15:34:28,398 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 15:34:28,398 - DEBUG - 5119 }
 2020-01-20 15:34:28,398 - DEBUG - 5169 }
 2020-01-20 15:34:28,398 - DEBUG - 5250 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-3
 2020-01-20 15:34:28,398 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 15:34:28,398 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 15:34:28,398 - DEBUG - 5273 }
 2020-01-20 15:34:28,398 - DEBUG - 5344 }
 2020-01-20 15:34:28,398 - DEBUG - 5390 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-4
 2020-01-20 15:34:28,398 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 15:34:28,398 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 15:34:28,398 - DEBUG - 5413 }
 2020-01-20 15:34:28,398 - DEBUG - 5447 }
 2020-01-20 15:34:28,398 - DEBUG - 5479 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-5
 2020-01-20 15:34:28,398 - DEBUG -  List kinds of Queues.
 2020-01-20 15:34:28,398 - DEBUG -  Queue, Piority Queue.
 2020-01-20 15:34:28,398 - DEBUG - 5502 }
 2020-01-20 15:34:28,398 - DEBUG - 5553 }
 2020-01-20 15:34:28,398 - DEBUG - 5614 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-6
 2020-01-20 15:34:28,398 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 15:34:28,398 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 15:34:28,398 - DEBUG - 5637 }
 2020-01-20 15:34:28,398 - DEBUG - 5680 }
 2020-01-20 15:34:28,398 - DEBUG - 5746 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-7
 2020-01-20 15:34:28,398 - DEBUG -  List some main kinds of Trees.
 2020-01-20 15:34:28,398 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 15:34:28,398 - DEBUG - 5769 }
 2020-01-20 15:34:28,398 - DEBUG - 5829 }
 2020-01-20 15:34:28,398 - DEBUG - 5922 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-8
 2020-01-20 15:34:28,398 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 15:34:28,398 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 15:34:28,398 - DEBUG - 5945 }
 2020-01-20 15:34:28,398 - DEBUG - 6050 }
 2020-01-20 15:34:28,398 - DEBUG - 6359 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-9
 2020-01-20 15:34:28,398 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 15:34:28,398 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 15:34:28,398 - DEBUG - 6383 }
 2020-01-20 15:34:28,398 - DEBUG - 6428 }
 2020-01-20 15:34:28,398 - DEBUG - 6848 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-10
 2020-01-20 15:34:28,398 - DEBUG -  What is a linked data structure?
 2020-01-20 15:34:28,398 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 15:34:28,398 - DEBUG - 6872 }
 2020-01-20 15:34:28,398 - DEBUG - 6905 }
 2020-01-20 15:34:28,398 - DEBUG - 6937 }
 2020-01-20 15:34:28,398 - DEBUG - data_structures-11
 2020-01-20 15:34:28,398 - DEBUG -  List kinds of Graphs
 2020-01-20 15:34:28,398 - DEBUG -  Graph and Scene Graph
 2020-01-20 15:34:28,398 - DEBUG - 6961 }
 2020-01-20 15:34:28,398 - DEBUG - 6988 }
 2020-01-20 15:34:28,413 - DEBUG - 7456 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-12
 2020-01-20 15:34:28,413 - DEBUG -  Describe List.
 2020-01-20 15:34:28,413 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 15:34:28,413 - DEBUG - 7480 }
 2020-01-20 15:34:28,413 - DEBUG - 7511 }
 2020-01-20 15:34:28,413 - DEBUG - 7625 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-13
 2020-01-20 15:34:28,413 - DEBUG -  Describe a Vector.
 2020-01-20 15:34:28,413 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 15:34:28,413 - DEBUG - 7649 }
 2020-01-20 15:34:28,413 - DEBUG - 7675 }
 2020-01-20 15:34:28,413 - DEBUG - 7840 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-14
 2020-01-20 15:34:28,413 - DEBUG -  Describe Set.
 2020-01-20 15:34:28,413 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 15:34:28,413 - DEBUG - 7864 }
 2020-01-20 15:34:28,413 - DEBUG - 7894 }
 2020-01-20 15:34:28,413 - DEBUG - 8360 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-15
 2020-01-20 15:34:28,413 - DEBUG -  Describe a Stack.
 2020-01-20 15:34:28,413 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 15:34:28,413 - DEBUG - 8384 }
 2020-01-20 15:34:28,413 - DEBUG - 8414 }
 2020-01-20 15:34:28,413 - DEBUG - 8949 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-16
 2020-01-20 15:34:28,413 - DEBUG -  Describe a queue.
 2020-01-20 15:34:28,413 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 15:34:28,413 - DEBUG - 8973 }
 2020-01-20 15:34:28,413 - DEBUG - 9008 }
 2020-01-20 15:34:28,413 - DEBUG - 9456 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-17
 2020-01-20 15:34:28,413 - DEBUG -  Describe a Dictionary.
 2020-01-20 15:34:28,413 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 15:34:28,413 - DEBUG - 9480 }
 2020-01-20 15:34:28,413 - DEBUG - 9525 }
 2020-01-20 15:34:28,413 - DEBUG - 10271 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-18
 2020-01-20 15:34:28,413 - DEBUG -  Describe a Tree data structures.
 2020-01-20 15:34:28,413 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 15:34:28,413 - DEBUG - 10295 }
 2020-01-20 15:34:28,413 - DEBUG - 10325 }
 2020-01-20 15:34:28,413 - DEBUG - 10932 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-19
 2020-01-20 15:34:28,413 - DEBUG -  Describe a Graph.
 2020-01-20 15:34:28,413 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 15:34:28,413 - DEBUG - 10960 }
 2020-01-20 15:34:28,413 - DEBUG - 11042 }
 2020-01-20 15:34:28,413 - DEBUG - 11361 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-java-1
 2020-01-20 15:34:28,413 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 15:34:28,413 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 15:34:28,413 - DEBUG - 11389 }
 2020-01-20 15:34:28,413 - DEBUG - 11460 }
 2020-01-20 15:34:28,413 - DEBUG - 11641 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-java-2
 2020-01-20 15:34:28,413 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 15:34:28,413 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 15:34:28,413 - DEBUG - 11669 }
 2020-01-20 15:34:28,413 - DEBUG - 11714 }
 2020-01-20 15:34:28,413 - DEBUG - 11877 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-java-3
 2020-01-20 15:34:28,413 - DEBUG -  Describe java boolean primitive.
 2020-01-20 15:34:28,413 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 15:34:28,413 - DEBUG - 11905 }
 2020-01-20 15:34:28,413 - DEBUG - 11943 }
 2020-01-20 15:34:28,413 - DEBUG - 12272 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-java-4
 2020-01-20 15:34:28,413 - DEBUG -  Describe java references.
 2020-01-20 15:34:28,413 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 15:34:28,413 - DEBUG - 12296 }
 2020-01-20 15:34:28,413 - DEBUG - 12375 }
 2020-01-20 15:34:28,413 - DEBUG - 12458 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-20
 2020-01-20 15:34:28,413 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 15:34:28,413 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 15:34:28,413 - DEBUG - 12492 }
 2020-01-20 15:34:28,413 - DEBUG - 12532 }
 2020-01-20 15:34:28,413 - DEBUG - 12826 }
 2020-01-20 15:34:28,413 - DEBUG - data_structures-javascript-1
 2020-01-20 15:34:28,413 - DEBUG -  Name JavaScript primitives.
 2020-01-20 15:34:28,413 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 15:34:28,429 - DEBUG - 12850 }
 2020-01-20 15:34:28,429 - DEBUG - 12956 }
 2020-01-20 15:34:28,429 - DEBUG - 13123 }
 2020-01-20 15:34:28,429 - DEBUG - data_structures-21
 2020-01-20 15:34:28,429 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 15:34:28,429 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 15:34:28,429 - DEBUG - 13153 }
 2020-01-20 15:34:28,429 - DEBUG - 13189 }
 2020-01-20 15:34:28,429 - DEBUG - 13247 }
 2020-01-20 15:34:28,429 - DEBUG - data_structures-python-1
 2020-01-20 15:34:28,429 - DEBUG -  List python primitives.
 2020-01-20 15:34:28,432 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 15:34:28,432 - DEBUG - 13277 }
 2020-01-20 15:34:28,432 - DEBUG - 13309 }
 2020-01-20 15:34:28,433 - DEBUG - 13422 }
 2020-01-20 15:34:28,433 - DEBUG - data_structures-csharp-1
 2020-01-20 15:34:28,433 - DEBUG -  List c# primitives.
 2020-01-20 15:34:28,433 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 15:34:28,433 - DEBUG - 13434 }
 2020-01-20 15:34:28,434 - DEBUG - 13477 }
 2020-01-20 15:34:28,434 - DEBUG - 13821 }
 2020-01-20 15:34:28,435 - DEBUG - oop-1
 2020-01-20 15:34:28,435 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 15:34:28,435 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 15:34:28,435 - DEBUG - 13832 }
 2020-01-20 15:34:28,436 - DEBUG - 13899 }
 2020-01-20 15:34:28,436 - DEBUG - 13965 }
 2020-01-20 15:34:28,436 - DEBUG - oop-2
 2020-01-20 15:34:28,436 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 15:34:28,436 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 15:34:28,436 - DEBUG - 13976 }
 2020-01-20 15:34:28,437 - DEBUG - 14039 }
 2020-01-20 15:34:28,437 - DEBUG - 14084 }
 2020-01-20 15:34:28,437 - DEBUG - oop-3
 2020-01-20 15:34:28,437 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 15:34:28,437 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 15:34:28,437 - DEBUG - 14095 }
 2020-01-20 15:34:28,437 - DEBUG - 14149 }
 2020-01-20 15:34:28,438 - DEBUG - 14406 }
 2020-01-20 15:34:28,438 - DEBUG - oop-4
 2020-01-20 15:34:28,438 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 15:34:28,438 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 15:34:28,438 - DEBUG - 14417 }
 2020-01-20 15:34:28,439 - DEBUG - 14471 }
 2020-01-20 15:34:28,439 - DEBUG - 14834 }
 2020-01-20 15:34:28,439 - DEBUG - oop-5
 2020-01-20 15:34:28,440 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 15:34:28,440 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 15:34:28,440 - DEBUG - 14845 }
 2020-01-20 15:34:28,440 - DEBUG - 14899 }
 2020-01-20 15:34:28,440 - DEBUG - 15220 }
 2020-01-20 15:34:28,441 - DEBUG - oop-6
 2020-01-20 15:34:28,441 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 15:34:28,441 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 15:34:28,441 - DEBUG - 15242 }
 2020-01-20 15:34:28,441 - DEBUG - 15294 }
 2020-01-20 15:34:28,441 - DEBUG - 15369 }
 2020-01-20 15:34:28,441 - DEBUG - oop-creational-1
 2020-01-20 15:34:28,441 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 15:34:28,442 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 15:34:28,442 - DEBUG - 15391 }
 2020-01-20 15:34:28,442 - DEBUG - 15444 }
 2020-01-20 15:34:28,442 - DEBUG - 15583 }
 2020-01-20 15:34:28,442 - DEBUG - oop-behavioral-1
 2020-01-20 15:34:28,442 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 15:34:28,442 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 15:34:28,443 - DEBUG - 15605 }
 2020-01-20 15:34:28,443 - DEBUG - 15657 }
 2020-01-20 15:34:28,443 - DEBUG - 15733 }
 2020-01-20 15:34:28,443 - DEBUG - oop-structural-1
 2020-01-20 15:34:28,443 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 15:34:28,443 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 15:34:28,443 - DEBUG - 15755 }
 2020-01-20 15:34:28,444 - DEBUG - 15842 }
 2020-01-20 15:34:28,444 - DEBUG - 15882 }
 2020-01-20 15:34:28,444 - DEBUG - oop-structural-2
 2020-01-20 15:34:28,444 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 15:34:28,444 - DEBUG -  Model View Controller or MVC.
 2020-01-20 15:34:28,444 - DEBUG - 15904 }
 2020-01-20 15:34:28,444 - DEBUG - 15938 }
 2020-01-20 15:34:28,445 - DEBUG - 16451 }
 2020-01-20 15:34:28,445 - DEBUG - oop-structural-3
 2020-01-20 15:34:28,445 - DEBUG -  Describe MVC pattern.
 2020-01-20 15:34:28,445 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 15:34:28,446 - DEBUG - 16473 }
 2020-01-20 15:34:28,446 - DEBUG - 16513 }
 2020-01-20 15:34:28,446 - DEBUG - 16769 }
 2020-01-20 15:34:28,446 - DEBUG - oop-creational-2
 2020-01-20 15:34:28,446 - DEBUG -  What is the Factory Method?
 2020-01-20 15:34:28,446 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 15:34:28,447 - DEBUG - 16791 }
 2020-01-20 15:34:28,447 - DEBUG - 16822 }
 2020-01-20 15:34:28,447 - DEBUG - 17062 }
 2020-01-20 15:34:28,447 - DEBUG - oop-creational-3
 2020-01-20 15:34:28,447 - DEBUG -  What is Prototype?
 2020-01-20 15:34:28,447 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 15:34:28,448 - DEBUG - 17084 }
 2020-01-20 15:34:28,448 - DEBUG - 17115 }
 2020-01-20 15:34:28,448 - DEBUG - 17404 }
 2020-01-20 15:34:28,448 - DEBUG - oop-creational-4
 2020-01-20 15:34:28,448 - DEBUG -  What is Singleton?
 2020-01-20 15:34:28,449 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 15:34:28,449 - DEBUG - 17426 }
 2020-01-20 15:34:28,449 - DEBUG - 17464 }
 2020-01-20 15:34:28,450 - DEBUG - 18097 }
 2020-01-20 15:34:28,450 - DEBUG - oop-creational-5
 2020-01-20 15:34:28,450 - DEBUG -  What is Abstract Factory?
 2020-01-20 15:34:28,450 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 15:34:28,450 - DEBUG - 18119 }
 2020-01-20 15:34:28,450 - DEBUG - 18174 }
 2020-01-20 15:34:28,451 - DEBUG - 18512 }
 2020-01-20 15:34:28,451 - DEBUG - oop-creational-6
 2020-01-20 15:34:28,451 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 15:34:28,451 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 15:34:28,451 - DEBUG - 18534 }
 2020-01-20 15:34:28,452 - DEBUG - 18597 }
 2020-01-20 15:34:28,452 - DEBUG - 18869 }
 2020-01-20 15:34:28,452 - DEBUG - oop-behavioral-2
 2020-01-20 15:34:28,452 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 15:34:28,453 - DEBUG - 18891 }
 2020-01-20 15:34:28,453 - DEBUG - 18947 }
 2020-01-20 15:34:28,453 - DEBUG - 19298 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-3
 2020-01-20 15:34:28,453 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 15:34:28,453 - DEBUG - 19320 }
 2020-01-20 15:34:28,453 - DEBUG - 19379 }
 2020-01-20 15:34:28,453 - DEBUG - 19657 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-4
 2020-01-20 15:34:28,453 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 15:34:28,453 - DEBUG - 19679 }
 2020-01-20 15:34:28,453 - DEBUG - 19734 }
 2020-01-20 15:34:28,453 - DEBUG - 20104 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-5
 2020-01-20 15:34:28,453 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 15:34:28,453 - DEBUG - 20126 }
 2020-01-20 15:34:28,453 - DEBUG - 20182 }
 2020-01-20 15:34:28,453 - DEBUG - 20562 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-6
 2020-01-20 15:34:28,453 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 15:34:28,453 - DEBUG - 20584 }
 2020-01-20 15:34:28,453 - DEBUG - 20637 }
 2020-01-20 15:34:28,453 - DEBUG - 20945 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-7
 2020-01-20 15:34:28,453 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 15:34:28,453 - DEBUG - 20967 }
 2020-01-20 15:34:28,453 - DEBUG - 21023 }
 2020-01-20 15:34:28,453 - DEBUG - 21457 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-8
 2020-01-20 15:34:28,453 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 15:34:28,453 - DEBUG - 21479 }
 2020-01-20 15:34:28,453 - DEBUG - 21535 }
 2020-01-20 15:34:28,453 - DEBUG - 21801 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-9
 2020-01-20 15:34:28,453 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 15:34:28,453 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 15:34:28,453 - DEBUG - 21824 }
 2020-01-20 15:34:28,453 - DEBUG - 21894 }
 2020-01-20 15:34:28,453 - DEBUG - 22311 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-10
 2020-01-20 15:34:28,453 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 15:34:28,453 - DEBUG - 22334 }
 2020-01-20 15:34:28,453 - DEBUG - 22393 }
 2020-01-20 15:34:28,453 - DEBUG - 22719 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-11
 2020-01-20 15:34:28,453 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 15:34:28,453 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 15:34:28,453 - DEBUG - 22742 }
 2020-01-20 15:34:28,453 - DEBUG - 22801 }
 2020-01-20 15:34:28,453 - DEBUG - 23266 }
 2020-01-20 15:34:28,453 - DEBUG - oop-behavioral-12
 2020-01-20 15:34:28,453 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 15:34:28,453 - DEBUG - 23288 }
 2020-01-20 15:34:28,453 - DEBUG - 23343 }
 2020-01-20 15:34:28,453 - DEBUG - 23656 }
 2020-01-20 15:34:28,453 - DEBUG - oop-structural-4
 2020-01-20 15:34:28,453 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 15:34:28,453 - DEBUG - 23678 }
 2020-01-20 15:34:28,453 - DEBUG - 23735 }
 2020-01-20 15:34:28,453 - DEBUG - 24091 }
 2020-01-20 15:34:28,453 - DEBUG - oop-structural-5
 2020-01-20 15:34:28,453 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 15:34:28,453 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 15:34:28,453 - DEBUG - 24113 }
 2020-01-20 15:34:28,469 - DEBUG - 24170 }
 2020-01-20 15:34:28,469 - DEBUG - 24554 }
 2020-01-20 15:34:28,469 - DEBUG - oop-structural-6
 2020-01-20 15:34:28,469 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 15:34:28,469 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 15:34:28,469 - DEBUG - 24576 }
 2020-01-20 15:34:28,469 - DEBUG - 24629 }
 2020-01-20 15:34:28,469 - DEBUG - 24995 }
 2020-01-20 15:34:28,469 - DEBUG - oop-structural-7
 2020-01-20 15:34:28,469 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 15:34:28,469 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 15:34:28,469 - DEBUG - 25017 }
 2020-01-20 15:34:28,469 - DEBUG - 25071 }
 2020-01-20 15:34:28,469 - DEBUG - 25501 }
 2020-01-20 15:34:28,469 - DEBUG - oop-structural-8
 2020-01-20 15:34:28,469 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 15:34:28,469 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 15:34:28,469 - DEBUG - 25523 }
 2020-01-20 15:34:28,469 - DEBUG - 25580 }
 2020-01-20 15:34:28,469 - DEBUG - 26139 }
 2020-01-20 15:34:28,469 - DEBUG - oop-structural-9
 2020-01-20 15:34:28,469 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 15:34:28,469 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 15:34:28,469 - DEBUG - 26162 }
 2020-01-20 15:34:28,469 - DEBUG - 26216 }
 2020-01-20 15:34:28,469 - DEBUG - 26748 }
 2020-01-20 15:34:28,469 - DEBUG - oop-structural-10
 2020-01-20 15:34:28,469 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 15:34:28,469 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 15:34:28,469 - DEBUG - 26782 }
 2020-01-20 15:34:28,469 - DEBUG - 26838 }
 2020-01-20 15:34:28,469 - DEBUG - 26980 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-1
 2020-01-20 15:34:28,469 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 15:34:28,469 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 15:34:28,469 - DEBUG - 27013 }
 2020-01-20 15:34:28,469 - DEBUG - 27073 }
 2020-01-20 15:34:28,469 - DEBUG - 27141 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-2
 2020-01-20 15:34:28,469 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 15:34:28,469 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 15:34:28,469 - DEBUG - 27174 }
 2020-01-20 15:34:28,469 - DEBUG - 27247 }
 2020-01-20 15:34:28,469 - DEBUG - 27409 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-3
 2020-01-20 15:34:28,469 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 15:34:28,469 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 15:34:28,469 - DEBUG - 27442 }
 2020-01-20 15:34:28,469 - DEBUG - 27502 }
 2020-01-20 15:34:28,469 - DEBUG - 27600 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-4
 2020-01-20 15:34:28,469 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 15:34:28,469 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 15:34:28,469 - DEBUG - 27634 }
 2020-01-20 15:34:28,469 - DEBUG - 27685 }
 2020-01-20 15:34:28,469 - DEBUG - 27715 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-5
 2020-01-20 15:34:28,469 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 15:34:28,469 - DEBUG -  len(mystring) is 5
 2020-01-20 15:34:28,469 - DEBUG - 27748 }
 2020-01-20 15:34:28,469 - DEBUG - 27790 }
 2020-01-20 15:34:28,469 - DEBUG - 27877 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-6
 2020-01-20 15:34:28,469 - DEBUG -  How do you merge two strings?
 2020-01-20 15:34:28,469 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 15:34:28,469 - DEBUG - 27912 }
 2020-01-20 15:34:28,469 - DEBUG - 27961 }
 2020-01-20 15:34:28,469 - DEBUG - 28039 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-7
 2020-01-20 15:34:28,469 - DEBUG -  How do you use a number in a string?
 2020-01-20 15:34:28,469 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 15:34:28,469 - DEBUG - 28074 }
 2020-01-20 15:34:28,469 - DEBUG - 28153 }
 2020-01-20 15:34:28,469 - DEBUG - 28184 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-8
 2020-01-20 15:34:28,469 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 15:34:28,469 - DEBUG -  mystring.split(',')
 2020-01-20 15:34:28,469 - DEBUG - 28217 }
 2020-01-20 15:34:28,469 - DEBUG - 28272 }
 2020-01-20 15:34:28,469 - DEBUG - 28300 }
 2020-01-20 15:34:28,469 - DEBUG - python-datatypes-strings-9
 2020-01-20 15:34:28,469 - DEBUG -  How do you trim white space from a string?
 2020-01-20 15:34:28,469 - DEBUG -  mystring.strip()
 2020-01-20 15:34:28,469 - DEBUG - 28334 }
 2020-01-20 15:34:28,469 - DEBUG - 28394 }
 2020-01-20 15:34:28,484 - DEBUG - 28446 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-strings-10
 2020-01-20 15:34:28,484 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 15:34:28,484 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 15:34:28,484 - DEBUG - 28479 }
 2020-01-20 15:34:28,484 - DEBUG - 28525 }
 2020-01-20 15:34:28,484 - DEBUG - 28640 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-numbers-1
 2020-01-20 15:34:28,484 - DEBUG -  Describe types of python numbers.
 2020-01-20 15:34:28,484 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 15:34:28,484 - DEBUG - 28673 }
 2020-01-20 15:34:28,484 - DEBUG - 28745 }
 2020-01-20 15:34:28,484 - DEBUG - 28893 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-numbers-2
 2020-01-20 15:34:28,484 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 15:34:28,484 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 15:34:28,484 - DEBUG - 28926 }
 2020-01-20 15:34:28,484 - DEBUG - 29001 }
 2020-01-20 15:34:28,484 - DEBUG - 29095 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-numbers-3
 2020-01-20 15:34:28,484 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 15:34:28,484 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 15:34:28,484 - DEBUG - 29128 }
 2020-01-20 15:34:28,484 - DEBUG - 29179 }
 2020-01-20 15:34:28,484 - DEBUG - 29201 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-numbers-4
 2020-01-20 15:34:28,484 - DEBUG -  How do the absolute value of a number?
 2020-01-20 15:34:28,484 - DEBUG -  abs(mynum)
 2020-01-20 15:34:28,484 - DEBUG - 29234 }
 2020-01-20 15:34:28,484 - DEBUG - 29284 }
 2020-01-20 15:34:28,484 - DEBUG - 29313 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-numbers-5
 2020-01-20 15:34:28,484 - DEBUG -  How do you raise a number to a power?
 2020-01-20 15:34:28,484 - DEBUG -  pow(power,number)
 2020-01-20 15:34:28,484 - DEBUG - 29346 }
 2020-01-20 15:34:28,484 - DEBUG - 29390 }
 2020-01-20 15:34:28,484 - DEBUG - 29426 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-numbers-6
 2020-01-20 15:34:28,484 - DEBUG -  How do you round a real number?
 2020-01-20 15:34:28,484 - DEBUG -  round(num,decimalplaces)
 2020-01-20 15:34:28,484 - DEBUG - 29459 }
 2020-01-20 15:34:28,484 - DEBUG - 29513 }
 2020-01-20 15:34:28,484 - DEBUG - 29681 }
 2020-01-20 15:34:28,484 - DEBUG - python-datatypes-numbers-7
 2020-01-20 15:34:28,484 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 15:34:28,484 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 15:34:28,484 - DEBUG - 29695 }
 2020-01-20 15:34:28,484 - DEBUG - 29768 }
 2020-01-20 15:34:28,484 - DEBUG - 29837 }
 2020-01-20 15:34:28,484 - DEBUG - uml-1
 2020-01-20 15:34:28,484 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 15:34:28,484 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 15:34:28,484 - DEBUG - 29848 }
 2020-01-20 15:34:28,484 - DEBUG - 29892 }
 2020-01-20 15:34:28,484 - DEBUG - 29989 }
 2020-01-20 15:34:28,484 - DEBUG - uml-2
 2020-01-20 15:34:28,484 - DEBUG -  What is an interaction diagram?
 2020-01-20 15:34:28,484 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 15:34:28,484 - DEBUG - 30000 }
 2020-01-20 15:34:28,484 - DEBUG - 30041 }
 2020-01-20 15:34:28,484 - DEBUG - 30351 }
 2020-01-20 15:34:28,484 - DEBUG - uml-3
 2020-01-20 15:34:28,484 - DEBUG -  What is a structure diagram?
 2020-01-20 15:34:28,484 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 15:34:28,484 - DEBUG - 30362 }
 2020-01-20 15:34:28,484 - DEBUG - 30402 }
 2020-01-20 15:34:28,484 - DEBUG - 30516 }
 2020-01-20 15:34:28,484 - DEBUG - uml-4
 2020-01-20 15:34:28,484 - DEBUG -  What is a behavior diagram?
 2020-01-20 15:34:28,484 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 15:34:28,484 - DEBUG - 30537 }
 2020-01-20 15:34:28,484 - DEBUG - 30588 }
 2020-01-20 15:34:28,484 - DEBUG - 30670 }
 2020-01-20 15:34:28,484 - DEBUG - uml-structure-1
 2020-01-20 15:34:28,484 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 15:34:28,484 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 15:34:28,484 - DEBUG - 30690 }
 2020-01-20 15:34:28,484 - DEBUG - 30755 }
 2020-01-20 15:34:28,484 - DEBUG - 30815 }
 2020-01-20 15:34:28,484 - DEBUG - uml-behavior-1
 2020-01-20 15:34:28,484 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 15:34:28,484 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 15:34:28,484 - DEBUG - 30838 }
 2020-01-20 15:34:28,484 - DEBUG - 30895 }
 2020-01-20 15:34:28,484 - DEBUG - 30960 }
 2020-01-20 15:34:28,484 - DEBUG - uml-interaction-1
 2020-01-20 15:34:28,484 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 15:34:28,484 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 15:34:28,484 - DEBUG - 30971 }
 2020-01-20 15:34:28,484 - DEBUG - 31015 }
 2020-01-20 15:34:28,484 - DEBUG - 31049 }
 2020-01-20 15:34:28,484 - DEBUG - uml-2
 2020-01-20 15:34:28,484 - DEBUG -  How many uml digrams are there?
 2020-01-20 15:34:28,484 - DEBUG -  Around 14 give or take.
 2020-01-20 15:34:28,484 - DEBUG - 31070 }
 2020-01-20 15:34:28,484 - DEBUG - 31121 }
 2020-01-20 15:34:28,484 - DEBUG - 31369 }
 2020-01-20 15:34:28,484 - DEBUG - uml-structure-2
 2020-01-20 15:34:28,484 - DEBUG -  Describe the structure Package diagram
 2020-01-20 15:34:28,484 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 15:34:28,484 - DEBUG - 31390 }
 2020-01-20 15:34:28,484 - DEBUG - 31440 }
 2020-01-20 15:34:28,484 - DEBUG - 31713 }
 2020-01-20 15:34:28,484 - DEBUG - uml-structure-3
 2020-01-20 15:34:28,484 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 15:34:28,484 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 15:34:28,484 - DEBUG - 31734 }
 2020-01-20 15:34:28,484 - DEBUG - 31785 }
 2020-01-20 15:34:28,484 - DEBUG - 31919 }
 2020-01-20 15:34:28,484 - DEBUG - uml-structure-4
 2020-01-20 15:34:28,484 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 15:34:28,484 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 15:34:28,500 - DEBUG - 31940 }
 2020-01-20 15:34:28,500 - DEBUG - 31994 }
 2020-01-20 15:34:28,500 - DEBUG - 32246 }
 2020-01-20 15:34:28,500 - DEBUG - uml-structure-5
 2020-01-20 15:34:28,500 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 15:34:28,500 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 15:34:28,500 - DEBUG - 32267 }
 2020-01-20 15:34:28,500 - DEBUG - 32321 }
 2020-01-20 15:34:28,500 - DEBUG - 32658 }
 2020-01-20 15:34:28,500 - DEBUG - uml-structure-6
 2020-01-20 15:34:28,500 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 15:34:28,500 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 15:34:28,500 - DEBUG - 32679 }
 2020-01-20 15:34:28,500 - DEBUG - 32736 }
 2020-01-20 15:34:28,500 - DEBUG - 32924 }
 2020-01-20 15:34:28,500 - DEBUG - uml-structure-7
 2020-01-20 15:34:28,500 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 15:34:28,500 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 15:34:28,500 - DEBUG - 32945 }
 2020-01-20 15:34:28,500 - DEBUG - 33000 }
 2020-01-20 15:34:28,500 - DEBUG - 33308 }
 2020-01-20 15:34:28,500 - DEBUG - uml-structure-8
 2020-01-20 15:34:28,500 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 15:34:28,500 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 15:34:28,500 - DEBUG - 33328 }
 2020-01-20 15:34:28,500 - DEBUG - 33380 }
 2020-01-20 15:34:28,500 - DEBUG - 33546 }
 2020-01-20 15:34:28,500 - DEBUG - uml-behavior-1
 2020-01-20 15:34:28,500 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 15:34:28,500 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 15:34:28,500 - DEBUG - 33566 }
 2020-01-20 15:34:28,500 - DEBUG - 33618 }
 2020-01-20 15:34:28,500 - DEBUG - 33863 }
 2020-01-20 15:34:28,500 - DEBUG - uml-behavior-2
 2020-01-20 15:34:28,500 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 15:34:28,500 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 15:34:28,500 - DEBUG - 33883 }
 2020-01-20 15:34:28,500 - DEBUG - 33932 }
 2020-01-20 15:34:28,500 - DEBUG - 34238 }
 2020-01-20 15:34:28,500 - DEBUG - uml-behavior-3
 2020-01-20 15:34:28,500 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 15:34:28,500 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 15:34:28,500 - DEBUG - 34261 }
 2020-01-20 15:34:28,500 - DEBUG - 34316 }
 2020-01-20 15:34:28,500 - DEBUG - 34474 }
 2020-01-20 15:34:28,500 - DEBUG - uml-interaction-2
 2020-01-20 15:34:28,500 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 15:34:28,500 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 15:34:28,500 - DEBUG - 34497 }
 2020-01-20 15:34:28,500 - DEBUG - 34550 }
 2020-01-20 15:34:28,500 - DEBUG - 34800 }
 2020-01-20 15:34:28,500 - DEBUG - uml-interaction-3
 2020-01-20 15:34:28,500 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 15:34:28,500 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 15:34:28,500 - DEBUG - 34823 }
 2020-01-20 15:34:28,500 - DEBUG - 34884 }
 2020-01-20 15:34:28,500 - DEBUG - 35155 }
 2020-01-20 15:34:28,500 - DEBUG - uml-interaction-4
 2020-01-20 15:34:28,500 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 15:34:28,500 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 15:34:28,500 - DEBUG - 35178 }
 2020-01-20 15:34:28,500 - DEBUG - 35245 }
 2020-01-20 15:34:28,500 - DEBUG - 35403 }
 2020-01-20 15:34:28,500 - DEBUG - uml-interaction-5
 2020-01-20 15:34:28,500 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 15:34:28,500 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 15:34:28,500 - DEBUG - algo_cards
 2020-01-20 15:34:28,500 - DEBUG - box1
 2020-01-20 15:34:28,500 - DEBUG - algo_cards
 2020-01-20 15:34:28,500 - DEBUG - box1
 2020-01-20 15:34:28,500 - DEBUG - box2
 2020-01-20 15:34:28,500 - DEBUG - algo_cards
 2020-01-20 15:34:28,500 - DEBUG - box1
 2020-01-20 15:34:28,500 - DEBUG - box2
 2020-01-20 15:34:28,500 - DEBUG - box3
 2020-01-20 15:34:28,500 - DEBUG - algo_cards
 2020-01-20 15:34:28,500 - DEBUG - box1
 2020-01-20 15:34:28,500 - DEBUG - box2
 2020-01-20 15:34:28,500 - DEBUG - box3
 2020-01-20 15:34:28,500 - DEBUG - box4
 2020-01-20 15:34:28,500 - DEBUG - algo_cards
 2020-01-20 15:34:28,515 - DEBUG - box1
 2020-01-20 15:34:28,515 - DEBUG - box2
 2020-01-20 15:34:28,515 - DEBUG - box3
 2020-01-20 15:34:28,515 - DEBUG - box4
 2020-01-20 15:34:28,515 - DEBUG - box5
 2020-01-20 15:34:28,515 - DEBUG - algo_cards
 2020-01-20 15:34:28,515 - DEBUG - box1
 2020-01-20 15:34:28,515 - DEBUG - box2
 2020-01-20 15:34:28,515 - DEBUG - box3
 2020-01-20 15:34:28,515 - DEBUG - box4
 2020-01-20 15:34:28,515 - DEBUG - box5
 2020-01-20 15:34:28,515 - DEBUG - box6
 2020-01-20 15:34:28,515 - DEBUG - finding test cycle file
 2020-01-20 15:34:28,515 - DEBUG - quizs\
 2020-01-20 15:34:28,515 - DEBUG - algo_cards.txt
 2020-01-20 15:34:28,515 - DEBUG - box1.txt
 2020-01-20 15:34:28,515 - DEBUG - box2.txt
 2020-01-20 15:34:28,515 - DEBUG - box3.txt
 2020-01-20 15:34:28,515 - DEBUG - box4.txt
 2020-01-20 15:34:28,515 - DEBUG - box5.txt
 2020-01-20 15:34:28,515 - DEBUG - box6.txt
 2020-01-20 15:34:28,515 - DEBUG - data_struct_cards.txt
 2020-01-20 15:34:28,515 - DEBUG - oop_cards.txt
 2020-01-20 15:34:28,515 - DEBUG - python_cards.txt
 2020-01-20 15:34:28,515 - DEBUG - testcycle1.txt
 2020-01-20 15:34:28,515 - DEBUG - uml_cards.txt
 2020-01-20 15:34:28,515 - DEBUG - algo_cards
 2020-01-20 15:34:28,515 - DEBUG - box1
 2020-01-20 15:34:28,515 - DEBUG - box2
 2020-01-20 15:34:28,515 - DEBUG - box3
 2020-01-20 15:34:28,515 - DEBUG - box4
 2020-01-20 15:34:28,515 - DEBUG - box5
 2020-01-20 15:34:28,515 - DEBUG - box6
 2020-01-20 15:34:28,515 - DEBUG - data_struct_cards
 2020-01-20 15:34:28,515 - DEBUG - oop_cards
 2020-01-20 15:34:28,515 - DEBUG - python_cards
 2020-01-20 15:34:28,515 - DEBUG - testcycle1
 2020-01-20 15:34:28,515 - DEBUG - found testcycle1.txt
 2020-01-20 15:34:28,515 - DEBUG - testcycle1
 2020-01-20 15:34:28,515 - DEBUG - quizs\
 2020-01-20 15:34:28,515 - DEBUG - Starting new cycle number 1
 2020-01-20 15:34:28,515 - DEBUG - highestbox 1
 2020-01-20 15:34:28,515 - DEBUG - Loading box1 to box1
 2020-01-20 15:34:28,531 - DEBUG - Cycle number 2
 2020-01-20 15:38:26,633 - DEBUG - Start of Logging Leitner Module
 2020-01-20 15:38:26,633 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 15:38:26,633 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 15:38:26,633 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 15:38:26,633 - INFO - on things you get right.
 2020-01-20 15:38:26,665 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 15:38:26,680 - DEBUG - 15 }
 2020-01-20 15:38:26,680 - DEBUG - 57 }
 2020-01-20 15:38:26,680 - DEBUG - 225 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-1
 2020-01-20 15:38:26,680 - DEBUG -  What is algorithm efficiency?
 2020-01-20 15:38:26,680 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 15:38:26,680 - DEBUG - 242 }
 2020-01-20 15:38:26,680 - DEBUG - 324 }
 2020-01-20 15:38:26,680 - DEBUG - 403 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-2
 2020-01-20 15:38:26,680 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 15:38:26,680 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 15:38:26,680 - DEBUG - 420 }
 2020-01-20 15:38:26,680 - DEBUG - 502 }
 2020-01-20 15:38:26,680 - DEBUG - 531 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-3
 2020-01-20 15:38:26,680 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 15:38:26,680 - DEBUG -  Little O notation.
 2020-01-20 15:38:26,680 - DEBUG - 554 }
 2020-01-20 15:38:26,680 - DEBUG - 597 }
 2020-01-20 15:38:26,680 - DEBUG - 846 }
 2020-01-20 15:38:26,680 - DEBUG - alogorithm-bigo-1
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 15:38:26,680 - DEBUG - 868 }
 2020-01-20 15:38:26,680 - DEBUG - 911 }
 2020-01-20 15:38:26,680 - DEBUG - 1271 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-2
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 15:38:26,680 - DEBUG - 1293 }
 2020-01-20 15:38:26,680 - DEBUG - 1338 }
 2020-01-20 15:38:26,680 - DEBUG - 1581 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-3
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 15:38:26,680 - DEBUG - 1603 }
 2020-01-20 15:38:26,680 - DEBUG - 1650 }
 2020-01-20 15:38:26,680 - DEBUG - 1941 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-4
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 15:38:26,680 - DEBUG - 1963 }
 2020-01-20 15:38:26,680 - DEBUG - 2008 }
 2020-01-20 15:38:26,680 - DEBUG - 2088 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-5
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 15:38:26,680 - DEBUG - 2110 }
 2020-01-20 15:38:26,680 - DEBUG - 2155 }
 2020-01-20 15:38:26,680 - DEBUG - 2250 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-6
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 15:38:26,680 - DEBUG - 2272 }
 2020-01-20 15:38:26,680 - DEBUG - 2321 }
 2020-01-20 15:38:26,680 - DEBUG - 2517 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-7
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 15:38:26,680 - DEBUG - 2539 }
 2020-01-20 15:38:26,680 - DEBUG - 2606 }
 2020-01-20 15:38:26,680 - DEBUG - 2693 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-8
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 15:38:26,680 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 15:38:26,680 - DEBUG - 2715 }
 2020-01-20 15:38:26,680 - DEBUG - 2765 }
 2020-01-20 15:38:26,680 - DEBUG - 2893 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-9
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 15:38:26,680 - DEBUG - 2915 }
 2020-01-20 15:38:26,680 - DEBUG - 2959 }
 2020-01-20 15:38:26,680 - DEBUG - 3176 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-9
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 15:38:26,680 - DEBUG - 3199 }
 2020-01-20 15:38:26,680 - DEBUG - 3250 }
 2020-01-20 15:38:26,680 - DEBUG - 3415 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-10
 2020-01-20 15:38:26,680 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 15:38:26,680 - DEBUG - 3438 }
 2020-01-20 15:38:26,680 - DEBUG - 3493 }
 2020-01-20 15:38:26,680 - DEBUG - 3618 }
 2020-01-20 15:38:26,680 - DEBUG - algorithm-bigo-11
 2020-01-20 15:38:26,680 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 15:38:26,680 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 15:38:26,680 - DEBUG - 3641 }
 2020-01-20 15:38:26,696 - DEBUG - 3686 }
 2020-01-20 15:38:26,696 - DEBUG - 3838 }
 2020-01-20 15:38:26,696 - DEBUG - algorithm-bigo-12
 2020-01-20 15:38:26,696 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 15:38:26,696 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 15:38:26,696 - DEBUG - 3861 }
 2020-01-20 15:38:26,696 - DEBUG - 3916 }
 2020-01-20 15:38:26,696 - DEBUG - 4018 }
 2020-01-20 15:38:26,696 - DEBUG - algorithm-bigo-13
 2020-01-20 15:38:26,696 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 15:38:26,696 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 15:38:26,696 - DEBUG - 4041 }
 2020-01-20 15:38:26,696 - DEBUG - 4094 }
 2020-01-20 15:38:26,696 - DEBUG - 4229 }
 2020-01-20 15:38:26,696 - DEBUG - algorithm-bigo-14
 2020-01-20 15:38:26,696 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 15:38:26,696 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 15:38:26,696 - DEBUG - 4252 }
 2020-01-20 15:38:26,696 - DEBUG - 4299 }
 2020-01-20 15:38:26,696 - DEBUG - 4365 }
 2020-01-20 15:38:26,696 - DEBUG - algorithm-bigo-15
 2020-01-20 15:38:26,696 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 15:38:26,696 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 15:38:26,696 - DEBUG - 4388 }
 2020-01-20 15:38:26,696 - DEBUG - 4439 }
 2020-01-20 15:38:26,696 - DEBUG - 4545 }
 2020-01-20 15:38:26,696 - DEBUG - algorithm-bigo-16
 2020-01-20 15:38:26,696 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 15:38:26,696 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 15:38:26,696 - DEBUG - 4568 }
 2020-01-20 15:38:26,696 - DEBUG - 4613 }
 2020-01-20 15:38:26,696 - DEBUG - 4720 }
 2020-01-20 15:38:26,696 - DEBUG - algorithm-bigo-17
 2020-01-20 15:38:26,696 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 15:38:26,696 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 15:38:26,696 - DEBUG - 4742 }
 2020-01-20 15:38:26,696 - DEBUG - 4806 }
 2020-01-20 15:38:26,696 - DEBUG - 4927 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-1
 2020-01-20 15:38:26,696 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 15:38:26,696 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 15:38:26,696 - DEBUG - 4950 }
 2020-01-20 15:38:26,696 - DEBUG - 5021 }
 2020-01-20 15:38:26,696 - DEBUG - 5096 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-2
 2020-01-20 15:38:26,696 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 15:38:26,696 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 15:38:26,696 - DEBUG - 5119 }
 2020-01-20 15:38:26,696 - DEBUG - 5169 }
 2020-01-20 15:38:26,696 - DEBUG - 5250 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-3
 2020-01-20 15:38:26,696 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 15:38:26,696 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 15:38:26,696 - DEBUG - 5273 }
 2020-01-20 15:38:26,696 - DEBUG - 5344 }
 2020-01-20 15:38:26,696 - DEBUG - 5390 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-4
 2020-01-20 15:38:26,696 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 15:38:26,696 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 15:38:26,696 - DEBUG - 5413 }
 2020-01-20 15:38:26,696 - DEBUG - 5447 }
 2020-01-20 15:38:26,696 - DEBUG - 5479 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-5
 2020-01-20 15:38:26,696 - DEBUG -  List kinds of Queues.
 2020-01-20 15:38:26,696 - DEBUG -  Queue, Piority Queue.
 2020-01-20 15:38:26,696 - DEBUG - 5502 }
 2020-01-20 15:38:26,696 - DEBUG - 5553 }
 2020-01-20 15:38:26,696 - DEBUG - 5614 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-6
 2020-01-20 15:38:26,696 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 15:38:26,696 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 15:38:26,696 - DEBUG - 5637 }
 2020-01-20 15:38:26,696 - DEBUG - 5680 }
 2020-01-20 15:38:26,696 - DEBUG - 5746 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-7
 2020-01-20 15:38:26,696 - DEBUG -  List some main kinds of Trees.
 2020-01-20 15:38:26,696 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 15:38:26,696 - DEBUG - 5769 }
 2020-01-20 15:38:26,696 - DEBUG - 5829 }
 2020-01-20 15:38:26,696 - DEBUG - 5922 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-8
 2020-01-20 15:38:26,696 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 15:38:26,696 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 15:38:26,696 - DEBUG - 5945 }
 2020-01-20 15:38:26,696 - DEBUG - 6050 }
 2020-01-20 15:38:26,696 - DEBUG - 6359 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-9
 2020-01-20 15:38:26,696 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 15:38:26,696 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 15:38:26,696 - DEBUG - 6383 }
 2020-01-20 15:38:26,696 - DEBUG - 6428 }
 2020-01-20 15:38:26,696 - DEBUG - 6848 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-10
 2020-01-20 15:38:26,696 - DEBUG -  What is a linked data structure?
 2020-01-20 15:38:26,696 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 15:38:26,696 - DEBUG - 6872 }
 2020-01-20 15:38:26,696 - DEBUG - 6905 }
 2020-01-20 15:38:26,696 - DEBUG - 6937 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-11
 2020-01-20 15:38:26,696 - DEBUG -  List kinds of Graphs
 2020-01-20 15:38:26,696 - DEBUG -  Graph and Scene Graph
 2020-01-20 15:38:26,696 - DEBUG - 6961 }
 2020-01-20 15:38:26,696 - DEBUG - 6988 }
 2020-01-20 15:38:26,696 - DEBUG - 7456 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-12
 2020-01-20 15:38:26,696 - DEBUG -  Describe List.
 2020-01-20 15:38:26,696 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 15:38:26,696 - DEBUG - 7480 }
 2020-01-20 15:38:26,696 - DEBUG - 7511 }
 2020-01-20 15:38:26,696 - DEBUG - 7625 }
 2020-01-20 15:38:26,696 - DEBUG - data_structures-13
 2020-01-20 15:38:26,696 - DEBUG -  Describe a Vector.
 2020-01-20 15:38:26,712 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 15:38:26,712 - DEBUG - 7649 }
 2020-01-20 15:38:26,712 - DEBUG - 7675 }
 2020-01-20 15:38:26,712 - DEBUG - 7840 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-14
 2020-01-20 15:38:26,712 - DEBUG -  Describe Set.
 2020-01-20 15:38:26,712 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 15:38:26,712 - DEBUG - 7864 }
 2020-01-20 15:38:26,712 - DEBUG - 7894 }
 2020-01-20 15:38:26,712 - DEBUG - 8360 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-15
 2020-01-20 15:38:26,712 - DEBUG -  Describe a Stack.
 2020-01-20 15:38:26,712 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 15:38:26,712 - DEBUG - 8384 }
 2020-01-20 15:38:26,712 - DEBUG - 8414 }
 2020-01-20 15:38:26,712 - DEBUG - 8949 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-16
 2020-01-20 15:38:26,712 - DEBUG -  Describe a queue.
 2020-01-20 15:38:26,712 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 15:38:26,712 - DEBUG - 8973 }
 2020-01-20 15:38:26,712 - DEBUG - 9008 }
 2020-01-20 15:38:26,712 - DEBUG - 9456 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-17
 2020-01-20 15:38:26,712 - DEBUG -  Describe a Dictionary.
 2020-01-20 15:38:26,712 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 15:38:26,712 - DEBUG - 9480 }
 2020-01-20 15:38:26,712 - DEBUG - 9525 }
 2020-01-20 15:38:26,712 - DEBUG - 10271 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-18
 2020-01-20 15:38:26,712 - DEBUG -  Describe a Tree data structures.
 2020-01-20 15:38:26,712 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 15:38:26,712 - DEBUG - 10295 }
 2020-01-20 15:38:26,712 - DEBUG - 10325 }
 2020-01-20 15:38:26,712 - DEBUG - 10932 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-19
 2020-01-20 15:38:26,712 - DEBUG -  Describe a Graph.
 2020-01-20 15:38:26,712 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 15:38:26,712 - DEBUG - 10960 }
 2020-01-20 15:38:26,712 - DEBUG - 11042 }
 2020-01-20 15:38:26,712 - DEBUG - 11361 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-java-1
 2020-01-20 15:38:26,712 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 15:38:26,712 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 15:38:26,712 - DEBUG - 11389 }
 2020-01-20 15:38:26,712 - DEBUG - 11460 }
 2020-01-20 15:38:26,712 - DEBUG - 11641 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-java-2
 2020-01-20 15:38:26,712 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 15:38:26,712 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 15:38:26,712 - DEBUG - 11669 }
 2020-01-20 15:38:26,712 - DEBUG - 11714 }
 2020-01-20 15:38:26,712 - DEBUG - 11877 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-java-3
 2020-01-20 15:38:26,712 - DEBUG -  Describe java boolean primitive.
 2020-01-20 15:38:26,712 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 15:38:26,712 - DEBUG - 11905 }
 2020-01-20 15:38:26,712 - DEBUG - 11943 }
 2020-01-20 15:38:26,712 - DEBUG - 12272 }
 2020-01-20 15:38:26,712 - DEBUG - data_structures-java-4
 2020-01-20 15:38:26,712 - DEBUG -  Describe java references.
 2020-01-20 15:38:26,712 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 15:38:26,727 - DEBUG - 12296 }
 2020-01-20 15:38:26,727 - DEBUG - 12375 }
 2020-01-20 15:38:26,727 - DEBUG - 12458 }
 2020-01-20 15:38:26,727 - DEBUG - data_structures-20
 2020-01-20 15:38:26,727 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 15:38:26,727 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 15:38:26,727 - DEBUG - 12492 }
 2020-01-20 15:38:26,727 - DEBUG - 12532 }
 2020-01-20 15:38:26,727 - DEBUG - 12826 }
 2020-01-20 15:38:26,727 - DEBUG - data_structures-javascript-1
 2020-01-20 15:38:26,727 - DEBUG -  Name JavaScript primitives.
 2020-01-20 15:38:26,727 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 15:38:26,727 - DEBUG - 12850 }
 2020-01-20 15:38:26,727 - DEBUG - 12956 }
 2020-01-20 15:38:26,727 - DEBUG - 13123 }
 2020-01-20 15:38:26,727 - DEBUG - data_structures-21
 2020-01-20 15:38:26,727 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 15:38:26,727 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 15:38:26,727 - DEBUG - 13153 }
 2020-01-20 15:38:26,727 - DEBUG - 13189 }
 2020-01-20 15:38:26,727 - DEBUG - 13247 }
 2020-01-20 15:38:26,727 - DEBUG - data_structures-python-1
 2020-01-20 15:38:26,727 - DEBUG -  List python primitives.
 2020-01-20 15:38:26,727 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 15:38:26,727 - DEBUG - 13277 }
 2020-01-20 15:38:26,727 - DEBUG - 13309 }
 2020-01-20 15:38:26,727 - DEBUG - 13422 }
 2020-01-20 15:38:26,727 - DEBUG - data_structures-csharp-1
 2020-01-20 15:38:26,727 - DEBUG -  List c# primitives.
 2020-01-20 15:38:26,727 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 15:38:26,727 - DEBUG - 13434 }
 2020-01-20 15:38:26,727 - DEBUG - 13477 }
 2020-01-20 15:38:26,727 - DEBUG - 13821 }
 2020-01-20 15:38:26,727 - DEBUG - oop-1
 2020-01-20 15:38:26,727 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 15:38:26,727 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 15:38:26,727 - DEBUG - 13832 }
 2020-01-20 15:38:26,727 - DEBUG - 13899 }
 2020-01-20 15:38:26,727 - DEBUG - 13965 }
 2020-01-20 15:38:26,727 - DEBUG - oop-2
 2020-01-20 15:38:26,727 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 15:38:26,727 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 15:38:26,727 - DEBUG - 13976 }
 2020-01-20 15:38:26,727 - DEBUG - 14039 }
 2020-01-20 15:38:26,727 - DEBUG - 14084 }
 2020-01-20 15:38:26,727 - DEBUG - oop-3
 2020-01-20 15:38:26,727 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 15:38:26,727 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 15:38:26,727 - DEBUG - 14095 }
 2020-01-20 15:38:26,727 - DEBUG - 14149 }
 2020-01-20 15:38:26,727 - DEBUG - 14406 }
 2020-01-20 15:38:26,727 - DEBUG - oop-4
 2020-01-20 15:38:26,727 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 15:38:26,727 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 15:38:26,727 - DEBUG - 14417 }
 2020-01-20 15:38:26,727 - DEBUG - 14471 }
 2020-01-20 15:38:26,727 - DEBUG - 14834 }
 2020-01-20 15:38:26,727 - DEBUG - oop-5
 2020-01-20 15:38:26,727 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 15:38:26,727 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 15:38:26,727 - DEBUG - 14845 }
 2020-01-20 15:38:26,727 - DEBUG - 14899 }
 2020-01-20 15:38:26,727 - DEBUG - 15220 }
 2020-01-20 15:38:26,727 - DEBUG - oop-6
 2020-01-20 15:38:26,727 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 15:38:26,727 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 15:38:26,727 - DEBUG - 15242 }
 2020-01-20 15:38:26,727 - DEBUG - 15294 }
 2020-01-20 15:38:26,727 - DEBUG - 15369 }
 2020-01-20 15:38:26,727 - DEBUG - oop-creational-1
 2020-01-20 15:38:26,727 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 15:38:26,727 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 15:38:26,727 - DEBUG - 15391 }
 2020-01-20 15:38:26,727 - DEBUG - 15444 }
 2020-01-20 15:38:26,727 - DEBUG - 15583 }
 2020-01-20 15:38:26,727 - DEBUG - oop-behavioral-1
 2020-01-20 15:38:26,727 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 15:38:26,727 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 15:38:26,727 - DEBUG - 15605 }
 2020-01-20 15:38:26,727 - DEBUG - 15657 }
 2020-01-20 15:38:26,727 - DEBUG - 15733 }
 2020-01-20 15:38:26,727 - DEBUG - oop-structural-1
 2020-01-20 15:38:26,727 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 15:38:26,727 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 15:38:26,727 - DEBUG - 15755 }
 2020-01-20 15:38:26,727 - DEBUG - 15842 }
 2020-01-20 15:38:26,727 - DEBUG - 15882 }
 2020-01-20 15:38:26,727 - DEBUG - oop-structural-2
 2020-01-20 15:38:26,727 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 15:38:26,727 - DEBUG -  Model View Controller or MVC.
 2020-01-20 15:38:26,727 - DEBUG - 15904 }
 2020-01-20 15:38:26,727 - DEBUG - 15938 }
 2020-01-20 15:38:26,727 - DEBUG - 16451 }
 2020-01-20 15:38:26,727 - DEBUG - oop-structural-3
 2020-01-20 15:38:26,727 - DEBUG -  Describe MVC pattern.
 2020-01-20 15:38:26,727 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 15:38:26,727 - DEBUG - 16473 }
 2020-01-20 15:38:26,727 - DEBUG - 16513 }
 2020-01-20 15:38:26,727 - DEBUG - 16769 }
 2020-01-20 15:38:26,743 - DEBUG - oop-creational-2
 2020-01-20 15:38:26,743 - DEBUG -  What is the Factory Method?
 2020-01-20 15:38:26,743 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 15:38:26,743 - DEBUG - 16791 }
 2020-01-20 15:38:26,743 - DEBUG - 16822 }
 2020-01-20 15:38:26,743 - DEBUG - 17062 }
 2020-01-20 15:38:26,743 - DEBUG - oop-creational-3
 2020-01-20 15:38:26,743 - DEBUG -  What is Prototype?
 2020-01-20 15:38:26,743 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 15:38:26,743 - DEBUG - 17084 }
 2020-01-20 15:38:26,743 - DEBUG - 17115 }
 2020-01-20 15:38:26,743 - DEBUG - 17404 }
 2020-01-20 15:38:26,743 - DEBUG - oop-creational-4
 2020-01-20 15:38:26,743 - DEBUG -  What is Singleton?
 2020-01-20 15:38:26,743 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 15:38:26,743 - DEBUG - 17426 }
 2020-01-20 15:38:26,743 - DEBUG - 17464 }
 2020-01-20 15:38:26,743 - DEBUG - 18097 }
 2020-01-20 15:38:26,743 - DEBUG - oop-creational-5
 2020-01-20 15:38:26,743 - DEBUG -  What is Abstract Factory?
 2020-01-20 15:38:26,743 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 15:38:26,743 - DEBUG - 18119 }
 2020-01-20 15:38:26,743 - DEBUG - 18174 }
 2020-01-20 15:38:26,743 - DEBUG - 18512 }
 2020-01-20 15:38:26,743 - DEBUG - oop-creational-6
 2020-01-20 15:38:26,743 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 15:38:26,743 - DEBUG - 18534 }
 2020-01-20 15:38:26,743 - DEBUG - 18597 }
 2020-01-20 15:38:26,743 - DEBUG - 18869 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-2
 2020-01-20 15:38:26,743 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 15:38:26,743 - DEBUG - 18891 }
 2020-01-20 15:38:26,743 - DEBUG - 18947 }
 2020-01-20 15:38:26,743 - DEBUG - 19298 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-3
 2020-01-20 15:38:26,743 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 15:38:26,743 - DEBUG - 19320 }
 2020-01-20 15:38:26,743 - DEBUG - 19379 }
 2020-01-20 15:38:26,743 - DEBUG - 19657 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-4
 2020-01-20 15:38:26,743 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 15:38:26,743 - DEBUG - 19679 }
 2020-01-20 15:38:26,743 - DEBUG - 19734 }
 2020-01-20 15:38:26,743 - DEBUG - 20104 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-5
 2020-01-20 15:38:26,743 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 15:38:26,743 - DEBUG - 20126 }
 2020-01-20 15:38:26,743 - DEBUG - 20182 }
 2020-01-20 15:38:26,743 - DEBUG - 20562 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-6
 2020-01-20 15:38:26,743 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 15:38:26,743 - DEBUG - 20584 }
 2020-01-20 15:38:26,743 - DEBUG - 20637 }
 2020-01-20 15:38:26,743 - DEBUG - 20945 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-7
 2020-01-20 15:38:26,743 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 15:38:26,743 - DEBUG - 20967 }
 2020-01-20 15:38:26,743 - DEBUG - 21023 }
 2020-01-20 15:38:26,743 - DEBUG - 21457 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-8
 2020-01-20 15:38:26,743 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 15:38:26,743 - DEBUG - 21479 }
 2020-01-20 15:38:26,743 - DEBUG - 21535 }
 2020-01-20 15:38:26,743 - DEBUG - 21801 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-9
 2020-01-20 15:38:26,743 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 15:38:26,743 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 15:38:26,743 - DEBUG - 21824 }
 2020-01-20 15:38:26,743 - DEBUG - 21894 }
 2020-01-20 15:38:26,743 - DEBUG - 22311 }
 2020-01-20 15:38:26,743 - DEBUG - oop-behavioral-10
 2020-01-20 15:38:26,743 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 15:38:26,743 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 15:38:26,758 - DEBUG - 22334 }
 2020-01-20 15:38:26,759 - DEBUG - 22393 }
 2020-01-20 15:38:26,759 - DEBUG - 22719 }
 2020-01-20 15:38:26,760 - DEBUG - oop-behavioral-11
 2020-01-20 15:38:26,760 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 15:38:26,760 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 15:38:26,760 - DEBUG - 22742 }
 2020-01-20 15:38:26,760 - DEBUG - 22801 }
 2020-01-20 15:38:26,761 - DEBUG - 23266 }
 2020-01-20 15:38:26,761 - DEBUG - oop-behavioral-12
 2020-01-20 15:38:26,761 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 15:38:26,761 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 15:38:26,761 - DEBUG - 23288 }
 2020-01-20 15:38:26,761 - DEBUG - 23343 }
 2020-01-20 15:38:26,762 - DEBUG - 23656 }
 2020-01-20 15:38:26,762 - DEBUG - oop-structural-4
 2020-01-20 15:38:26,762 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 15:38:26,762 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 15:38:26,762 - DEBUG - 23678 }
 2020-01-20 15:38:26,763 - DEBUG - 23735 }
 2020-01-20 15:38:26,763 - DEBUG - 24091 }
 2020-01-20 15:38:26,763 - DEBUG - oop-structural-5
 2020-01-20 15:38:26,763 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 15:38:26,763 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 15:38:26,764 - DEBUG - 24113 }
 2020-01-20 15:38:26,764 - DEBUG - 24170 }
 2020-01-20 15:38:26,764 - DEBUG - 24554 }
 2020-01-20 15:38:26,764 - DEBUG - oop-structural-6
 2020-01-20 15:38:26,764 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 15:38:26,765 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 15:38:26,765 - DEBUG - 24576 }
 2020-01-20 15:38:26,765 - DEBUG - 24629 }
 2020-01-20 15:38:26,765 - DEBUG - 24995 }
 2020-01-20 15:38:26,766 - DEBUG - oop-structural-7
 2020-01-20 15:38:26,766 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 15:38:26,766 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 15:38:26,766 - DEBUG - 25017 }
 2020-01-20 15:38:26,766 - DEBUG - 25071 }
 2020-01-20 15:38:26,767 - DEBUG - 25501 }
 2020-01-20 15:38:26,767 - DEBUG - oop-structural-8
 2020-01-20 15:38:26,767 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 15:38:26,767 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 15:38:26,767 - DEBUG - 25523 }
 2020-01-20 15:38:26,768 - DEBUG - 25580 }
 2020-01-20 15:38:26,769 - DEBUG - 26139 }
 2020-01-20 15:38:26,769 - DEBUG - oop-structural-9
 2020-01-20 15:38:26,769 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 15:38:26,769 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 15:38:26,769 - DEBUG - 26162 }
 2020-01-20 15:38:26,770 - DEBUG - 26216 }
 2020-01-20 15:38:26,770 - DEBUG - 26748 }
 2020-01-20 15:38:26,771 - DEBUG - oop-structural-10
 2020-01-20 15:38:26,771 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 15:38:26,771 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 15:38:26,771 - DEBUG - 26782 }
 2020-01-20 15:38:26,771 - DEBUG - 26838 }
 2020-01-20 15:38:26,771 - DEBUG - 26980 }
 2020-01-20 15:38:26,772 - DEBUG - python-datatypes-strings-1
 2020-01-20 15:38:26,772 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 15:38:26,772 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 15:38:26,772 - DEBUG - 27013 }
 2020-01-20 15:38:26,772 - DEBUG - 27073 }
 2020-01-20 15:38:26,772 - DEBUG - 27141 }
 2020-01-20 15:38:26,772 - DEBUG - python-datatypes-strings-2
 2020-01-20 15:38:26,772 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 15:38:26,773 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 15:38:26,773 - DEBUG - 27174 }
 2020-01-20 15:38:26,773 - DEBUG - 27247 }
 2020-01-20 15:38:26,773 - DEBUG - 27409 }
 2020-01-20 15:38:26,773 - DEBUG - python-datatypes-strings-3
 2020-01-20 15:38:26,773 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 15:38:26,773 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 15:38:26,774 - DEBUG - 27442 }
 2020-01-20 15:38:26,774 - DEBUG - 27502 }
 2020-01-20 15:38:26,774 - DEBUG - 27600 }
 2020-01-20 15:38:26,774 - DEBUG - python-datatypes-strings-4
 2020-01-20 15:38:26,774 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 15:38:26,774 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 15:38:26,774 - DEBUG - 27634 }
 2020-01-20 15:38:26,775 - DEBUG - 27685 }
 2020-01-20 15:38:26,775 - DEBUG - 27715 }
 2020-01-20 15:38:26,775 - DEBUG - python-datatypes-strings-5
 2020-01-20 15:38:26,775 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 15:38:26,775 - DEBUG -  len(mystring) is 5
 2020-01-20 15:38:26,776 - DEBUG - 27748 }
 2020-01-20 15:38:26,776 - DEBUG - 27790 }
 2020-01-20 15:38:26,776 - DEBUG - 27877 }
 2020-01-20 15:38:26,777 - DEBUG - python-datatypes-strings-6
 2020-01-20 15:38:26,777 - DEBUG -  How do you merge two strings?
 2020-01-20 15:38:26,777 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 15:38:26,777 - DEBUG - 27912 }
 2020-01-20 15:38:26,777 - DEBUG - 27961 }
 2020-01-20 15:38:26,778 - DEBUG - 28039 }
 2020-01-20 15:38:26,778 - DEBUG - python-datatypes-strings-7
 2020-01-20 15:38:26,778 - DEBUG -  How do you use a number in a string?
 2020-01-20 15:38:26,778 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 15:38:26,778 - DEBUG - 28074 }
 2020-01-20 15:38:26,779 - DEBUG - 28153 }
 2020-01-20 15:38:26,779 - DEBUG - 28184 }
 2020-01-20 15:38:26,779 - DEBUG - python-datatypes-strings-8
 2020-01-20 15:38:26,779 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 15:38:26,779 - DEBUG -  mystring.split(',')
 2020-01-20 15:38:26,779 - DEBUG - 28217 }
 2020-01-20 15:38:26,779 - DEBUG - 28272 }
 2020-01-20 15:38:26,779 - DEBUG - 28300 }
 2020-01-20 15:38:26,779 - DEBUG - python-datatypes-strings-9
 2020-01-20 15:38:26,780 - DEBUG -  How do you trim white space from a string?
 2020-01-20 15:38:26,780 - DEBUG -  mystring.strip()
 2020-01-20 15:38:26,780 - DEBUG - 28334 }
 2020-01-20 15:38:26,780 - DEBUG - 28394 }
 2020-01-20 15:38:26,780 - DEBUG - 28446 }
 2020-01-20 15:38:26,780 - DEBUG - python-datatypes-strings-10
 2020-01-20 15:38:26,780 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 15:38:26,780 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 15:38:26,781 - DEBUG - 28479 }
 2020-01-20 15:38:26,781 - DEBUG - 28525 }
 2020-01-20 15:38:26,781 - DEBUG - 28640 }
 2020-01-20 15:38:26,781 - DEBUG - python-datatypes-numbers-1
 2020-01-20 15:38:26,781 - DEBUG -  Describe types of python numbers.
 2020-01-20 15:38:26,781 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 15:38:26,781 - DEBUG - 28673 }
 2020-01-20 15:38:26,782 - DEBUG - 28745 }
 2020-01-20 15:38:26,782 - DEBUG - 28893 }
 2020-01-20 15:38:26,782 - DEBUG - python-datatypes-numbers-2
 2020-01-20 15:38:26,782 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 15:38:26,782 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 15:38:26,782 - DEBUG - 28926 }
 2020-01-20 15:38:26,783 - DEBUG - 29001 }
 2020-01-20 15:38:26,783 - DEBUG - 29095 }
 2020-01-20 15:38:26,783 - DEBUG - python-datatypes-numbers-3
 2020-01-20 15:38:26,783 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 15:38:26,783 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 15:38:26,783 - DEBUG - 29128 }
 2020-01-20 15:38:26,783 - DEBUG - 29179 }
 2020-01-20 15:38:26,783 - DEBUG - 29201 }
 2020-01-20 15:38:26,784 - DEBUG - python-datatypes-numbers-4
 2020-01-20 15:38:26,784 - DEBUG -  How do the absolute value of a number?
 2020-01-20 15:38:26,784 - DEBUG -  abs(mynum)
 2020-01-20 15:38:26,784 - DEBUG - 29234 }
 2020-01-20 15:38:26,784 - DEBUG - 29284 }
 2020-01-20 15:38:26,784 - DEBUG - 29313 }
 2020-01-20 15:38:26,784 - DEBUG - python-datatypes-numbers-5
 2020-01-20 15:38:26,784 - DEBUG -  How do you raise a number to a power?
 2020-01-20 15:38:26,784 - DEBUG -  pow(power,number)
 2020-01-20 15:38:26,785 - DEBUG - 29346 }
 2020-01-20 15:38:26,785 - DEBUG - 29390 }
 2020-01-20 15:38:26,785 - DEBUG - 29426 }
 2020-01-20 15:38:26,785 - DEBUG - python-datatypes-numbers-6
 2020-01-20 15:38:26,785 - DEBUG -  How do you round a real number?
 2020-01-20 15:38:26,786 - DEBUG -  round(num,decimalplaces)
 2020-01-20 15:38:26,786 - DEBUG - 29459 }
 2020-01-20 15:38:26,786 - DEBUG - 29513 }
 2020-01-20 15:38:26,786 - DEBUG - 29681 }
 2020-01-20 15:38:26,786 - DEBUG - python-datatypes-numbers-7
 2020-01-20 15:38:26,786 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 15:38:26,786 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 15:38:26,786 - DEBUG - 29695 }
 2020-01-20 15:38:26,786 - DEBUG - 29768 }
 2020-01-20 15:38:26,786 - DEBUG - 29837 }
 2020-01-20 15:38:26,786 - DEBUG - uml-1
 2020-01-20 15:38:26,786 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 15:38:26,786 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 15:38:26,786 - DEBUG - 29848 }
 2020-01-20 15:38:26,786 - DEBUG - 29892 }
 2020-01-20 15:38:26,786 - DEBUG - 29989 }
 2020-01-20 15:38:26,786 - DEBUG - uml-2
 2020-01-20 15:38:26,786 - DEBUG -  What is an interaction diagram?
 2020-01-20 15:38:26,786 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 15:38:26,786 - DEBUG - 30000 }
 2020-01-20 15:38:26,786 - DEBUG - 30041 }
 2020-01-20 15:38:26,786 - DEBUG - 30351 }
 2020-01-20 15:38:26,786 - DEBUG - uml-3
 2020-01-20 15:38:26,786 - DEBUG -  What is a structure diagram?
 2020-01-20 15:38:26,786 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 15:38:26,786 - DEBUG - 30362 }
 2020-01-20 15:38:26,786 - DEBUG - 30402 }
 2020-01-20 15:38:26,786 - DEBUG - 30516 }
 2020-01-20 15:38:26,786 - DEBUG - uml-4
 2020-01-20 15:38:26,786 - DEBUG -  What is a behavior diagram?
 2020-01-20 15:38:26,786 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 15:38:26,786 - DEBUG - 30537 }
 2020-01-20 15:38:26,786 - DEBUG - 30588 }
 2020-01-20 15:38:26,786 - DEBUG - 30670 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-1
 2020-01-20 15:38:26,786 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 15:38:26,786 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 15:38:26,786 - DEBUG - 30690 }
 2020-01-20 15:38:26,786 - DEBUG - 30755 }
 2020-01-20 15:38:26,786 - DEBUG - 30815 }
 2020-01-20 15:38:26,786 - DEBUG - uml-behavior-1
 2020-01-20 15:38:26,786 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 15:38:26,786 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 15:38:26,786 - DEBUG - 30838 }
 2020-01-20 15:38:26,786 - DEBUG - 30895 }
 2020-01-20 15:38:26,786 - DEBUG - 30960 }
 2020-01-20 15:38:26,786 - DEBUG - uml-interaction-1
 2020-01-20 15:38:26,786 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 15:38:26,786 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 15:38:26,786 - DEBUG - 30971 }
 2020-01-20 15:38:26,786 - DEBUG - 31015 }
 2020-01-20 15:38:26,786 - DEBUG - 31049 }
 2020-01-20 15:38:26,786 - DEBUG - uml-2
 2020-01-20 15:38:26,786 - DEBUG -  How many uml digrams are there?
 2020-01-20 15:38:26,786 - DEBUG -  Around 14 give or take.
 2020-01-20 15:38:26,786 - DEBUG - 31070 }
 2020-01-20 15:38:26,786 - DEBUG - 31121 }
 2020-01-20 15:38:26,786 - DEBUG - 31369 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-2
 2020-01-20 15:38:26,786 - DEBUG -  Describe the structure Package diagram
 2020-01-20 15:38:26,786 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 15:38:26,786 - DEBUG - 31390 }
 2020-01-20 15:38:26,786 - DEBUG - 31440 }
 2020-01-20 15:38:26,786 - DEBUG - 31713 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-3
 2020-01-20 15:38:26,786 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 15:38:26,786 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 15:38:26,786 - DEBUG - 31734 }
 2020-01-20 15:38:26,786 - DEBUG - 31785 }
 2020-01-20 15:38:26,786 - DEBUG - 31919 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-4
 2020-01-20 15:38:26,786 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 15:38:26,786 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 15:38:26,786 - DEBUG - 31940 }
 2020-01-20 15:38:26,786 - DEBUG - 31994 }
 2020-01-20 15:38:26,786 - DEBUG - 32246 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-5
 2020-01-20 15:38:26,786 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 15:38:26,786 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 15:38:26,786 - DEBUG - 32267 }
 2020-01-20 15:38:26,786 - DEBUG - 32321 }
 2020-01-20 15:38:26,786 - DEBUG - 32658 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-6
 2020-01-20 15:38:26,786 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 15:38:26,786 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 15:38:26,786 - DEBUG - 32679 }
 2020-01-20 15:38:26,786 - DEBUG - 32736 }
 2020-01-20 15:38:26,786 - DEBUG - 32924 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-7
 2020-01-20 15:38:26,786 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 15:38:26,786 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 15:38:26,786 - DEBUG - 32945 }
 2020-01-20 15:38:26,786 - DEBUG - 33000 }
 2020-01-20 15:38:26,786 - DEBUG - 33308 }
 2020-01-20 15:38:26,786 - DEBUG - uml-structure-8
 2020-01-20 15:38:26,786 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 15:38:26,786 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 15:38:26,786 - DEBUG - 33328 }
 2020-01-20 15:38:26,786 - DEBUG - 33380 }
 2020-01-20 15:38:26,786 - DEBUG - 33546 }
 2020-01-20 15:38:26,786 - DEBUG - uml-behavior-1
 2020-01-20 15:38:26,786 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 15:38:26,786 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 15:38:26,786 - DEBUG - 33566 }
 2020-01-20 15:38:26,786 - DEBUG - 33618 }
 2020-01-20 15:38:26,802 - DEBUG - 33863 }
 2020-01-20 15:38:26,802 - DEBUG - uml-behavior-2
 2020-01-20 15:38:26,802 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 15:38:26,802 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 15:38:26,802 - DEBUG - 33883 }
 2020-01-20 15:38:26,802 - DEBUG - 33932 }
 2020-01-20 15:38:26,802 - DEBUG - 34238 }
 2020-01-20 15:38:26,802 - DEBUG - uml-behavior-3
 2020-01-20 15:38:26,802 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 15:38:26,802 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 15:38:26,802 - DEBUG - 34261 }
 2020-01-20 15:38:26,802 - DEBUG - 34316 }
 2020-01-20 15:38:26,802 - DEBUG - 34474 }
 2020-01-20 15:38:26,802 - DEBUG - uml-interaction-2
 2020-01-20 15:38:26,802 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 15:38:26,802 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 15:38:26,802 - DEBUG - 34497 }
 2020-01-20 15:38:26,802 - DEBUG - 34550 }
 2020-01-20 15:38:26,802 - DEBUG - 34800 }
 2020-01-20 15:38:26,802 - DEBUG - uml-interaction-3
 2020-01-20 15:38:26,802 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 15:38:26,802 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 15:38:26,802 - DEBUG - 34823 }
 2020-01-20 15:38:26,802 - DEBUG - 34884 }
 2020-01-20 15:38:26,802 - DEBUG - 35155 }
 2020-01-20 15:38:26,802 - DEBUG - uml-interaction-4
 2020-01-20 15:38:26,802 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 15:38:26,802 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 15:38:26,802 - DEBUG - 35178 }
 2020-01-20 15:38:26,802 - DEBUG - 35245 }
 2020-01-20 15:38:26,802 - DEBUG - 35403 }
 2020-01-20 15:38:26,802 - DEBUG - uml-interaction-5
 2020-01-20 15:38:26,802 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 15:38:26,802 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 15:38:26,802 - DEBUG - algo_cards
 2020-01-20 15:38:26,802 - DEBUG - box1
 2020-01-20 15:38:26,802 - DEBUG - algo_cards
 2020-01-20 15:38:26,802 - DEBUG - box1
 2020-01-20 15:38:26,802 - DEBUG - box2
 2020-01-20 15:38:26,802 - DEBUG - algo_cards
 2020-01-20 15:38:26,802 - DEBUG - box1
 2020-01-20 15:38:26,802 - DEBUG - box2
 2020-01-20 15:38:26,802 - DEBUG - box3
 2020-01-20 15:38:26,802 - DEBUG - algo_cards
 2020-01-20 15:38:26,802 - DEBUG - box1
 2020-01-20 15:38:26,802 - DEBUG - box2
 2020-01-20 15:38:26,802 - DEBUG - box3
 2020-01-20 15:38:26,802 - DEBUG - box4
 2020-01-20 15:38:26,802 - DEBUG - algo_cards
 2020-01-20 15:38:26,802 - DEBUG - box1
 2020-01-20 15:38:26,802 - DEBUG - box2
 2020-01-20 15:38:26,802 - DEBUG - box3
 2020-01-20 15:38:26,802 - DEBUG - box4
 2020-01-20 15:38:26,802 - DEBUG - box5
 2020-01-20 15:38:26,802 - DEBUG - algo_cards
 2020-01-20 15:38:26,802 - DEBUG - box1
 2020-01-20 15:38:26,802 - DEBUG - box2
 2020-01-20 15:38:26,802 - DEBUG - box3
 2020-01-20 15:38:26,802 - DEBUG - box4
 2020-01-20 15:38:26,802 - DEBUG - box5
 2020-01-20 15:38:26,802 - DEBUG - box6
 2020-01-20 15:38:26,802 - DEBUG - finding test cycle file
 2020-01-20 15:38:26,802 - DEBUG - quizs\
 2020-01-20 15:38:26,802 - DEBUG - algo_cards.txt
 2020-01-20 15:38:26,802 - DEBUG - box1.txt
 2020-01-20 15:38:26,802 - DEBUG - box2.txt
 2020-01-20 15:38:26,802 - DEBUG - box3.txt
 2020-01-20 15:38:26,802 - DEBUG - box4.txt
 2020-01-20 15:38:26,802 - DEBUG - box5.txt
 2020-01-20 15:38:26,802 - DEBUG - box6.txt
 2020-01-20 15:38:26,802 - DEBUG - data_struct_cards.txt
 2020-01-20 15:38:26,802 - DEBUG - oop_cards.txt
 2020-01-20 15:38:26,802 - DEBUG - python_cards.txt
 2020-01-20 15:38:26,802 - DEBUG - testcycle1.txt
 2020-01-20 15:38:26,802 - DEBUG - uml_cards.txt
 2020-01-20 15:38:26,802 - DEBUG - algo_cards
 2020-01-20 15:38:26,802 - DEBUG - box1
 2020-01-20 15:38:26,802 - DEBUG - box2
 2020-01-20 15:38:26,802 - DEBUG - box3
 2020-01-20 15:38:26,802 - DEBUG - box4
 2020-01-20 15:38:26,802 - DEBUG - box5
 2020-01-20 15:38:26,802 - DEBUG - box6
 2020-01-20 15:38:26,802 - DEBUG - data_struct_cards
 2020-01-20 15:38:26,802 - DEBUG - oop_cards
 2020-01-20 15:38:26,802 - DEBUG - python_cards
 2020-01-20 15:38:26,802 - DEBUG - testcycle1
 2020-01-20 15:38:26,802 - DEBUG - found testcycle1.txt
 2020-01-20 15:38:26,817 - DEBUG - testcycle1
 2020-01-20 15:38:26,817 - DEBUG - quizs\
 2020-01-20 15:38:26,817 - DEBUG - Starting new cycle number 1
 2020-01-20 15:38:26,817 - DEBUG - highestbox 1
 2020-01-20 15:38:26,817 - DEBUG - Loading box1 to box1
 2020-01-20 15:38:26,846 - DEBUG - Cycle number 2
 2020-01-20 15:40:59,457 - DEBUG - Start of Logging Leitner Module
 2020-01-20 15:40:59,457 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 15:40:59,457 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 15:40:59,457 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 15:40:59,457 - INFO - on things you get right.
 2020-01-20 15:40:59,493 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 15:40:59,493 - DEBUG - 15 }
 2020-01-20 15:40:59,493 - DEBUG - 57 }
 2020-01-20 15:40:59,493 - DEBUG - 225 }
 2020-01-20 15:40:59,493 - DEBUG - algorithm-1
 2020-01-20 15:40:59,493 - DEBUG -  What is algorithm efficiency?
 2020-01-20 15:40:59,493 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 15:40:59,493 - DEBUG - 242 }
 2020-01-20 15:40:59,493 - DEBUG - 324 }
 2020-01-20 15:40:59,493 - DEBUG - 403 }
 2020-01-20 15:40:59,493 - DEBUG - algorithm-2
 2020-01-20 15:40:59,493 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 15:40:59,493 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 15:40:59,493 - DEBUG - 420 }
 2020-01-20 15:40:59,493 - DEBUG - 502 }
 2020-01-20 15:40:59,493 - DEBUG - 531 }
 2020-01-20 15:40:59,493 - DEBUG - algorithm-3
 2020-01-20 15:40:59,493 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 15:40:59,493 - DEBUG -  Little O notation.
 2020-01-20 15:40:59,493 - DEBUG - 554 }
 2020-01-20 15:40:59,493 - DEBUG - 597 }
 2020-01-20 15:40:59,493 - DEBUG - 846 }
 2020-01-20 15:40:59,493 - DEBUG - alogorithm-bigo-1
 2020-01-20 15:40:59,493 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 15:40:59,493 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 15:40:59,493 - DEBUG - 868 }
 2020-01-20 15:40:59,493 - DEBUG - 911 }
 2020-01-20 15:40:59,493 - DEBUG - 1271 }
 2020-01-20 15:40:59,493 - DEBUG - algorithm-bigo-2
 2020-01-20 15:40:59,493 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 15:40:59,493 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 15:40:59,509 - DEBUG - 1293 }
 2020-01-20 15:40:59,509 - DEBUG - 1338 }
 2020-01-20 15:40:59,509 - DEBUG - 1581 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-3
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 15:40:59,509 - DEBUG - 1603 }
 2020-01-20 15:40:59,509 - DEBUG - 1650 }
 2020-01-20 15:40:59,509 - DEBUG - 1941 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-4
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 15:40:59,509 - DEBUG - 1963 }
 2020-01-20 15:40:59,509 - DEBUG - 2008 }
 2020-01-20 15:40:59,509 - DEBUG - 2088 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-5
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 15:40:59,509 - DEBUG - 2110 }
 2020-01-20 15:40:59,509 - DEBUG - 2155 }
 2020-01-20 15:40:59,509 - DEBUG - 2250 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-6
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 15:40:59,509 - DEBUG - 2272 }
 2020-01-20 15:40:59,509 - DEBUG - 2321 }
 2020-01-20 15:40:59,509 - DEBUG - 2517 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-7
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 15:40:59,509 - DEBUG - 2539 }
 2020-01-20 15:40:59,509 - DEBUG - 2606 }
 2020-01-20 15:40:59,509 - DEBUG - 2693 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-8
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 15:40:59,509 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 15:40:59,509 - DEBUG - 2715 }
 2020-01-20 15:40:59,509 - DEBUG - 2765 }
 2020-01-20 15:40:59,509 - DEBUG - 2893 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-9
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 15:40:59,509 - DEBUG - 2915 }
 2020-01-20 15:40:59,509 - DEBUG - 2959 }
 2020-01-20 15:40:59,509 - DEBUG - 3176 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-9
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 15:40:59,509 - DEBUG - 3199 }
 2020-01-20 15:40:59,509 - DEBUG - 3250 }
 2020-01-20 15:40:59,509 - DEBUG - 3415 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-10
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 15:40:59,509 - DEBUG - 3438 }
 2020-01-20 15:40:59,509 - DEBUG - 3493 }
 2020-01-20 15:40:59,509 - DEBUG - 3618 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-11
 2020-01-20 15:40:59,509 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 15:40:59,509 - DEBUG - 3641 }
 2020-01-20 15:40:59,509 - DEBUG - 3686 }
 2020-01-20 15:40:59,509 - DEBUG - 3838 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-12
 2020-01-20 15:40:59,509 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 15:40:59,509 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 15:40:59,509 - DEBUG - 3861 }
 2020-01-20 15:40:59,509 - DEBUG - 3916 }
 2020-01-20 15:40:59,509 - DEBUG - 4018 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-13
 2020-01-20 15:40:59,509 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 15:40:59,509 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 15:40:59,509 - DEBUG - 4041 }
 2020-01-20 15:40:59,509 - DEBUG - 4094 }
 2020-01-20 15:40:59,509 - DEBUG - 4229 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-14
 2020-01-20 15:40:59,509 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 15:40:59,509 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 15:40:59,509 - DEBUG - 4252 }
 2020-01-20 15:40:59,509 - DEBUG - 4299 }
 2020-01-20 15:40:59,509 - DEBUG - 4365 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-15
 2020-01-20 15:40:59,509 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 15:40:59,509 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 15:40:59,509 - DEBUG - 4388 }
 2020-01-20 15:40:59,509 - DEBUG - 4439 }
 2020-01-20 15:40:59,509 - DEBUG - 4545 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-16
 2020-01-20 15:40:59,509 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 15:40:59,509 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 15:40:59,509 - DEBUG - 4568 }
 2020-01-20 15:40:59,509 - DEBUG - 4613 }
 2020-01-20 15:40:59,509 - DEBUG - 4720 }
 2020-01-20 15:40:59,509 - DEBUG - algorithm-bigo-17
 2020-01-20 15:40:59,509 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 15:40:59,509 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 15:40:59,509 - DEBUG - 4742 }
 2020-01-20 15:40:59,509 - DEBUG - 4806 }
 2020-01-20 15:40:59,509 - DEBUG - 4927 }
 2020-01-20 15:40:59,509 - DEBUG - data_structures-1
 2020-01-20 15:40:59,509 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 15:40:59,509 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 15:40:59,509 - DEBUG - 4950 }
 2020-01-20 15:40:59,509 - DEBUG - 5021 }
 2020-01-20 15:40:59,509 - DEBUG - 5096 }
 2020-01-20 15:40:59,509 - DEBUG - data_structures-2
 2020-01-20 15:40:59,509 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 15:40:59,524 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 15:40:59,524 - DEBUG - 5119 }
 2020-01-20 15:40:59,524 - DEBUG - 5169 }
 2020-01-20 15:40:59,524 - DEBUG - 5250 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-3
 2020-01-20 15:40:59,524 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 15:40:59,524 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 15:40:59,524 - DEBUG - 5273 }
 2020-01-20 15:40:59,524 - DEBUG - 5344 }
 2020-01-20 15:40:59,524 - DEBUG - 5390 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-4
 2020-01-20 15:40:59,524 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 15:40:59,524 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 15:40:59,524 - DEBUG - 5413 }
 2020-01-20 15:40:59,524 - DEBUG - 5447 }
 2020-01-20 15:40:59,524 - DEBUG - 5479 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-5
 2020-01-20 15:40:59,524 - DEBUG -  List kinds of Queues.
 2020-01-20 15:40:59,524 - DEBUG -  Queue, Piority Queue.
 2020-01-20 15:40:59,524 - DEBUG - 5502 }
 2020-01-20 15:40:59,524 - DEBUG - 5553 }
 2020-01-20 15:40:59,524 - DEBUG - 5614 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-6
 2020-01-20 15:40:59,524 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 15:40:59,524 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 15:40:59,524 - DEBUG - 5637 }
 2020-01-20 15:40:59,524 - DEBUG - 5680 }
 2020-01-20 15:40:59,524 - DEBUG - 5746 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-7
 2020-01-20 15:40:59,524 - DEBUG -  List some main kinds of Trees.
 2020-01-20 15:40:59,524 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 15:40:59,524 - DEBUG - 5769 }
 2020-01-20 15:40:59,524 - DEBUG - 5829 }
 2020-01-20 15:40:59,524 - DEBUG - 5922 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-8
 2020-01-20 15:40:59,524 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 15:40:59,524 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 15:40:59,524 - DEBUG - 5945 }
 2020-01-20 15:40:59,524 - DEBUG - 6050 }
 2020-01-20 15:40:59,524 - DEBUG - 6359 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-9
 2020-01-20 15:40:59,524 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 15:40:59,524 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 15:40:59,524 - DEBUG - 6383 }
 2020-01-20 15:40:59,524 - DEBUG - 6428 }
 2020-01-20 15:40:59,524 - DEBUG - 6848 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-10
 2020-01-20 15:40:59,524 - DEBUG -  What is a linked data structure?
 2020-01-20 15:40:59,524 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 15:40:59,524 - DEBUG - 6872 }
 2020-01-20 15:40:59,524 - DEBUG - 6905 }
 2020-01-20 15:40:59,524 - DEBUG - 6937 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-11
 2020-01-20 15:40:59,524 - DEBUG -  List kinds of Graphs
 2020-01-20 15:40:59,524 - DEBUG -  Graph and Scene Graph
 2020-01-20 15:40:59,524 - DEBUG - 6961 }
 2020-01-20 15:40:59,524 - DEBUG - 6988 }
 2020-01-20 15:40:59,524 - DEBUG - 7456 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-12
 2020-01-20 15:40:59,524 - DEBUG -  Describe List.
 2020-01-20 15:40:59,524 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 15:40:59,524 - DEBUG - 7480 }
 2020-01-20 15:40:59,524 - DEBUG - 7511 }
 2020-01-20 15:40:59,524 - DEBUG - 7625 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-13
 2020-01-20 15:40:59,524 - DEBUG -  Describe a Vector.
 2020-01-20 15:40:59,524 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 15:40:59,524 - DEBUG - 7649 }
 2020-01-20 15:40:59,524 - DEBUG - 7675 }
 2020-01-20 15:40:59,524 - DEBUG - 7840 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-14
 2020-01-20 15:40:59,524 - DEBUG -  Describe Set.
 2020-01-20 15:40:59,524 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 15:40:59,524 - DEBUG - 7864 }
 2020-01-20 15:40:59,524 - DEBUG - 7894 }
 2020-01-20 15:40:59,524 - DEBUG - 8360 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-15
 2020-01-20 15:40:59,524 - DEBUG -  Describe a Stack.
 2020-01-20 15:40:59,524 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 15:40:59,524 - DEBUG - 8384 }
 2020-01-20 15:40:59,524 - DEBUG - 8414 }
 2020-01-20 15:40:59,524 - DEBUG - 8949 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-16
 2020-01-20 15:40:59,524 - DEBUG -  Describe a queue.
 2020-01-20 15:40:59,524 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 15:40:59,524 - DEBUG - 8973 }
 2020-01-20 15:40:59,524 - DEBUG - 9008 }
 2020-01-20 15:40:59,524 - DEBUG - 9456 }
 2020-01-20 15:40:59,524 - DEBUG - data_structures-17
 2020-01-20 15:40:59,524 - DEBUG -  Describe a Dictionary.
 2020-01-20 15:40:59,524 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 15:40:59,540 - DEBUG - 9480 }
 2020-01-20 15:40:59,540 - DEBUG - 9525 }
 2020-01-20 15:40:59,540 - DEBUG - 10271 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-18
 2020-01-20 15:40:59,540 - DEBUG -  Describe a Tree data structures.
 2020-01-20 15:40:59,540 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 15:40:59,540 - DEBUG - 10295 }
 2020-01-20 15:40:59,540 - DEBUG - 10325 }
 2020-01-20 15:40:59,540 - DEBUG - 10932 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-19
 2020-01-20 15:40:59,540 - DEBUG -  Describe a Graph.
 2020-01-20 15:40:59,540 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 15:40:59,540 - DEBUG - 10960 }
 2020-01-20 15:40:59,540 - DEBUG - 11042 }
 2020-01-20 15:40:59,540 - DEBUG - 11361 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-java-1
 2020-01-20 15:40:59,540 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 15:40:59,540 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 15:40:59,540 - DEBUG - 11389 }
 2020-01-20 15:40:59,540 - DEBUG - 11460 }
 2020-01-20 15:40:59,540 - DEBUG - 11641 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-java-2
 2020-01-20 15:40:59,540 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 15:40:59,540 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 15:40:59,540 - DEBUG - 11669 }
 2020-01-20 15:40:59,540 - DEBUG - 11714 }
 2020-01-20 15:40:59,540 - DEBUG - 11877 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-java-3
 2020-01-20 15:40:59,540 - DEBUG -  Describe java boolean primitive.
 2020-01-20 15:40:59,540 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 15:40:59,540 - DEBUG - 11905 }
 2020-01-20 15:40:59,540 - DEBUG - 11943 }
 2020-01-20 15:40:59,540 - DEBUG - 12272 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-java-4
 2020-01-20 15:40:59,540 - DEBUG -  Describe java references.
 2020-01-20 15:40:59,540 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 15:40:59,540 - DEBUG - 12296 }
 2020-01-20 15:40:59,540 - DEBUG - 12375 }
 2020-01-20 15:40:59,540 - DEBUG - 12458 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-20
 2020-01-20 15:40:59,540 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 15:40:59,540 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 15:40:59,540 - DEBUG - 12492 }
 2020-01-20 15:40:59,540 - DEBUG - 12532 }
 2020-01-20 15:40:59,540 - DEBUG - 12826 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-javascript-1
 2020-01-20 15:40:59,540 - DEBUG -  Name JavaScript primitives.
 2020-01-20 15:40:59,540 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 15:40:59,540 - DEBUG - 12850 }
 2020-01-20 15:40:59,540 - DEBUG - 12956 }
 2020-01-20 15:40:59,540 - DEBUG - 13123 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-21
 2020-01-20 15:40:59,540 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 15:40:59,540 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 15:40:59,540 - DEBUG - 13153 }
 2020-01-20 15:40:59,540 - DEBUG - 13189 }
 2020-01-20 15:40:59,540 - DEBUG - 13247 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-python-1
 2020-01-20 15:40:59,540 - DEBUG -  List python primitives.
 2020-01-20 15:40:59,540 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 15:40:59,540 - DEBUG - 13277 }
 2020-01-20 15:40:59,540 - DEBUG - 13309 }
 2020-01-20 15:40:59,540 - DEBUG - 13422 }
 2020-01-20 15:40:59,540 - DEBUG - data_structures-csharp-1
 2020-01-20 15:40:59,540 - DEBUG -  List c# primitives.
 2020-01-20 15:40:59,540 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 15:40:59,540 - DEBUG - 13434 }
 2020-01-20 15:40:59,540 - DEBUG - 13477 }
 2020-01-20 15:40:59,540 - DEBUG - 13821 }
 2020-01-20 15:40:59,540 - DEBUG - oop-1
 2020-01-20 15:40:59,540 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 15:40:59,540 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 15:40:59,540 - DEBUG - 13832 }
 2020-01-20 15:40:59,540 - DEBUG - 13899 }
 2020-01-20 15:40:59,540 - DEBUG - 13965 }
 2020-01-20 15:40:59,540 - DEBUG - oop-2
 2020-01-20 15:40:59,540 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 15:40:59,540 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 15:40:59,540 - DEBUG - 13976 }
 2020-01-20 15:40:59,540 - DEBUG - 14039 }
 2020-01-20 15:40:59,540 - DEBUG - 14084 }
 2020-01-20 15:40:59,555 - DEBUG - oop-3
 2020-01-20 15:40:59,555 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 15:40:59,555 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 15:40:59,555 - DEBUG - 14095 }
 2020-01-20 15:40:59,555 - DEBUG - 14149 }
 2020-01-20 15:40:59,555 - DEBUG - 14406 }
 2020-01-20 15:40:59,555 - DEBUG - oop-4
 2020-01-20 15:40:59,555 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 15:40:59,555 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 15:40:59,555 - DEBUG - 14417 }
 2020-01-20 15:40:59,555 - DEBUG - 14471 }
 2020-01-20 15:40:59,555 - DEBUG - 14834 }
 2020-01-20 15:40:59,555 - DEBUG - oop-5
 2020-01-20 15:40:59,555 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 15:40:59,555 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 15:40:59,555 - DEBUG - 14845 }
 2020-01-20 15:40:59,555 - DEBUG - 14899 }
 2020-01-20 15:40:59,555 - DEBUG - 15220 }
 2020-01-20 15:40:59,555 - DEBUG - oop-6
 2020-01-20 15:40:59,555 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 15:40:59,555 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 15:40:59,555 - DEBUG - 15242 }
 2020-01-20 15:40:59,555 - DEBUG - 15294 }
 2020-01-20 15:40:59,555 - DEBUG - 15369 }
 2020-01-20 15:40:59,555 - DEBUG - oop-creational-1
 2020-01-20 15:40:59,555 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 15:40:59,555 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 15:40:59,555 - DEBUG - 15391 }
 2020-01-20 15:40:59,555 - DEBUG - 15444 }
 2020-01-20 15:40:59,555 - DEBUG - 15583 }
 2020-01-20 15:40:59,555 - DEBUG - oop-behavioral-1
 2020-01-20 15:40:59,555 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 15:40:59,555 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 15:40:59,555 - DEBUG - 15605 }
 2020-01-20 15:40:59,555 - DEBUG - 15657 }
 2020-01-20 15:40:59,555 - DEBUG - 15733 }
 2020-01-20 15:40:59,555 - DEBUG - oop-structural-1
 2020-01-20 15:40:59,555 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 15:40:59,555 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 15:40:59,555 - DEBUG - 15755 }
 2020-01-20 15:40:59,555 - DEBUG - 15842 }
 2020-01-20 15:40:59,555 - DEBUG - 15882 }
 2020-01-20 15:40:59,555 - DEBUG - oop-structural-2
 2020-01-20 15:40:59,555 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 15:40:59,555 - DEBUG -  Model View Controller or MVC.
 2020-01-20 15:40:59,555 - DEBUG - 15904 }
 2020-01-20 15:40:59,555 - DEBUG - 15938 }
 2020-01-20 15:40:59,555 - DEBUG - 16451 }
 2020-01-20 15:40:59,555 - DEBUG - oop-structural-3
 2020-01-20 15:40:59,555 - DEBUG -  Describe MVC pattern.
 2020-01-20 15:40:59,555 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 15:40:59,555 - DEBUG - 16473 }
 2020-01-20 15:40:59,555 - DEBUG - 16513 }
 2020-01-20 15:40:59,555 - DEBUG - 16769 }
 2020-01-20 15:40:59,555 - DEBUG - oop-creational-2
 2020-01-20 15:40:59,555 - DEBUG -  What is the Factory Method?
 2020-01-20 15:40:59,555 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 15:40:59,555 - DEBUG - 16791 }
 2020-01-20 15:40:59,555 - DEBUG - 16822 }
 2020-01-20 15:40:59,555 - DEBUG - 17062 }
 2020-01-20 15:40:59,555 - DEBUG - oop-creational-3
 2020-01-20 15:40:59,555 - DEBUG -  What is Prototype?
 2020-01-20 15:40:59,555 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 15:40:59,555 - DEBUG - 17084 }
 2020-01-20 15:40:59,555 - DEBUG - 17115 }
 2020-01-20 15:40:59,555 - DEBUG - 17404 }
 2020-01-20 15:40:59,555 - DEBUG - oop-creational-4
 2020-01-20 15:40:59,555 - DEBUG -  What is Singleton?
 2020-01-20 15:40:59,555 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 15:40:59,555 - DEBUG - 17426 }
 2020-01-20 15:40:59,555 - DEBUG - 17464 }
 2020-01-20 15:40:59,555 - DEBUG - 18097 }
 2020-01-20 15:40:59,555 - DEBUG - oop-creational-5
 2020-01-20 15:40:59,555 - DEBUG -  What is Abstract Factory?
 2020-01-20 15:40:59,555 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 15:40:59,555 - DEBUG - 18119 }
 2020-01-20 15:40:59,555 - DEBUG - 18174 }
 2020-01-20 15:40:59,555 - DEBUG - 18512 }
 2020-01-20 15:40:59,555 - DEBUG - oop-creational-6
 2020-01-20 15:40:59,555 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 15:40:59,555 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 15:40:59,555 - DEBUG - 18534 }
 2020-01-20 15:40:59,555 - DEBUG - 18597 }
 2020-01-20 15:40:59,555 - DEBUG - 18869 }
 2020-01-20 15:40:59,555 - DEBUG - oop-behavioral-2
 2020-01-20 15:40:59,555 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 15:40:59,555 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 15:40:59,555 - DEBUG - 18891 }
 2020-01-20 15:40:59,555 - DEBUG - 18947 }
 2020-01-20 15:40:59,555 - DEBUG - 19298 }
 2020-01-20 15:40:59,555 - DEBUG - oop-behavioral-3
 2020-01-20 15:40:59,555 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 15:40:59,571 - DEBUG - 19320 }
 2020-01-20 15:40:59,571 - DEBUG - 19379 }
 2020-01-20 15:40:59,571 - DEBUG - 19657 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-4
 2020-01-20 15:40:59,571 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 15:40:59,571 - DEBUG - 19679 }
 2020-01-20 15:40:59,571 - DEBUG - 19734 }
 2020-01-20 15:40:59,571 - DEBUG - 20104 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-5
 2020-01-20 15:40:59,571 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 15:40:59,571 - DEBUG - 20126 }
 2020-01-20 15:40:59,571 - DEBUG - 20182 }
 2020-01-20 15:40:59,571 - DEBUG - 20562 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-6
 2020-01-20 15:40:59,571 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 15:40:59,571 - DEBUG - 20584 }
 2020-01-20 15:40:59,571 - DEBUG - 20637 }
 2020-01-20 15:40:59,571 - DEBUG - 20945 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-7
 2020-01-20 15:40:59,571 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 15:40:59,571 - DEBUG - 20967 }
 2020-01-20 15:40:59,571 - DEBUG - 21023 }
 2020-01-20 15:40:59,571 - DEBUG - 21457 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-8
 2020-01-20 15:40:59,571 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 15:40:59,571 - DEBUG - 21479 }
 2020-01-20 15:40:59,571 - DEBUG - 21535 }
 2020-01-20 15:40:59,571 - DEBUG - 21801 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-9
 2020-01-20 15:40:59,571 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 15:40:59,571 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 15:40:59,571 - DEBUG - 21824 }
 2020-01-20 15:40:59,571 - DEBUG - 21894 }
 2020-01-20 15:40:59,571 - DEBUG - 22311 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-10
 2020-01-20 15:40:59,571 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 15:40:59,571 - DEBUG - 22334 }
 2020-01-20 15:40:59,571 - DEBUG - 22393 }
 2020-01-20 15:40:59,571 - DEBUG - 22719 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-11
 2020-01-20 15:40:59,571 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 15:40:59,571 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 15:40:59,571 - DEBUG - 22742 }
 2020-01-20 15:40:59,571 - DEBUG - 22801 }
 2020-01-20 15:40:59,571 - DEBUG - 23266 }
 2020-01-20 15:40:59,571 - DEBUG - oop-behavioral-12
 2020-01-20 15:40:59,571 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 15:40:59,571 - DEBUG - 23288 }
 2020-01-20 15:40:59,571 - DEBUG - 23343 }
 2020-01-20 15:40:59,571 - DEBUG - 23656 }
 2020-01-20 15:40:59,571 - DEBUG - oop-structural-4
 2020-01-20 15:40:59,571 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 15:40:59,571 - DEBUG - 23678 }
 2020-01-20 15:40:59,571 - DEBUG - 23735 }
 2020-01-20 15:40:59,571 - DEBUG - 24091 }
 2020-01-20 15:40:59,571 - DEBUG - oop-structural-5
 2020-01-20 15:40:59,571 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 15:40:59,571 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 15:40:59,571 - DEBUG - 24113 }
 2020-01-20 15:40:59,571 - DEBUG - 24170 }
 2020-01-20 15:40:59,587 - DEBUG - 24554 }
 2020-01-20 15:40:59,587 - DEBUG - oop-structural-6
 2020-01-20 15:40:59,587 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 15:40:59,587 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 15:40:59,587 - DEBUG - 24576 }
 2020-01-20 15:40:59,587 - DEBUG - 24629 }
 2020-01-20 15:40:59,587 - DEBUG - 24995 }
 2020-01-20 15:40:59,587 - DEBUG - oop-structural-7
 2020-01-20 15:40:59,587 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 15:40:59,587 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 15:40:59,587 - DEBUG - 25017 }
 2020-01-20 15:40:59,587 - DEBUG - 25071 }
 2020-01-20 15:40:59,587 - DEBUG - 25501 }
 2020-01-20 15:40:59,587 - DEBUG - oop-structural-8
 2020-01-20 15:40:59,587 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 15:40:59,587 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 15:40:59,587 - DEBUG - 25523 }
 2020-01-20 15:40:59,587 - DEBUG - 25580 }
 2020-01-20 15:40:59,587 - DEBUG - 26139 }
 2020-01-20 15:40:59,587 - DEBUG - oop-structural-9
 2020-01-20 15:40:59,587 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 15:40:59,587 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 15:40:59,587 - DEBUG - 26162 }
 2020-01-20 15:40:59,587 - DEBUG - 26216 }
 2020-01-20 15:40:59,587 - DEBUG - 26748 }
 2020-01-20 15:40:59,587 - DEBUG - oop-structural-10
 2020-01-20 15:40:59,587 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 15:40:59,587 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 15:40:59,587 - DEBUG - 26782 }
 2020-01-20 15:40:59,587 - DEBUG - 26838 }
 2020-01-20 15:40:59,587 - DEBUG - 26980 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-1
 2020-01-20 15:40:59,587 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 15:40:59,587 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 15:40:59,587 - DEBUG - 27013 }
 2020-01-20 15:40:59,587 - DEBUG - 27073 }
 2020-01-20 15:40:59,587 - DEBUG - 27141 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-2
 2020-01-20 15:40:59,587 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 15:40:59,587 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 15:40:59,587 - DEBUG - 27174 }
 2020-01-20 15:40:59,587 - DEBUG - 27247 }
 2020-01-20 15:40:59,587 - DEBUG - 27409 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-3
 2020-01-20 15:40:59,587 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 15:40:59,587 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 15:40:59,587 - DEBUG - 27442 }
 2020-01-20 15:40:59,587 - DEBUG - 27502 }
 2020-01-20 15:40:59,587 - DEBUG - 27600 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-4
 2020-01-20 15:40:59,587 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 15:40:59,587 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 15:40:59,587 - DEBUG - 27634 }
 2020-01-20 15:40:59,587 - DEBUG - 27685 }
 2020-01-20 15:40:59,587 - DEBUG - 27715 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-5
 2020-01-20 15:40:59,587 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 15:40:59,587 - DEBUG -  len(mystring) is 5
 2020-01-20 15:40:59,587 - DEBUG - 27748 }
 2020-01-20 15:40:59,587 - DEBUG - 27790 }
 2020-01-20 15:40:59,587 - DEBUG - 27877 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-6
 2020-01-20 15:40:59,587 - DEBUG -  How do you merge two strings?
 2020-01-20 15:40:59,587 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 15:40:59,587 - DEBUG - 27912 }
 2020-01-20 15:40:59,587 - DEBUG - 27961 }
 2020-01-20 15:40:59,587 - DEBUG - 28039 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-7
 2020-01-20 15:40:59,587 - DEBUG -  How do you use a number in a string?
 2020-01-20 15:40:59,587 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 15:40:59,587 - DEBUG - 28074 }
 2020-01-20 15:40:59,587 - DEBUG - 28153 }
 2020-01-20 15:40:59,587 - DEBUG - 28184 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-8
 2020-01-20 15:40:59,587 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 15:40:59,587 - DEBUG -  mystring.split(',')
 2020-01-20 15:40:59,587 - DEBUG - 28217 }
 2020-01-20 15:40:59,587 - DEBUG - 28272 }
 2020-01-20 15:40:59,587 - DEBUG - 28300 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-9
 2020-01-20 15:40:59,587 - DEBUG -  How do you trim white space from a string?
 2020-01-20 15:40:59,587 - DEBUG -  mystring.strip()
 2020-01-20 15:40:59,587 - DEBUG - 28334 }
 2020-01-20 15:40:59,587 - DEBUG - 28394 }
 2020-01-20 15:40:59,587 - DEBUG - 28446 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-strings-10
 2020-01-20 15:40:59,587 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 15:40:59,587 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 15:40:59,587 - DEBUG - 28479 }
 2020-01-20 15:40:59,587 - DEBUG - 28525 }
 2020-01-20 15:40:59,587 - DEBUG - 28640 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-numbers-1
 2020-01-20 15:40:59,587 - DEBUG -  Describe types of python numbers.
 2020-01-20 15:40:59,587 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 15:40:59,587 - DEBUG - 28673 }
 2020-01-20 15:40:59,587 - DEBUG - 28745 }
 2020-01-20 15:40:59,587 - DEBUG - 28893 }
 2020-01-20 15:40:59,587 - DEBUG - python-datatypes-numbers-2
 2020-01-20 15:40:59,587 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 15:40:59,587 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 15:40:59,587 - DEBUG - 28926 }
 2020-01-20 15:40:59,587 - DEBUG - 29001 }
 2020-01-20 15:40:59,603 - DEBUG - 29095 }
 2020-01-20 15:40:59,603 - DEBUG - python-datatypes-numbers-3
 2020-01-20 15:40:59,603 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 15:40:59,603 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 15:40:59,603 - DEBUG - 29128 }
 2020-01-20 15:40:59,604 - DEBUG - 29179 }
 2020-01-20 15:40:59,604 - DEBUG - 29201 }
 2020-01-20 15:40:59,604 - DEBUG - python-datatypes-numbers-4
 2020-01-20 15:40:59,604 - DEBUG -  How do the absolute value of a number?
 2020-01-20 15:40:59,604 - DEBUG -  abs(mynum)
 2020-01-20 15:40:59,604 - DEBUG - 29234 }
 2020-01-20 15:40:59,604 - DEBUG - 29284 }
 2020-01-20 15:40:59,604 - DEBUG - 29313 }
 2020-01-20 15:40:59,605 - DEBUG - python-datatypes-numbers-5
 2020-01-20 15:40:59,605 - DEBUG -  How do you raise a number to a power?
 2020-01-20 15:40:59,605 - DEBUG -  pow(power,number)
 2020-01-20 15:40:59,605 - DEBUG - 29346 }
 2020-01-20 15:40:59,605 - DEBUG - 29390 }
 2020-01-20 15:40:59,605 - DEBUG - 29426 }
 2020-01-20 15:40:59,605 - DEBUG - python-datatypes-numbers-6
 2020-01-20 15:40:59,605 - DEBUG -  How do you round a real number?
 2020-01-20 15:40:59,605 - DEBUG -  round(num,decimalplaces)
 2020-01-20 15:40:59,606 - DEBUG - 29459 }
 2020-01-20 15:40:59,606 - DEBUG - 29513 }
 2020-01-20 15:40:59,606 - DEBUG - 29681 }
 2020-01-20 15:40:59,607 - DEBUG - python-datatypes-numbers-7
 2020-01-20 15:40:59,607 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 15:40:59,607 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 15:40:59,607 - DEBUG - 29695 }
 2020-01-20 15:40:59,607 - DEBUG - 29768 }
 2020-01-20 15:40:59,607 - DEBUG - 29837 }
 2020-01-20 15:40:59,607 - DEBUG - uml-1
 2020-01-20 15:40:59,607 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 15:40:59,608 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 15:40:59,608 - DEBUG - 29848 }
 2020-01-20 15:40:59,608 - DEBUG - 29892 }
 2020-01-20 15:40:59,608 - DEBUG - 29989 }
 2020-01-20 15:40:59,608 - DEBUG - uml-2
 2020-01-20 15:40:59,608 - DEBUG -  What is an interaction diagram?
 2020-01-20 15:40:59,608 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 15:40:59,608 - DEBUG - 30000 }
 2020-01-20 15:40:59,609 - DEBUG - 30041 }
 2020-01-20 15:40:59,609 - DEBUG - 30351 }
 2020-01-20 15:40:59,609 - DEBUG - uml-3
 2020-01-20 15:40:59,609 - DEBUG -  What is a structure diagram?
 2020-01-20 15:40:59,609 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 15:40:59,609 - DEBUG - 30362 }
 2020-01-20 15:40:59,610 - DEBUG - 30402 }
 2020-01-20 15:40:59,610 - DEBUG - 30516 }
 2020-01-20 15:40:59,610 - DEBUG - uml-4
 2020-01-20 15:40:59,610 - DEBUG -  What is a behavior diagram?
 2020-01-20 15:40:59,610 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 15:40:59,610 - DEBUG - 30537 }
 2020-01-20 15:40:59,610 - DEBUG - 30588 }
 2020-01-20 15:40:59,611 - DEBUG - 30670 }
 2020-01-20 15:40:59,611 - DEBUG - uml-structure-1
 2020-01-20 15:40:59,611 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 15:40:59,611 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 15:40:59,611 - DEBUG - 30690 }
 2020-01-20 15:40:59,611 - DEBUG - 30755 }
 2020-01-20 15:40:59,611 - DEBUG - 30815 }
 2020-01-20 15:40:59,611 - DEBUG - uml-behavior-1
 2020-01-20 15:40:59,612 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 15:40:59,612 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 15:40:59,612 - DEBUG - 30838 }
 2020-01-20 15:40:59,612 - DEBUG - 30895 }
 2020-01-20 15:40:59,612 - DEBUG - 30960 }
 2020-01-20 15:40:59,612 - DEBUG - uml-interaction-1
 2020-01-20 15:40:59,612 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 15:40:59,612 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 15:40:59,613 - DEBUG - 30971 }
 2020-01-20 15:40:59,613 - DEBUG - 31015 }
 2020-01-20 15:40:59,613 - DEBUG - 31049 }
 2020-01-20 15:40:59,613 - DEBUG - uml-2
 2020-01-20 15:40:59,613 - DEBUG -  How many uml digrams are there?
 2020-01-20 15:40:59,613 - DEBUG -  Around 14 give or take.
 2020-01-20 15:40:59,613 - DEBUG - 31070 }
 2020-01-20 15:40:59,613 - DEBUG - 31121 }
 2020-01-20 15:40:59,614 - DEBUG - 31369 }
 2020-01-20 15:40:59,614 - DEBUG - uml-structure-2
 2020-01-20 15:40:59,614 - DEBUG -  Describe the structure Package diagram
 2020-01-20 15:40:59,614 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 15:40:59,614 - DEBUG - 31390 }
 2020-01-20 15:40:59,614 - DEBUG - 31440 }
 2020-01-20 15:40:59,615 - DEBUG - 31713 }
 2020-01-20 15:40:59,615 - DEBUG - uml-structure-3
 2020-01-20 15:40:59,615 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 15:40:59,615 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 15:40:59,615 - DEBUG - 31734 }
 2020-01-20 15:40:59,615 - DEBUG - 31785 }
 2020-01-20 15:40:59,616 - DEBUG - 31919 }
 2020-01-20 15:40:59,616 - DEBUG - uml-structure-4
 2020-01-20 15:40:59,616 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 15:40:59,616 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 15:40:59,616 - DEBUG - 31940 }
 2020-01-20 15:40:59,616 - DEBUG - 31994 }
 2020-01-20 15:40:59,617 - DEBUG - 32246 }
 2020-01-20 15:40:59,617 - DEBUG - uml-structure-5
 2020-01-20 15:40:59,617 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 15:40:59,617 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 15:40:59,617 - DEBUG - 32267 }
 2020-01-20 15:40:59,617 - DEBUG - 32321 }
 2020-01-20 15:40:59,618 - DEBUG - 32658 }
 2020-01-20 15:40:59,618 - DEBUG - uml-structure-6
 2020-01-20 15:40:59,618 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 15:40:59,618 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 15:40:59,618 - DEBUG - 32679 }
 2020-01-20 15:40:59,618 - DEBUG - 32736 }
 2020-01-20 15:40:59,619 - DEBUG - 32924 }
 2020-01-20 15:40:59,619 - DEBUG - uml-structure-7
 2020-01-20 15:40:59,619 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 15:40:59,619 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 15:40:59,619 - DEBUG - 32945 }
 2020-01-20 15:40:59,620 - DEBUG - 33000 }
 2020-01-20 15:40:59,620 - DEBUG - 33308 }
 2020-01-20 15:40:59,620 - DEBUG - uml-structure-8
 2020-01-20 15:40:59,620 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 15:40:59,621 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 15:40:59,621 - DEBUG - 33328 }
 2020-01-20 15:40:59,621 - DEBUG - 33380 }
 2020-01-20 15:40:59,621 - DEBUG - 33546 }
 2020-01-20 15:40:59,621 - DEBUG - uml-behavior-1
 2020-01-20 15:40:59,621 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 15:40:59,621 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 15:40:59,622 - DEBUG - 33566 }
 2020-01-20 15:40:59,622 - DEBUG - 33618 }
 2020-01-20 15:40:59,622 - DEBUG - 33863 }
 2020-01-20 15:40:59,622 - DEBUG - uml-behavior-2
 2020-01-20 15:40:59,622 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 15:40:59,622 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 15:40:59,623 - DEBUG - 33883 }
 2020-01-20 15:40:59,623 - DEBUG - 33932 }
 2020-01-20 15:40:59,623 - DEBUG - 34238 }
 2020-01-20 15:40:59,623 - DEBUG - uml-behavior-3
 2020-01-20 15:40:59,623 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 15:40:59,624 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 15:40:59,624 - DEBUG - 34261 }
 2020-01-20 15:40:59,624 - DEBUG - 34316 }
 2020-01-20 15:40:59,624 - DEBUG - 34474 }
 2020-01-20 15:40:59,624 - DEBUG - uml-interaction-2
 2020-01-20 15:40:59,624 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 15:40:59,624 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 15:40:59,625 - DEBUG - 34497 }
 2020-01-20 15:40:59,625 - DEBUG - 34550 }
 2020-01-20 15:40:59,625 - DEBUG - 34800 }
 2020-01-20 15:40:59,625 - DEBUG - uml-interaction-3
 2020-01-20 15:40:59,625 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 15:40:59,625 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 15:40:59,626 - DEBUG - 34823 }
 2020-01-20 15:40:59,626 - DEBUG - 34884 }
 2020-01-20 15:40:59,626 - DEBUG - 35155 }
 2020-01-20 15:40:59,626 - DEBUG - uml-interaction-4
 2020-01-20 15:40:59,626 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 15:40:59,626 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 15:40:59,627 - DEBUG - 35178 }
 2020-01-20 15:40:59,627 - DEBUG - 35245 }
 2020-01-20 15:40:59,627 - DEBUG - 35403 }
 2020-01-20 15:40:59,627 - DEBUG - uml-interaction-5
 2020-01-20 15:40:59,627 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 15:40:59,627 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 15:40:59,628 - DEBUG - algo_cards
 2020-01-20 15:40:59,628 - DEBUG - box1
 2020-01-20 15:40:59,629 - DEBUG - algo_cards
 2020-01-20 15:40:59,629 - DEBUG - box1
 2020-01-20 15:40:59,629 - DEBUG - box2
 2020-01-20 15:40:59,630 - DEBUG - algo_cards
 2020-01-20 15:40:59,630 - DEBUG - box1
 2020-01-20 15:40:59,630 - DEBUG - box2
 2020-01-20 15:40:59,631 - DEBUG - box3
 2020-01-20 15:40:59,631 - DEBUG - algo_cards
 2020-01-20 15:40:59,631 - DEBUG - box1
 2020-01-20 15:40:59,632 - DEBUG - box2
 2020-01-20 15:40:59,632 - DEBUG - box3
 2020-01-20 15:40:59,632 - DEBUG - box4
 2020-01-20 15:40:59,632 - DEBUG - algo_cards
 2020-01-20 15:40:59,633 - DEBUG - box1
 2020-01-20 15:40:59,633 - DEBUG - box2
 2020-01-20 15:40:59,633 - DEBUG - box3
 2020-01-20 15:40:59,633 - DEBUG - box4
 2020-01-20 15:40:59,633 - DEBUG - box5
 2020-01-20 15:40:59,634 - DEBUG - algo_cards
 2020-01-20 15:40:59,634 - DEBUG - box1
 2020-01-20 15:40:59,634 - DEBUG - box2
 2020-01-20 15:40:59,634 - DEBUG - box3
 2020-01-20 15:40:59,634 - DEBUG - box4
 2020-01-20 15:40:59,634 - DEBUG - box5
 2020-01-20 15:40:59,634 - DEBUG - box6
 2020-01-20 15:40:59,635 - DEBUG - finding test cycle file
 2020-01-20 15:40:59,635 - DEBUG - quizs\
 2020-01-20 15:40:59,635 - DEBUG - algo_cards.txt
 2020-01-20 15:40:59,635 - DEBUG - box1.txt
 2020-01-20 15:40:59,635 - DEBUG - box2.txt
 2020-01-20 15:40:59,635 - DEBUG - box3.txt
 2020-01-20 15:40:59,635 - DEBUG - box4.txt
 2020-01-20 15:40:59,636 - DEBUG - box5.txt
 2020-01-20 15:40:59,636 - DEBUG - box6.txt
 2020-01-20 15:40:59,636 - DEBUG - data_struct_cards.txt
 2020-01-20 15:40:59,636 - DEBUG - oop_cards.txt
 2020-01-20 15:40:59,636 - DEBUG - python_cards.txt
 2020-01-20 15:40:59,636 - DEBUG - testcycle1.txt
 2020-01-20 15:40:59,636 - DEBUG - uml_cards.txt
 2020-01-20 15:40:59,636 - DEBUG - algo_cards
 2020-01-20 15:40:59,636 - DEBUG - box1
 2020-01-20 15:40:59,636 - DEBUG - box2
 2020-01-20 15:40:59,636 - DEBUG - box3
 2020-01-20 15:40:59,636 - DEBUG - box4
 2020-01-20 15:40:59,636 - DEBUG - box5
 2020-01-20 15:40:59,636 - DEBUG - box6
 2020-01-20 15:40:59,636 - DEBUG - data_struct_cards
 2020-01-20 15:40:59,636 - DEBUG - oop_cards
 2020-01-20 15:40:59,636 - DEBUG - python_cards
 2020-01-20 15:40:59,636 - DEBUG - testcycle1
 2020-01-20 15:40:59,636 - DEBUG - found testcycle1.txt
 2020-01-20 15:40:59,636 - DEBUG - testcycle1
 2020-01-20 15:40:59,636 - DEBUG - quizs\
 2020-01-20 15:40:59,636 - DEBUG - Starting new cycle number 1
 2020-01-20 15:40:59,636 - DEBUG - highestbox 1
 2020-01-20 15:40:59,636 - DEBUG - Loading box1 to box1
 2020-01-20 15:40:59,677 - DEBUG - Cycle number 2
 2020-01-20 15:43:18,297 - DEBUG - Start of Logging Leitner Module
 2020-01-20 15:43:18,297 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 15:43:18,297 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 15:43:18,297 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 15:43:18,297 - INFO - on things you get right.
 2020-01-20 15:43:18,344 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 15:43:18,344 - DEBUG - 15 }
 2020-01-20 15:43:18,344 - DEBUG - 57 }
 2020-01-20 15:43:18,344 - DEBUG - 225 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-1
 2020-01-20 15:43:18,344 - DEBUG -  What is algorithm efficiency?
 2020-01-20 15:43:18,344 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 15:43:18,344 - DEBUG - 242 }
 2020-01-20 15:43:18,344 - DEBUG - 324 }
 2020-01-20 15:43:18,344 - DEBUG - 403 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-2
 2020-01-20 15:43:18,344 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 15:43:18,344 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 15:43:18,344 - DEBUG - 420 }
 2020-01-20 15:43:18,344 - DEBUG - 502 }
 2020-01-20 15:43:18,344 - DEBUG - 531 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-3
 2020-01-20 15:43:18,344 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 15:43:18,344 - DEBUG -  Little O notation.
 2020-01-20 15:43:18,344 - DEBUG - 554 }
 2020-01-20 15:43:18,344 - DEBUG - 597 }
 2020-01-20 15:43:18,344 - DEBUG - 846 }
 2020-01-20 15:43:18,344 - DEBUG - alogorithm-bigo-1
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 15:43:18,344 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 15:43:18,344 - DEBUG - 868 }
 2020-01-20 15:43:18,344 - DEBUG - 911 }
 2020-01-20 15:43:18,344 - DEBUG - 1271 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-2
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 15:43:18,344 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 15:43:18,344 - DEBUG - 1293 }
 2020-01-20 15:43:18,344 - DEBUG - 1338 }
 2020-01-20 15:43:18,344 - DEBUG - 1581 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-3
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 15:43:18,344 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 15:43:18,344 - DEBUG - 1603 }
 2020-01-20 15:43:18,344 - DEBUG - 1650 }
 2020-01-20 15:43:18,344 - DEBUG - 1941 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-4
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 15:43:18,344 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 15:43:18,344 - DEBUG - 1963 }
 2020-01-20 15:43:18,344 - DEBUG - 2008 }
 2020-01-20 15:43:18,344 - DEBUG - 2088 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-5
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 15:43:18,344 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 15:43:18,344 - DEBUG - 2110 }
 2020-01-20 15:43:18,344 - DEBUG - 2155 }
 2020-01-20 15:43:18,344 - DEBUG - 2250 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-6
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 15:43:18,344 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 15:43:18,344 - DEBUG - 2272 }
 2020-01-20 15:43:18,344 - DEBUG - 2321 }
 2020-01-20 15:43:18,344 - DEBUG - 2517 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-7
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 15:43:18,344 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 15:43:18,344 - DEBUG - 2539 }
 2020-01-20 15:43:18,344 - DEBUG - 2606 }
 2020-01-20 15:43:18,344 - DEBUG - 2693 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-8
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 15:43:18,344 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 15:43:18,344 - DEBUG - 2715 }
 2020-01-20 15:43:18,344 - DEBUG - 2765 }
 2020-01-20 15:43:18,344 - DEBUG - 2893 }
 2020-01-20 15:43:18,344 - DEBUG - algorithm-bigo-9
 2020-01-20 15:43:18,344 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 15:43:18,360 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 15:43:18,360 - DEBUG - 2915 }
 2020-01-20 15:43:18,360 - DEBUG - 2959 }
 2020-01-20 15:43:18,360 - DEBUG - 3176 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-9
 2020-01-20 15:43:18,360 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 15:43:18,360 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 15:43:18,360 - DEBUG - 3199 }
 2020-01-20 15:43:18,360 - DEBUG - 3250 }
 2020-01-20 15:43:18,360 - DEBUG - 3415 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-10
 2020-01-20 15:43:18,360 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 15:43:18,360 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 15:43:18,360 - DEBUG - 3438 }
 2020-01-20 15:43:18,360 - DEBUG - 3493 }
 2020-01-20 15:43:18,360 - DEBUG - 3618 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-11
 2020-01-20 15:43:18,360 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 15:43:18,360 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 15:43:18,360 - DEBUG - 3641 }
 2020-01-20 15:43:18,360 - DEBUG - 3686 }
 2020-01-20 15:43:18,360 - DEBUG - 3838 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-12
 2020-01-20 15:43:18,360 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 15:43:18,360 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 15:43:18,360 - DEBUG - 3861 }
 2020-01-20 15:43:18,360 - DEBUG - 3916 }
 2020-01-20 15:43:18,360 - DEBUG - 4018 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-13
 2020-01-20 15:43:18,360 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 15:43:18,360 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 15:43:18,360 - DEBUG - 4041 }
 2020-01-20 15:43:18,360 - DEBUG - 4094 }
 2020-01-20 15:43:18,360 - DEBUG - 4229 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-14
 2020-01-20 15:43:18,360 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 15:43:18,360 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 15:43:18,360 - DEBUG - 4252 }
 2020-01-20 15:43:18,360 - DEBUG - 4299 }
 2020-01-20 15:43:18,360 - DEBUG - 4365 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-15
 2020-01-20 15:43:18,360 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 15:43:18,360 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 15:43:18,360 - DEBUG - 4388 }
 2020-01-20 15:43:18,360 - DEBUG - 4439 }
 2020-01-20 15:43:18,360 - DEBUG - 4545 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-16
 2020-01-20 15:43:18,360 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 15:43:18,360 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 15:43:18,360 - DEBUG - 4568 }
 2020-01-20 15:43:18,360 - DEBUG - 4613 }
 2020-01-20 15:43:18,360 - DEBUG - 4720 }
 2020-01-20 15:43:18,360 - DEBUG - algorithm-bigo-17
 2020-01-20 15:43:18,360 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 15:43:18,360 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 15:43:18,360 - DEBUG - 4742 }
 2020-01-20 15:43:18,360 - DEBUG - 4806 }
 2020-01-20 15:43:18,360 - DEBUG - 4927 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-1
 2020-01-20 15:43:18,360 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 15:43:18,360 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 15:43:18,360 - DEBUG - 4950 }
 2020-01-20 15:43:18,360 - DEBUG - 5021 }
 2020-01-20 15:43:18,360 - DEBUG - 5096 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-2
 2020-01-20 15:43:18,360 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 15:43:18,360 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 15:43:18,360 - DEBUG - 5119 }
 2020-01-20 15:43:18,360 - DEBUG - 5169 }
 2020-01-20 15:43:18,360 - DEBUG - 5250 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-3
 2020-01-20 15:43:18,360 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 15:43:18,360 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 15:43:18,360 - DEBUG - 5273 }
 2020-01-20 15:43:18,360 - DEBUG - 5344 }
 2020-01-20 15:43:18,360 - DEBUG - 5390 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-4
 2020-01-20 15:43:18,360 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 15:43:18,360 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 15:43:18,360 - DEBUG - 5413 }
 2020-01-20 15:43:18,360 - DEBUG - 5447 }
 2020-01-20 15:43:18,360 - DEBUG - 5479 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-5
 2020-01-20 15:43:18,360 - DEBUG -  List kinds of Queues.
 2020-01-20 15:43:18,360 - DEBUG -  Queue, Piority Queue.
 2020-01-20 15:43:18,360 - DEBUG - 5502 }
 2020-01-20 15:43:18,360 - DEBUG - 5553 }
 2020-01-20 15:43:18,360 - DEBUG - 5614 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-6
 2020-01-20 15:43:18,360 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 15:43:18,360 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 15:43:18,360 - DEBUG - 5637 }
 2020-01-20 15:43:18,360 - DEBUG - 5680 }
 2020-01-20 15:43:18,360 - DEBUG - 5746 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-7
 2020-01-20 15:43:18,360 - DEBUG -  List some main kinds of Trees.
 2020-01-20 15:43:18,360 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 15:43:18,360 - DEBUG - 5769 }
 2020-01-20 15:43:18,360 - DEBUG - 5829 }
 2020-01-20 15:43:18,360 - DEBUG - 5922 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-8
 2020-01-20 15:43:18,360 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 15:43:18,360 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 15:43:18,360 - DEBUG - 5945 }
 2020-01-20 15:43:18,360 - DEBUG - 6050 }
 2020-01-20 15:43:18,360 - DEBUG - 6359 }
 2020-01-20 15:43:18,360 - DEBUG - data_structures-9
 2020-01-20 15:43:18,360 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 15:43:18,360 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 15:43:18,360 - DEBUG - 6383 }
 2020-01-20 15:43:18,360 - DEBUG - 6428 }
 2020-01-20 15:43:18,375 - DEBUG - 6848 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-10
 2020-01-20 15:43:18,375 - DEBUG -  What is a linked data structure?
 2020-01-20 15:43:18,375 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 15:43:18,375 - DEBUG - 6872 }
 2020-01-20 15:43:18,375 - DEBUG - 6905 }
 2020-01-20 15:43:18,375 - DEBUG - 6937 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-11
 2020-01-20 15:43:18,375 - DEBUG -  List kinds of Graphs
 2020-01-20 15:43:18,375 - DEBUG -  Graph and Scene Graph
 2020-01-20 15:43:18,375 - DEBUG - 6961 }
 2020-01-20 15:43:18,375 - DEBUG - 6988 }
 2020-01-20 15:43:18,375 - DEBUG - 7456 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-12
 2020-01-20 15:43:18,375 - DEBUG -  Describe List.
 2020-01-20 15:43:18,375 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 15:43:18,375 - DEBUG - 7480 }
 2020-01-20 15:43:18,375 - DEBUG - 7511 }
 2020-01-20 15:43:18,375 - DEBUG - 7625 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-13
 2020-01-20 15:43:18,375 - DEBUG -  Describe a Vector.
 2020-01-20 15:43:18,375 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 15:43:18,375 - DEBUG - 7649 }
 2020-01-20 15:43:18,375 - DEBUG - 7675 }
 2020-01-20 15:43:18,375 - DEBUG - 7840 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-14
 2020-01-20 15:43:18,375 - DEBUG -  Describe Set.
 2020-01-20 15:43:18,375 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 15:43:18,375 - DEBUG - 7864 }
 2020-01-20 15:43:18,375 - DEBUG - 7894 }
 2020-01-20 15:43:18,375 - DEBUG - 8360 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-15
 2020-01-20 15:43:18,375 - DEBUG -  Describe a Stack.
 2020-01-20 15:43:18,375 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 15:43:18,375 - DEBUG - 8384 }
 2020-01-20 15:43:18,375 - DEBUG - 8414 }
 2020-01-20 15:43:18,375 - DEBUG - 8949 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-16
 2020-01-20 15:43:18,375 - DEBUG -  Describe a queue.
 2020-01-20 15:43:18,375 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 15:43:18,375 - DEBUG - 8973 }
 2020-01-20 15:43:18,375 - DEBUG - 9008 }
 2020-01-20 15:43:18,375 - DEBUG - 9456 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-17
 2020-01-20 15:43:18,375 - DEBUG -  Describe a Dictionary.
 2020-01-20 15:43:18,375 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 15:43:18,375 - DEBUG - 9480 }
 2020-01-20 15:43:18,375 - DEBUG - 9525 }
 2020-01-20 15:43:18,375 - DEBUG - 10271 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-18
 2020-01-20 15:43:18,375 - DEBUG -  Describe a Tree data structures.
 2020-01-20 15:43:18,375 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 15:43:18,375 - DEBUG - 10295 }
 2020-01-20 15:43:18,375 - DEBUG - 10325 }
 2020-01-20 15:43:18,375 - DEBUG - 10932 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-19
 2020-01-20 15:43:18,375 - DEBUG -  Describe a Graph.
 2020-01-20 15:43:18,375 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 15:43:18,375 - DEBUG - 10960 }
 2020-01-20 15:43:18,375 - DEBUG - 11042 }
 2020-01-20 15:43:18,375 - DEBUG - 11361 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-java-1
 2020-01-20 15:43:18,375 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 15:43:18,375 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 15:43:18,375 - DEBUG - 11389 }
 2020-01-20 15:43:18,375 - DEBUG - 11460 }
 2020-01-20 15:43:18,375 - DEBUG - 11641 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-java-2
 2020-01-20 15:43:18,375 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 15:43:18,375 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 15:43:18,375 - DEBUG - 11669 }
 2020-01-20 15:43:18,375 - DEBUG - 11714 }
 2020-01-20 15:43:18,375 - DEBUG - 11877 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-java-3
 2020-01-20 15:43:18,375 - DEBUG -  Describe java boolean primitive.
 2020-01-20 15:43:18,375 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 15:43:18,375 - DEBUG - 11905 }
 2020-01-20 15:43:18,375 - DEBUG - 11943 }
 2020-01-20 15:43:18,375 - DEBUG - 12272 }
 2020-01-20 15:43:18,375 - DEBUG - data_structures-java-4
 2020-01-20 15:43:18,375 - DEBUG -  Describe java references.
 2020-01-20 15:43:18,375 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 15:43:18,375 - DEBUG - 12296 }
 2020-01-20 15:43:18,375 - DEBUG - 12375 }
 2020-01-20 15:43:18,391 - DEBUG - 12458 }
 2020-01-20 15:43:18,391 - DEBUG - data_structures-20
 2020-01-20 15:43:18,391 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 15:43:18,391 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 15:43:18,391 - DEBUG - 12492 }
 2020-01-20 15:43:18,391 - DEBUG - 12532 }
 2020-01-20 15:43:18,393 - DEBUG - 12826 }
 2020-01-20 15:43:18,394 - DEBUG - data_structures-javascript-1
 2020-01-20 15:43:18,394 - DEBUG -  Name JavaScript primitives.
 2020-01-20 15:43:18,394 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 15:43:18,394 - DEBUG - 12850 }
 2020-01-20 15:43:18,394 - DEBUG - 12956 }
 2020-01-20 15:43:18,394 - DEBUG - 13123 }
 2020-01-20 15:43:18,395 - DEBUG - data_structures-21
 2020-01-20 15:43:18,395 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 15:43:18,395 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 15:43:18,395 - DEBUG - 13153 }
 2020-01-20 15:43:18,395 - DEBUG - 13189 }
 2020-01-20 15:43:18,395 - DEBUG - 13247 }
 2020-01-20 15:43:18,395 - DEBUG - data_structures-python-1
 2020-01-20 15:43:18,396 - DEBUG -  List python primitives.
 2020-01-20 15:43:18,396 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 15:43:18,396 - DEBUG - 13277 }
 2020-01-20 15:43:18,396 - DEBUG - 13309 }
 2020-01-20 15:43:18,396 - DEBUG - 13422 }
 2020-01-20 15:43:18,396 - DEBUG - data_structures-csharp-1
 2020-01-20 15:43:18,396 - DEBUG -  List c# primitives.
 2020-01-20 15:43:18,396 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 15:43:18,397 - DEBUG - 13434 }
 2020-01-20 15:43:18,397 - DEBUG - 13477 }
 2020-01-20 15:43:18,397 - DEBUG - 13821 }
 2020-01-20 15:43:18,397 - DEBUG - oop-1
 2020-01-20 15:43:18,397 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 15:43:18,398 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 15:43:18,398 - DEBUG - 13832 }
 2020-01-20 15:43:18,398 - DEBUG - 13899 }
 2020-01-20 15:43:18,398 - DEBUG - 13965 }
 2020-01-20 15:43:18,398 - DEBUG - oop-2
 2020-01-20 15:43:18,398 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 15:43:18,398 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 15:43:18,398 - DEBUG - 13976 }
 2020-01-20 15:43:18,399 - DEBUG - 14039 }
 2020-01-20 15:43:18,399 - DEBUG - 14084 }
 2020-01-20 15:43:18,399 - DEBUG - oop-3
 2020-01-20 15:43:18,399 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 15:43:18,399 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 15:43:18,399 - DEBUG - 14095 }
 2020-01-20 15:43:18,399 - DEBUG - 14149 }
 2020-01-20 15:43:18,400 - DEBUG - 14406 }
 2020-01-20 15:43:18,400 - DEBUG - oop-4
 2020-01-20 15:43:18,400 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 15:43:18,400 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 15:43:18,400 - DEBUG - 14417 }
 2020-01-20 15:43:18,401 - DEBUG - 14471 }
 2020-01-20 15:43:18,401 - DEBUG - 14834 }
 2020-01-20 15:43:18,401 - DEBUG - oop-5
 2020-01-20 15:43:18,401 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 15:43:18,401 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 15:43:18,401 - DEBUG - 14845 }
 2020-01-20 15:43:18,402 - DEBUG - 14899 }
 2020-01-20 15:43:18,402 - DEBUG - 15220 }
 2020-01-20 15:43:18,402 - DEBUG - oop-6
 2020-01-20 15:43:18,402 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 15:43:18,402 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 15:43:18,403 - DEBUG - 15242 }
 2020-01-20 15:43:18,403 - DEBUG - 15294 }
 2020-01-20 15:43:18,403 - DEBUG - 15369 }
 2020-01-20 15:43:18,403 - DEBUG - oop-creational-1
 2020-01-20 15:43:18,403 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 15:43:18,403 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 15:43:18,403 - DEBUG - 15391 }
 2020-01-20 15:43:18,404 - DEBUG - 15444 }
 2020-01-20 15:43:18,404 - DEBUG - 15583 }
 2020-01-20 15:43:18,404 - DEBUG - oop-behavioral-1
 2020-01-20 15:43:18,404 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 15:43:18,404 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 15:43:18,404 - DEBUG - 15605 }
 2020-01-20 15:43:18,405 - DEBUG - 15657 }
 2020-01-20 15:43:18,405 - DEBUG - 15733 }
 2020-01-20 15:43:18,405 - DEBUG - oop-structural-1
 2020-01-20 15:43:18,405 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 15:43:18,405 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 15:43:18,405 - DEBUG - 15755 }
 2020-01-20 15:43:18,405 - DEBUG - 15842 }
 2020-01-20 15:43:18,406 - DEBUG - 15882 }
 2020-01-20 15:43:18,406 - DEBUG - oop-structural-2
 2020-01-20 15:43:18,406 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 15:43:18,406 - DEBUG -  Model View Controller or MVC.
 2020-01-20 15:43:18,406 - DEBUG - 15904 }
 2020-01-20 15:43:18,406 - DEBUG - 15938 }
 2020-01-20 15:43:18,407 - DEBUG - 16451 }
 2020-01-20 15:43:18,407 - DEBUG - oop-structural-3
 2020-01-20 15:43:18,407 - DEBUG -  Describe MVC pattern.
 2020-01-20 15:43:18,407 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 15:43:18,407 - DEBUG - 16473 }
 2020-01-20 15:43:18,407 - DEBUG - 16513 }
 2020-01-20 15:43:18,408 - DEBUG - 16769 }
 2020-01-20 15:43:18,408 - DEBUG - oop-creational-2
 2020-01-20 15:43:18,408 - DEBUG -  What is the Factory Method?
 2020-01-20 15:43:18,408 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 15:43:18,408 - DEBUG - 16791 }
 2020-01-20 15:43:18,408 - DEBUG - 16822 }
 2020-01-20 15:43:18,409 - DEBUG - 17062 }
 2020-01-20 15:43:18,409 - DEBUG - oop-creational-3
 2020-01-20 15:43:18,409 - DEBUG -  What is Prototype?
 2020-01-20 15:43:18,409 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 15:43:18,409 - DEBUG - 17084 }
 2020-01-20 15:43:18,409 - DEBUG - 17115 }
 2020-01-20 15:43:18,410 - DEBUG - 17404 }
 2020-01-20 15:43:18,410 - DEBUG - oop-creational-4
 2020-01-20 15:43:18,410 - DEBUG -  What is Singleton?
 2020-01-20 15:43:18,410 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 15:43:18,410 - DEBUG - 17426 }
 2020-01-20 15:43:18,410 - DEBUG - 17464 }
 2020-01-20 15:43:18,411 - DEBUG - 18097 }
 2020-01-20 15:43:18,411 - DEBUG - oop-creational-5
 2020-01-20 15:43:18,411 - DEBUG -  What is Abstract Factory?
 2020-01-20 15:43:18,412 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 15:43:18,412 - DEBUG - 18119 }
 2020-01-20 15:43:18,412 - DEBUG - 18174 }
 2020-01-20 15:43:18,412 - DEBUG - 18512 }
 2020-01-20 15:43:18,412 - DEBUG - oop-creational-6
 2020-01-20 15:43:18,413 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 15:43:18,413 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 15:43:18,413 - DEBUG - 18534 }
 2020-01-20 15:43:18,413 - DEBUG - 18597 }
 2020-01-20 15:43:18,413 - DEBUG - 18869 }
 2020-01-20 15:43:18,413 - DEBUG - oop-behavioral-2
 2020-01-20 15:43:18,414 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 15:43:18,414 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 15:43:18,414 - DEBUG - 18891 }
 2020-01-20 15:43:18,414 - DEBUG - 18947 }
 2020-01-20 15:43:18,414 - DEBUG - 19298 }
 2020-01-20 15:43:18,415 - DEBUG - oop-behavioral-3
 2020-01-20 15:43:18,415 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 15:43:18,415 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 15:43:18,415 - DEBUG - 19320 }
 2020-01-20 15:43:18,415 - DEBUG - 19379 }
 2020-01-20 15:43:18,416 - DEBUG - 19657 }
 2020-01-20 15:43:18,416 - DEBUG - oop-behavioral-4
 2020-01-20 15:43:18,416 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 15:43:18,416 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 15:43:18,416 - DEBUG - 19679 }
 2020-01-20 15:43:18,416 - DEBUG - 19734 }
 2020-01-20 15:43:18,417 - DEBUG - 20104 }
 2020-01-20 15:43:18,417 - DEBUG - oop-behavioral-5
 2020-01-20 15:43:18,417 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 15:43:18,418 - DEBUG - 20126 }
 2020-01-20 15:43:18,418 - DEBUG - 20182 }
 2020-01-20 15:43:18,418 - DEBUG - 20562 }
 2020-01-20 15:43:18,418 - DEBUG - oop-behavioral-6
 2020-01-20 15:43:18,418 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 15:43:18,418 - DEBUG - 20584 }
 2020-01-20 15:43:18,418 - DEBUG - 20637 }
 2020-01-20 15:43:18,418 - DEBUG - 20945 }
 2020-01-20 15:43:18,418 - DEBUG - oop-behavioral-7
 2020-01-20 15:43:18,418 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 15:43:18,418 - DEBUG - 20967 }
 2020-01-20 15:43:18,418 - DEBUG - 21023 }
 2020-01-20 15:43:18,418 - DEBUG - 21457 }
 2020-01-20 15:43:18,418 - DEBUG - oop-behavioral-8
 2020-01-20 15:43:18,418 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 15:43:18,418 - DEBUG - 21479 }
 2020-01-20 15:43:18,418 - DEBUG - 21535 }
 2020-01-20 15:43:18,418 - DEBUG - 21801 }
 2020-01-20 15:43:18,418 - DEBUG - oop-behavioral-9
 2020-01-20 15:43:18,418 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 15:43:18,418 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 15:43:18,418 - DEBUG - 21824 }
 2020-01-20 15:43:18,418 - DEBUG - 21894 }
 2020-01-20 15:43:18,418 - DEBUG - 22311 }
 2020-01-20 15:43:18,418 - DEBUG - oop-behavioral-10
 2020-01-20 15:43:18,418 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 15:43:18,418 - DEBUG - 22334 }
 2020-01-20 15:43:18,418 - DEBUG - 22393 }
 2020-01-20 15:43:18,418 - DEBUG - 22719 }
 2020-01-20 15:43:18,418 - DEBUG - oop-behavioral-11
 2020-01-20 15:43:18,418 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 15:43:18,418 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 15:43:18,418 - DEBUG - 22742 }
 2020-01-20 15:43:18,418 - DEBUG - 22801 }
 2020-01-20 15:43:18,418 - DEBUG - 23266 }
 2020-01-20 15:43:18,418 - DEBUG - oop-behavioral-12
 2020-01-20 15:43:18,418 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 15:43:18,418 - DEBUG - 23288 }
 2020-01-20 15:43:18,418 - DEBUG - 23343 }
 2020-01-20 15:43:18,418 - DEBUG - 23656 }
 2020-01-20 15:43:18,418 - DEBUG - oop-structural-4
 2020-01-20 15:43:18,418 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 15:43:18,418 - DEBUG - 23678 }
 2020-01-20 15:43:18,418 - DEBUG - 23735 }
 2020-01-20 15:43:18,418 - DEBUG - 24091 }
 2020-01-20 15:43:18,418 - DEBUG - oop-structural-5
 2020-01-20 15:43:18,418 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 15:43:18,418 - DEBUG - 24113 }
 2020-01-20 15:43:18,418 - DEBUG - 24170 }
 2020-01-20 15:43:18,418 - DEBUG - 24554 }
 2020-01-20 15:43:18,418 - DEBUG - oop-structural-6
 2020-01-20 15:43:18,418 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 15:43:18,418 - DEBUG - 24576 }
 2020-01-20 15:43:18,418 - DEBUG - 24629 }
 2020-01-20 15:43:18,418 - DEBUG - 24995 }
 2020-01-20 15:43:18,418 - DEBUG - oop-structural-7
 2020-01-20 15:43:18,418 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 15:43:18,418 - DEBUG - 25017 }
 2020-01-20 15:43:18,418 - DEBUG - 25071 }
 2020-01-20 15:43:18,418 - DEBUG - 25501 }
 2020-01-20 15:43:18,418 - DEBUG - oop-structural-8
 2020-01-20 15:43:18,418 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 15:43:18,418 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 15:43:18,418 - DEBUG - 25523 }
 2020-01-20 15:43:18,418 - DEBUG - 25580 }
 2020-01-20 15:43:18,418 - DEBUG - 26139 }
 2020-01-20 15:43:18,418 - DEBUG - oop-structural-9
 2020-01-20 15:43:18,434 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 15:43:18,434 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 15:43:18,434 - DEBUG - 26162 }
 2020-01-20 15:43:18,434 - DEBUG - 26216 }
 2020-01-20 15:43:18,434 - DEBUG - 26748 }
 2020-01-20 15:43:18,434 - DEBUG - oop-structural-10
 2020-01-20 15:43:18,434 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 15:43:18,434 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 15:43:18,434 - DEBUG - 26782 }
 2020-01-20 15:43:18,434 - DEBUG - 26838 }
 2020-01-20 15:43:18,434 - DEBUG - 26980 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-1
 2020-01-20 15:43:18,434 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 15:43:18,434 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 15:43:18,434 - DEBUG - 27013 }
 2020-01-20 15:43:18,434 - DEBUG - 27073 }
 2020-01-20 15:43:18,434 - DEBUG - 27141 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-2
 2020-01-20 15:43:18,434 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 15:43:18,434 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 15:43:18,434 - DEBUG - 27174 }
 2020-01-20 15:43:18,434 - DEBUG - 27247 }
 2020-01-20 15:43:18,434 - DEBUG - 27409 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-3
 2020-01-20 15:43:18,434 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 15:43:18,434 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 15:43:18,434 - DEBUG - 27442 }
 2020-01-20 15:43:18,434 - DEBUG - 27502 }
 2020-01-20 15:43:18,434 - DEBUG - 27600 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-4
 2020-01-20 15:43:18,434 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 15:43:18,434 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 15:43:18,434 - DEBUG - 27634 }
 2020-01-20 15:43:18,434 - DEBUG - 27685 }
 2020-01-20 15:43:18,434 - DEBUG - 27715 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-5
 2020-01-20 15:43:18,434 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 15:43:18,434 - DEBUG -  len(mystring) is 5
 2020-01-20 15:43:18,434 - DEBUG - 27748 }
 2020-01-20 15:43:18,434 - DEBUG - 27790 }
 2020-01-20 15:43:18,434 - DEBUG - 27877 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-6
 2020-01-20 15:43:18,434 - DEBUG -  How do you merge two strings?
 2020-01-20 15:43:18,434 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 15:43:18,434 - DEBUG - 27912 }
 2020-01-20 15:43:18,434 - DEBUG - 27961 }
 2020-01-20 15:43:18,434 - DEBUG - 28039 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-7
 2020-01-20 15:43:18,434 - DEBUG -  How do you use a number in a string?
 2020-01-20 15:43:18,434 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 15:43:18,434 - DEBUG - 28074 }
 2020-01-20 15:43:18,434 - DEBUG - 28153 }
 2020-01-20 15:43:18,434 - DEBUG - 28184 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-8
 2020-01-20 15:43:18,434 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 15:43:18,434 - DEBUG -  mystring.split(',')
 2020-01-20 15:43:18,434 - DEBUG - 28217 }
 2020-01-20 15:43:18,434 - DEBUG - 28272 }
 2020-01-20 15:43:18,434 - DEBUG - 28300 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-9
 2020-01-20 15:43:18,434 - DEBUG -  How do you trim white space from a string?
 2020-01-20 15:43:18,434 - DEBUG -  mystring.strip()
 2020-01-20 15:43:18,434 - DEBUG - 28334 }
 2020-01-20 15:43:18,434 - DEBUG - 28394 }
 2020-01-20 15:43:18,434 - DEBUG - 28446 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-strings-10
 2020-01-20 15:43:18,434 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 15:43:18,434 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 15:43:18,434 - DEBUG - 28479 }
 2020-01-20 15:43:18,434 - DEBUG - 28525 }
 2020-01-20 15:43:18,434 - DEBUG - 28640 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-numbers-1
 2020-01-20 15:43:18,434 - DEBUG -  Describe types of python numbers.
 2020-01-20 15:43:18,434 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 15:43:18,434 - DEBUG - 28673 }
 2020-01-20 15:43:18,434 - DEBUG - 28745 }
 2020-01-20 15:43:18,434 - DEBUG - 28893 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-numbers-2
 2020-01-20 15:43:18,434 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 15:43:18,434 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 15:43:18,434 - DEBUG - 28926 }
 2020-01-20 15:43:18,434 - DEBUG - 29001 }
 2020-01-20 15:43:18,434 - DEBUG - 29095 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-numbers-3
 2020-01-20 15:43:18,434 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 15:43:18,434 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 15:43:18,434 - DEBUG - 29128 }
 2020-01-20 15:43:18,434 - DEBUG - 29179 }
 2020-01-20 15:43:18,434 - DEBUG - 29201 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-numbers-4
 2020-01-20 15:43:18,434 - DEBUG -  How do the absolute value of a number?
 2020-01-20 15:43:18,434 - DEBUG -  abs(mynum)
 2020-01-20 15:43:18,434 - DEBUG - 29234 }
 2020-01-20 15:43:18,434 - DEBUG - 29284 }
 2020-01-20 15:43:18,434 - DEBUG - 29313 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-numbers-5
 2020-01-20 15:43:18,434 - DEBUG -  How do you raise a number to a power?
 2020-01-20 15:43:18,434 - DEBUG -  pow(power,number)
 2020-01-20 15:43:18,434 - DEBUG - 29346 }
 2020-01-20 15:43:18,434 - DEBUG - 29390 }
 2020-01-20 15:43:18,434 - DEBUG - 29426 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-numbers-6
 2020-01-20 15:43:18,434 - DEBUG -  How do you round a real number?
 2020-01-20 15:43:18,434 - DEBUG -  round(num,decimalplaces)
 2020-01-20 15:43:18,434 - DEBUG - 29459 }
 2020-01-20 15:43:18,434 - DEBUG - 29513 }
 2020-01-20 15:43:18,434 - DEBUG - 29681 }
 2020-01-20 15:43:18,434 - DEBUG - python-datatypes-numbers-7
 2020-01-20 15:43:18,434 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 15:43:18,434 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 15:43:18,434 - DEBUG - 29695 }
 2020-01-20 15:43:18,434 - DEBUG - 29768 }
 2020-01-20 15:43:18,434 - DEBUG - 29837 }
 2020-01-20 15:43:18,434 - DEBUG - uml-1
 2020-01-20 15:43:18,434 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 15:43:18,449 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 15:43:18,449 - DEBUG - 29848 }
 2020-01-20 15:43:18,449 - DEBUG - 29892 }
 2020-01-20 15:43:18,449 - DEBUG - 29989 }
 2020-01-20 15:43:18,449 - DEBUG - uml-2
 2020-01-20 15:43:18,449 - DEBUG -  What is an interaction diagram?
 2020-01-20 15:43:18,449 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 15:43:18,449 - DEBUG - 30000 }
 2020-01-20 15:43:18,449 - DEBUG - 30041 }
 2020-01-20 15:43:18,449 - DEBUG - 30351 }
 2020-01-20 15:43:18,449 - DEBUG - uml-3
 2020-01-20 15:43:18,449 - DEBUG -  What is a structure diagram?
 2020-01-20 15:43:18,449 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 15:43:18,449 - DEBUG - 30362 }
 2020-01-20 15:43:18,449 - DEBUG - 30402 }
 2020-01-20 15:43:18,449 - DEBUG - 30516 }
 2020-01-20 15:43:18,449 - DEBUG - uml-4
 2020-01-20 15:43:18,449 - DEBUG -  What is a behavior diagram?
 2020-01-20 15:43:18,449 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 15:43:18,449 - DEBUG - 30537 }
 2020-01-20 15:43:18,449 - DEBUG - 30588 }
 2020-01-20 15:43:18,449 - DEBUG - 30670 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-1
 2020-01-20 15:43:18,449 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 15:43:18,449 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 15:43:18,449 - DEBUG - 30690 }
 2020-01-20 15:43:18,449 - DEBUG - 30755 }
 2020-01-20 15:43:18,449 - DEBUG - 30815 }
 2020-01-20 15:43:18,449 - DEBUG - uml-behavior-1
 2020-01-20 15:43:18,449 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 15:43:18,449 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 15:43:18,449 - DEBUG - 30838 }
 2020-01-20 15:43:18,449 - DEBUG - 30895 }
 2020-01-20 15:43:18,449 - DEBUG - 30960 }
 2020-01-20 15:43:18,449 - DEBUG - uml-interaction-1
 2020-01-20 15:43:18,449 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 15:43:18,449 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 15:43:18,449 - DEBUG - 30971 }
 2020-01-20 15:43:18,449 - DEBUG - 31015 }
 2020-01-20 15:43:18,449 - DEBUG - 31049 }
 2020-01-20 15:43:18,449 - DEBUG - uml-2
 2020-01-20 15:43:18,449 - DEBUG -  How many uml digrams are there?
 2020-01-20 15:43:18,449 - DEBUG -  Around 14 give or take.
 2020-01-20 15:43:18,449 - DEBUG - 31070 }
 2020-01-20 15:43:18,449 - DEBUG - 31121 }
 2020-01-20 15:43:18,449 - DEBUG - 31369 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-2
 2020-01-20 15:43:18,449 - DEBUG -  Describe the structure Package diagram
 2020-01-20 15:43:18,449 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 15:43:18,449 - DEBUG - 31390 }
 2020-01-20 15:43:18,449 - DEBUG - 31440 }
 2020-01-20 15:43:18,449 - DEBUG - 31713 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-3
 2020-01-20 15:43:18,449 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 15:43:18,449 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 15:43:18,449 - DEBUG - 31734 }
 2020-01-20 15:43:18,449 - DEBUG - 31785 }
 2020-01-20 15:43:18,449 - DEBUG - 31919 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-4
 2020-01-20 15:43:18,449 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 15:43:18,449 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 15:43:18,449 - DEBUG - 31940 }
 2020-01-20 15:43:18,449 - DEBUG - 31994 }
 2020-01-20 15:43:18,449 - DEBUG - 32246 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-5
 2020-01-20 15:43:18,449 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 15:43:18,449 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 15:43:18,449 - DEBUG - 32267 }
 2020-01-20 15:43:18,449 - DEBUG - 32321 }
 2020-01-20 15:43:18,449 - DEBUG - 32658 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-6
 2020-01-20 15:43:18,449 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 15:43:18,449 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 15:43:18,449 - DEBUG - 32679 }
 2020-01-20 15:43:18,449 - DEBUG - 32736 }
 2020-01-20 15:43:18,449 - DEBUG - 32924 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-7
 2020-01-20 15:43:18,449 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 15:43:18,449 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 15:43:18,449 - DEBUG - 32945 }
 2020-01-20 15:43:18,449 - DEBUG - 33000 }
 2020-01-20 15:43:18,449 - DEBUG - 33308 }
 2020-01-20 15:43:18,449 - DEBUG - uml-structure-8
 2020-01-20 15:43:18,449 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 15:43:18,449 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 15:43:18,449 - DEBUG - 33328 }
 2020-01-20 15:43:18,449 - DEBUG - 33380 }
 2020-01-20 15:43:18,449 - DEBUG - 33546 }
 2020-01-20 15:43:18,449 - DEBUG - uml-behavior-1
 2020-01-20 15:43:18,449 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 15:43:18,449 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 15:43:18,449 - DEBUG - 33566 }
 2020-01-20 15:43:18,449 - DEBUG - 33618 }
 2020-01-20 15:43:18,449 - DEBUG - 33863 }
 2020-01-20 15:43:18,449 - DEBUG - uml-behavior-2
 2020-01-20 15:43:18,449 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 15:43:18,449 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 15:43:18,449 - DEBUG - 33883 }
 2020-01-20 15:43:18,449 - DEBUG - 33932 }
 2020-01-20 15:43:18,449 - DEBUG - 34238 }
 2020-01-20 15:43:18,465 - DEBUG - uml-behavior-3
 2020-01-20 15:43:18,465 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 15:43:18,465 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 15:43:18,465 - DEBUG - 34261 }
 2020-01-20 15:43:18,465 - DEBUG - 34316 }
 2020-01-20 15:43:18,465 - DEBUG - 34474 }
 2020-01-20 15:43:18,465 - DEBUG - uml-interaction-2
 2020-01-20 15:43:18,465 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 15:43:18,465 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 15:43:18,465 - DEBUG - 34497 }
 2020-01-20 15:43:18,465 - DEBUG - 34550 }
 2020-01-20 15:43:18,465 - DEBUG - 34800 }
 2020-01-20 15:43:18,465 - DEBUG - uml-interaction-3
 2020-01-20 15:43:18,465 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 15:43:18,465 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 15:43:18,465 - DEBUG - 34823 }
 2020-01-20 15:43:18,465 - DEBUG - 34884 }
 2020-01-20 15:43:18,465 - DEBUG - 35155 }
 2020-01-20 15:43:18,465 - DEBUG - uml-interaction-4
 2020-01-20 15:43:18,465 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 15:43:18,465 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 15:43:18,465 - DEBUG - 35178 }
 2020-01-20 15:43:18,465 - DEBUG - 35245 }
 2020-01-20 15:43:18,465 - DEBUG - 35403 }
 2020-01-20 15:43:18,465 - DEBUG - uml-interaction-5
 2020-01-20 15:43:18,465 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 15:43:18,465 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 15:43:18,465 - DEBUG - algo_cards
 2020-01-20 15:43:18,465 - DEBUG - box1
 2020-01-20 15:43:18,465 - DEBUG - algo_cards
 2020-01-20 15:43:18,465 - DEBUG - box1
 2020-01-20 15:43:18,465 - DEBUG - box2
 2020-01-20 15:43:18,465 - DEBUG - algo_cards
 2020-01-20 15:43:18,465 - DEBUG - box1
 2020-01-20 15:43:18,465 - DEBUG - box2
 2020-01-20 15:43:18,465 - DEBUG - box3
 2020-01-20 15:43:18,465 - DEBUG - algo_cards
 2020-01-20 15:43:18,465 - DEBUG - box1
 2020-01-20 15:43:18,465 - DEBUG - box2
 2020-01-20 15:43:18,465 - DEBUG - box3
 2020-01-20 15:43:18,465 - DEBUG - box4
 2020-01-20 15:43:18,465 - DEBUG - algo_cards
 2020-01-20 15:43:18,465 - DEBUG - box1
 2020-01-20 15:43:18,465 - DEBUG - box2
 2020-01-20 15:43:18,465 - DEBUG - box3
 2020-01-20 15:43:18,465 - DEBUG - box4
 2020-01-20 15:43:18,465 - DEBUG - box5
 2020-01-20 15:43:18,465 - DEBUG - algo_cards
 2020-01-20 15:43:18,465 - DEBUG - box1
 2020-01-20 15:43:18,465 - DEBUG - box2
 2020-01-20 15:43:18,465 - DEBUG - box3
 2020-01-20 15:43:18,465 - DEBUG - box4
 2020-01-20 15:43:18,465 - DEBUG - box5
 2020-01-20 15:43:18,465 - DEBUG - box6
 2020-01-20 15:43:18,465 - DEBUG - finding test cycle file
 2020-01-20 15:43:18,465 - DEBUG - quizs\
 2020-01-20 15:43:18,465 - DEBUG - algo_cards.txt
 2020-01-20 15:43:18,465 - DEBUG - box1.txt
 2020-01-20 15:43:18,465 - DEBUG - box2.txt
 2020-01-20 15:43:18,465 - DEBUG - box3.txt
 2020-01-20 15:43:18,465 - DEBUG - box4.txt
 2020-01-20 15:43:18,465 - DEBUG - box5.txt
 2020-01-20 15:43:18,465 - DEBUG - box6.txt
 2020-01-20 15:43:18,465 - DEBUG - data_struct_cards.txt
 2020-01-20 15:43:18,465 - DEBUG - oop_cards.txt
 2020-01-20 15:43:18,465 - DEBUG - python_cards.txt
 2020-01-20 15:43:18,465 - DEBUG - testcycle1.txt
 2020-01-20 15:43:18,465 - DEBUG - uml_cards.txt
 2020-01-20 15:43:18,465 - DEBUG - algo_cards
 2020-01-20 15:43:18,465 - DEBUG - box1
 2020-01-20 15:43:18,465 - DEBUG - box2
 2020-01-20 15:43:18,465 - DEBUG - box3
 2020-01-20 15:43:18,465 - DEBUG - box4
 2020-01-20 15:43:18,465 - DEBUG - box5
 2020-01-20 15:43:18,465 - DEBUG - box6
 2020-01-20 15:43:18,465 - DEBUG - data_struct_cards
 2020-01-20 15:43:18,465 - DEBUG - oop_cards
 2020-01-20 15:43:18,465 - DEBUG - python_cards
 2020-01-20 15:43:18,465 - DEBUG - testcycle1
 2020-01-20 15:43:18,465 - DEBUG - found testcycle1.txt
 2020-01-20 15:43:18,465 - DEBUG - testcycle1
 2020-01-20 15:43:18,465 - DEBUG - quizs\
 2020-01-20 15:43:18,465 - DEBUG - Starting new cycle number 1
 2020-01-20 15:43:18,465 - DEBUG - highestbox 1
 2020-01-20 15:43:18,481 - DEBUG - Loading box1 to box1
 2020-01-20 15:43:18,525 - DEBUG - Cycle number 2
 2020-01-20 22:13:13,979 - DEBUG - Start of Logging Leitner Module
 2020-01-20 22:13:13,979 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 22:13:13,979 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 22:13:13,979 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 22:13:13,979 - INFO - on things you get right.
 2020-01-20 22:13:14,041 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 22:13:14,041 - DEBUG - 15 }
 2020-01-20 22:13:14,041 - DEBUG - 57 }
 2020-01-20 22:13:14,041 - DEBUG - 225 }
 2020-01-20 22:13:14,041 - DEBUG - algorithm-1
 2020-01-20 22:13:14,041 - DEBUG -  What is algorithm efficiency?
 2020-01-20 22:13:14,041 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 22:13:14,041 - DEBUG - 242 }
 2020-01-20 22:13:14,041 - DEBUG - 324 }
 2020-01-20 22:13:14,041 - DEBUG - 403 }
 2020-01-20 22:13:14,041 - DEBUG - algorithm-2
 2020-01-20 22:13:14,041 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 22:13:14,041 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 22:13:14,041 - DEBUG - 420 }
 2020-01-20 22:13:14,041 - DEBUG - 502 }
 2020-01-20 22:13:14,041 - DEBUG - 531 }
 2020-01-20 22:13:14,041 - DEBUG - algorithm-3
 2020-01-20 22:13:14,041 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 22:13:14,041 - DEBUG -  Little O notation.
 2020-01-20 22:13:14,041 - DEBUG - 554 }
 2020-01-20 22:13:14,041 - DEBUG - 597 }
 2020-01-20 22:13:14,041 - DEBUG - 846 }
 2020-01-20 22:13:14,041 - DEBUG - alogorithm-bigo-1
 2020-01-20 22:13:14,041 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 22:13:14,041 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 22:13:14,041 - DEBUG - 868 }
 2020-01-20 22:13:14,041 - DEBUG - 911 }
 2020-01-20 22:13:14,041 - DEBUG - 1271 }
 2020-01-20 22:13:14,041 - DEBUG - algorithm-bigo-2
 2020-01-20 22:13:14,041 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 22:13:14,041 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 22:13:14,041 - DEBUG - 1293 }
 2020-01-20 22:13:14,041 - DEBUG - 1338 }
 2020-01-20 22:13:14,041 - DEBUG - 1581 }
 2020-01-20 22:13:14,041 - DEBUG - algorithm-bigo-3
 2020-01-20 22:13:14,041 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 22:13:14,041 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 22:13:14,041 - DEBUG - 1603 }
 2020-01-20 22:13:14,041 - DEBUG - 1650 }
 2020-01-20 22:13:14,057 - DEBUG - 1941 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-4
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 22:13:14,057 - DEBUG - 1963 }
 2020-01-20 22:13:14,057 - DEBUG - 2008 }
 2020-01-20 22:13:14,057 - DEBUG - 2088 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-5
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 22:13:14,057 - DEBUG - 2110 }
 2020-01-20 22:13:14,057 - DEBUG - 2155 }
 2020-01-20 22:13:14,057 - DEBUG - 2250 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-6
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 22:13:14,057 - DEBUG - 2272 }
 2020-01-20 22:13:14,057 - DEBUG - 2321 }
 2020-01-20 22:13:14,057 - DEBUG - 2517 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-7
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 22:13:14,057 - DEBUG - 2539 }
 2020-01-20 22:13:14,057 - DEBUG - 2606 }
 2020-01-20 22:13:14,057 - DEBUG - 2693 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-8
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 22:13:14,057 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 22:13:14,057 - DEBUG - 2715 }
 2020-01-20 22:13:14,057 - DEBUG - 2765 }
 2020-01-20 22:13:14,057 - DEBUG - 2893 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-9
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 22:13:14,057 - DEBUG - 2915 }
 2020-01-20 22:13:14,057 - DEBUG - 2959 }
 2020-01-20 22:13:14,057 - DEBUG - 3176 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-9
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 22:13:14,057 - DEBUG - 3199 }
 2020-01-20 22:13:14,057 - DEBUG - 3250 }
 2020-01-20 22:13:14,057 - DEBUG - 3415 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-10
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 22:13:14,057 - DEBUG - 3438 }
 2020-01-20 22:13:14,057 - DEBUG - 3493 }
 2020-01-20 22:13:14,057 - DEBUG - 3618 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-11
 2020-01-20 22:13:14,057 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 22:13:14,057 - DEBUG - 3641 }
 2020-01-20 22:13:14,057 - DEBUG - 3686 }
 2020-01-20 22:13:14,057 - DEBUG - 3838 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-12
 2020-01-20 22:13:14,057 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 22:13:14,057 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 22:13:14,057 - DEBUG - 3861 }
 2020-01-20 22:13:14,057 - DEBUG - 3916 }
 2020-01-20 22:13:14,057 - DEBUG - 4018 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-13
 2020-01-20 22:13:14,057 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 22:13:14,057 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 22:13:14,057 - DEBUG - 4041 }
 2020-01-20 22:13:14,057 - DEBUG - 4094 }
 2020-01-20 22:13:14,057 - DEBUG - 4229 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-14
 2020-01-20 22:13:14,057 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 22:13:14,057 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 22:13:14,057 - DEBUG - 4252 }
 2020-01-20 22:13:14,057 - DEBUG - 4299 }
 2020-01-20 22:13:14,057 - DEBUG - 4365 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-15
 2020-01-20 22:13:14,057 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 22:13:14,057 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 22:13:14,057 - DEBUG - 4388 }
 2020-01-20 22:13:14,057 - DEBUG - 4439 }
 2020-01-20 22:13:14,057 - DEBUG - 4545 }
 2020-01-20 22:13:14,057 - DEBUG - algorithm-bigo-16
 2020-01-20 22:13:14,057 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 22:13:14,057 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 22:13:14,057 - DEBUG - 4568 }
 2020-01-20 22:13:14,073 - DEBUG - 4613 }
 2020-01-20 22:13:14,073 - DEBUG - 4720 }
 2020-01-20 22:13:14,073 - DEBUG - algorithm-bigo-17
 2020-01-20 22:13:14,073 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 22:13:14,073 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 22:13:14,073 - DEBUG - 4742 }
 2020-01-20 22:13:14,073 - DEBUG - 4806 }
 2020-01-20 22:13:14,073 - DEBUG - 4927 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-1
 2020-01-20 22:13:14,073 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 22:13:14,073 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 22:13:14,073 - DEBUG - 4950 }
 2020-01-20 22:13:14,073 - DEBUG - 5021 }
 2020-01-20 22:13:14,073 - DEBUG - 5096 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-2
 2020-01-20 22:13:14,073 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 22:13:14,073 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 22:13:14,073 - DEBUG - 5119 }
 2020-01-20 22:13:14,073 - DEBUG - 5169 }
 2020-01-20 22:13:14,073 - DEBUG - 5250 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-3
 2020-01-20 22:13:14,073 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 22:13:14,073 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 22:13:14,073 - DEBUG - 5273 }
 2020-01-20 22:13:14,073 - DEBUG - 5344 }
 2020-01-20 22:13:14,073 - DEBUG - 5390 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-4
 2020-01-20 22:13:14,073 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 22:13:14,073 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 22:13:14,073 - DEBUG - 5413 }
 2020-01-20 22:13:14,073 - DEBUG - 5447 }
 2020-01-20 22:13:14,073 - DEBUG - 5479 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-5
 2020-01-20 22:13:14,073 - DEBUG -  List kinds of Queues.
 2020-01-20 22:13:14,073 - DEBUG -  Queue, Piority Queue.
 2020-01-20 22:13:14,073 - DEBUG - 5502 }
 2020-01-20 22:13:14,073 - DEBUG - 5553 }
 2020-01-20 22:13:14,073 - DEBUG - 5614 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-6
 2020-01-20 22:13:14,073 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 22:13:14,073 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 22:13:14,073 - DEBUG - 5637 }
 2020-01-20 22:13:14,073 - DEBUG - 5680 }
 2020-01-20 22:13:14,073 - DEBUG - 5746 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-7
 2020-01-20 22:13:14,073 - DEBUG -  List some main kinds of Trees.
 2020-01-20 22:13:14,073 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 22:13:14,073 - DEBUG - 5769 }
 2020-01-20 22:13:14,073 - DEBUG - 5829 }
 2020-01-20 22:13:14,073 - DEBUG - 5922 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-8
 2020-01-20 22:13:14,073 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 22:13:14,073 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 22:13:14,073 - DEBUG - 5945 }
 2020-01-20 22:13:14,073 - DEBUG - 6050 }
 2020-01-20 22:13:14,073 - DEBUG - 6359 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-9
 2020-01-20 22:13:14,073 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 22:13:14,073 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 22:13:14,073 - DEBUG - 6383 }
 2020-01-20 22:13:14,073 - DEBUG - 6428 }
 2020-01-20 22:13:14,073 - DEBUG - 6848 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-10
 2020-01-20 22:13:14,073 - DEBUG -  What is a linked data structure?
 2020-01-20 22:13:14,073 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 22:13:14,073 - DEBUG - 6872 }
 2020-01-20 22:13:14,073 - DEBUG - 6905 }
 2020-01-20 22:13:14,073 - DEBUG - 6937 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-11
 2020-01-20 22:13:14,073 - DEBUG -  List kinds of Graphs
 2020-01-20 22:13:14,073 - DEBUG -  Graph and Scene Graph
 2020-01-20 22:13:14,073 - DEBUG - 6961 }
 2020-01-20 22:13:14,073 - DEBUG - 6988 }
 2020-01-20 22:13:14,073 - DEBUG - 7456 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-12
 2020-01-20 22:13:14,073 - DEBUG -  Describe List.
 2020-01-20 22:13:14,073 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 22:13:14,073 - DEBUG - 7480 }
 2020-01-20 22:13:14,073 - DEBUG - 7511 }
 2020-01-20 22:13:14,073 - DEBUG - 7625 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-13
 2020-01-20 22:13:14,073 - DEBUG -  Describe a Vector.
 2020-01-20 22:13:14,073 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 22:13:14,073 - DEBUG - 7649 }
 2020-01-20 22:13:14,073 - DEBUG - 7675 }
 2020-01-20 22:13:14,073 - DEBUG - 7840 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-14
 2020-01-20 22:13:14,073 - DEBUG -  Describe Set.
 2020-01-20 22:13:14,073 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 22:13:14,073 - DEBUG - 7864 }
 2020-01-20 22:13:14,073 - DEBUG - 7894 }
 2020-01-20 22:13:14,073 - DEBUG - 8360 }
 2020-01-20 22:13:14,073 - DEBUG - data_structures-15
 2020-01-20 22:13:14,088 - DEBUG -  Describe a Stack.
 2020-01-20 22:13:14,088 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 22:13:14,088 - DEBUG - 8384 }
 2020-01-20 22:13:14,088 - DEBUG - 8414 }
 2020-01-20 22:13:14,088 - DEBUG - 8949 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-16
 2020-01-20 22:13:14,088 - DEBUG -  Describe a queue.
 2020-01-20 22:13:14,088 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 22:13:14,088 - DEBUG - 8973 }
 2020-01-20 22:13:14,088 - DEBUG - 9008 }
 2020-01-20 22:13:14,088 - DEBUG - 9456 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-17
 2020-01-20 22:13:14,088 - DEBUG -  Describe a Dictionary.
 2020-01-20 22:13:14,088 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 22:13:14,088 - DEBUG - 9480 }
 2020-01-20 22:13:14,088 - DEBUG - 9525 }
 2020-01-20 22:13:14,088 - DEBUG - 10271 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-18
 2020-01-20 22:13:14,088 - DEBUG -  Describe a Tree data structures.
 2020-01-20 22:13:14,088 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 22:13:14,088 - DEBUG - 10295 }
 2020-01-20 22:13:14,088 - DEBUG - 10325 }
 2020-01-20 22:13:14,088 - DEBUG - 10932 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-19
 2020-01-20 22:13:14,088 - DEBUG -  Describe a Graph.
 2020-01-20 22:13:14,088 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 22:13:14,088 - DEBUG - 10960 }
 2020-01-20 22:13:14,088 - DEBUG - 11042 }
 2020-01-20 22:13:14,088 - DEBUG - 11361 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-java-1
 2020-01-20 22:13:14,088 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 22:13:14,088 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 22:13:14,088 - DEBUG - 11389 }
 2020-01-20 22:13:14,088 - DEBUG - 11460 }
 2020-01-20 22:13:14,088 - DEBUG - 11641 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-java-2
 2020-01-20 22:13:14,088 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 22:13:14,088 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 22:13:14,088 - DEBUG - 11669 }
 2020-01-20 22:13:14,088 - DEBUG - 11714 }
 2020-01-20 22:13:14,088 - DEBUG - 11877 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-java-3
 2020-01-20 22:13:14,088 - DEBUG -  Describe java boolean primitive.
 2020-01-20 22:13:14,088 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 22:13:14,088 - DEBUG - 11905 }
 2020-01-20 22:13:14,088 - DEBUG - 11943 }
 2020-01-20 22:13:14,088 - DEBUG - 12272 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-java-4
 2020-01-20 22:13:14,088 - DEBUG -  Describe java references.
 2020-01-20 22:13:14,088 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 22:13:14,088 - DEBUG - 12296 }
 2020-01-20 22:13:14,088 - DEBUG - 12375 }
 2020-01-20 22:13:14,088 - DEBUG - 12458 }
 2020-01-20 22:13:14,088 - DEBUG - data_structures-20
 2020-01-20 22:13:14,088 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 22:13:14,088 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 22:13:14,088 - DEBUG - 12492 }
 2020-01-20 22:13:14,088 - DEBUG - 12532 }
 2020-01-20 22:13:14,104 - DEBUG - 12826 }
 2020-01-20 22:13:14,104 - DEBUG - data_structures-javascript-1
 2020-01-20 22:13:14,104 - DEBUG -  Name JavaScript primitives.
 2020-01-20 22:13:14,104 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 22:13:14,104 - DEBUG - 12850 }
 2020-01-20 22:13:14,104 - DEBUG - 12956 }
 2020-01-20 22:13:14,104 - DEBUG - 13123 }
 2020-01-20 22:13:14,104 - DEBUG - data_structures-21
 2020-01-20 22:13:14,104 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 22:13:14,104 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 22:13:14,104 - DEBUG - 13153 }
 2020-01-20 22:13:14,104 - DEBUG - 13189 }
 2020-01-20 22:13:14,104 - DEBUG - 13247 }
 2020-01-20 22:13:14,104 - DEBUG - data_structures-python-1
 2020-01-20 22:13:14,104 - DEBUG -  List python primitives.
 2020-01-20 22:13:14,104 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 22:13:14,104 - DEBUG - 13277 }
 2020-01-20 22:13:14,104 - DEBUG - 13309 }
 2020-01-20 22:13:14,104 - DEBUG - 13422 }
 2020-01-20 22:13:14,104 - DEBUG - data_structures-csharp-1
 2020-01-20 22:13:14,104 - DEBUG -  List c# primitives.
 2020-01-20 22:13:14,104 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 22:13:14,104 - DEBUG - 13434 }
 2020-01-20 22:13:14,104 - DEBUG - 13477 }
 2020-01-20 22:13:14,104 - DEBUG - 13821 }
 2020-01-20 22:13:14,104 - DEBUG - oop-1
 2020-01-20 22:13:14,104 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 22:13:14,104 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 22:13:14,104 - DEBUG - 13832 }
 2020-01-20 22:13:14,104 - DEBUG - 13899 }
 2020-01-20 22:13:14,104 - DEBUG - 13965 }
 2020-01-20 22:13:14,104 - DEBUG - oop-2
 2020-01-20 22:13:14,104 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 22:13:14,104 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 22:13:14,104 - DEBUG - 13976 }
 2020-01-20 22:13:14,104 - DEBUG - 14039 }
 2020-01-20 22:13:14,104 - DEBUG - 14084 }
 2020-01-20 22:13:14,104 - DEBUG - oop-3
 2020-01-20 22:13:14,104 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 22:13:14,104 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 22:13:14,104 - DEBUG - 14095 }
 2020-01-20 22:13:14,104 - DEBUG - 14149 }
 2020-01-20 22:13:14,104 - DEBUG - 14406 }
 2020-01-20 22:13:14,104 - DEBUG - oop-4
 2020-01-20 22:13:14,104 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 22:13:14,104 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 22:13:14,104 - DEBUG - 14417 }
 2020-01-20 22:13:14,104 - DEBUG - 14471 }
 2020-01-20 22:13:14,104 - DEBUG - 14834 }
 2020-01-20 22:13:14,104 - DEBUG - oop-5
 2020-01-20 22:13:14,104 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 22:13:14,104 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 22:13:14,104 - DEBUG - 14845 }
 2020-01-20 22:13:14,104 - DEBUG - 14899 }
 2020-01-20 22:13:14,104 - DEBUG - 15220 }
 2020-01-20 22:13:14,104 - DEBUG - oop-6
 2020-01-20 22:13:14,104 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 22:13:14,104 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 22:13:14,104 - DEBUG - 15242 }
 2020-01-20 22:13:14,104 - DEBUG - 15294 }
 2020-01-20 22:13:14,104 - DEBUG - 15369 }
 2020-01-20 22:13:14,104 - DEBUG - oop-creational-1
 2020-01-20 22:13:14,104 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 22:13:14,104 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 22:13:14,104 - DEBUG - 15391 }
 2020-01-20 22:13:14,104 - DEBUG - 15444 }
 2020-01-20 22:13:14,104 - DEBUG - 15583 }
 2020-01-20 22:13:14,104 - DEBUG - oop-behavioral-1
 2020-01-20 22:13:14,104 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 22:13:14,104 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 22:13:14,104 - DEBUG - 15605 }
 2020-01-20 22:13:14,119 - DEBUG - 15657 }
 2020-01-20 22:13:14,119 - DEBUG - 15733 }
 2020-01-20 22:13:14,119 - DEBUG - oop-structural-1
 2020-01-20 22:13:14,119 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 22:13:14,119 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 22:13:14,119 - DEBUG - 15755 }
 2020-01-20 22:13:14,119 - DEBUG - 15842 }
 2020-01-20 22:13:14,119 - DEBUG - 15882 }
 2020-01-20 22:13:14,119 - DEBUG - oop-structural-2
 2020-01-20 22:13:14,119 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 22:13:14,119 - DEBUG -  Model View Controller or MVC.
 2020-01-20 22:13:14,119 - DEBUG - 15904 }
 2020-01-20 22:13:14,119 - DEBUG - 15938 }
 2020-01-20 22:13:14,119 - DEBUG - 16451 }
 2020-01-20 22:13:14,119 - DEBUG - oop-structural-3
 2020-01-20 22:13:14,119 - DEBUG -  Describe MVC pattern.
 2020-01-20 22:13:14,119 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 22:13:14,119 - DEBUG - 16473 }
 2020-01-20 22:13:14,119 - DEBUG - 16513 }
 2020-01-20 22:13:14,119 - DEBUG - 16769 }
 2020-01-20 22:13:14,119 - DEBUG - oop-creational-2
 2020-01-20 22:13:14,119 - DEBUG -  What is the Factory Method?
 2020-01-20 22:13:14,119 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 22:13:14,119 - DEBUG - 16791 }
 2020-01-20 22:13:14,119 - DEBUG - 16822 }
 2020-01-20 22:13:14,119 - DEBUG - 17062 }
 2020-01-20 22:13:14,119 - DEBUG - oop-creational-3
 2020-01-20 22:13:14,119 - DEBUG -  What is Prototype?
 2020-01-20 22:13:14,119 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 22:13:14,119 - DEBUG - 17084 }
 2020-01-20 22:13:14,119 - DEBUG - 17115 }
 2020-01-20 22:13:14,119 - DEBUG - 17404 }
 2020-01-20 22:13:14,119 - DEBUG - oop-creational-4
 2020-01-20 22:13:14,119 - DEBUG -  What is Singleton?
 2020-01-20 22:13:14,119 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 22:13:14,119 - DEBUG - 17426 }
 2020-01-20 22:13:14,119 - DEBUG - 17464 }
 2020-01-20 22:13:14,119 - DEBUG - 18097 }
 2020-01-20 22:13:14,119 - DEBUG - oop-creational-5
 2020-01-20 22:13:14,119 - DEBUG -  What is Abstract Factory?
 2020-01-20 22:13:14,119 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 22:13:14,119 - DEBUG - 18119 }
 2020-01-20 22:13:14,119 - DEBUG - 18174 }
 2020-01-20 22:13:14,119 - DEBUG - 18512 }
 2020-01-20 22:13:14,119 - DEBUG - oop-creational-6
 2020-01-20 22:13:14,119 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 22:13:14,119 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 22:13:14,119 - DEBUG - 18534 }
 2020-01-20 22:13:14,135 - DEBUG - 18597 }
 2020-01-20 22:13:14,135 - DEBUG - 18869 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-2
 2020-01-20 22:13:14,135 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 22:13:14,135 - DEBUG - 18891 }
 2020-01-20 22:13:14,135 - DEBUG - 18947 }
 2020-01-20 22:13:14,135 - DEBUG - 19298 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-3
 2020-01-20 22:13:14,135 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 22:13:14,135 - DEBUG - 19320 }
 2020-01-20 22:13:14,135 - DEBUG - 19379 }
 2020-01-20 22:13:14,135 - DEBUG - 19657 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-4
 2020-01-20 22:13:14,135 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 22:13:14,135 - DEBUG - 19679 }
 2020-01-20 22:13:14,135 - DEBUG - 19734 }
 2020-01-20 22:13:14,135 - DEBUG - 20104 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-5
 2020-01-20 22:13:14,135 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 22:13:14,135 - DEBUG - 20126 }
 2020-01-20 22:13:14,135 - DEBUG - 20182 }
 2020-01-20 22:13:14,135 - DEBUG - 20562 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-6
 2020-01-20 22:13:14,135 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 22:13:14,135 - DEBUG - 20584 }
 2020-01-20 22:13:14,135 - DEBUG - 20637 }
 2020-01-20 22:13:14,135 - DEBUG - 20945 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-7
 2020-01-20 22:13:14,135 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 22:13:14,135 - DEBUG - 20967 }
 2020-01-20 22:13:14,135 - DEBUG - 21023 }
 2020-01-20 22:13:14,135 - DEBUG - 21457 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-8
 2020-01-20 22:13:14,135 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 22:13:14,135 - DEBUG - 21479 }
 2020-01-20 22:13:14,135 - DEBUG - 21535 }
 2020-01-20 22:13:14,135 - DEBUG - 21801 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-9
 2020-01-20 22:13:14,135 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 22:13:14,135 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 22:13:14,135 - DEBUG - 21824 }
 2020-01-20 22:13:14,135 - DEBUG - 21894 }
 2020-01-20 22:13:14,135 - DEBUG - 22311 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-10
 2020-01-20 22:13:14,135 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 22:13:14,135 - DEBUG - 22334 }
 2020-01-20 22:13:14,135 - DEBUG - 22393 }
 2020-01-20 22:13:14,135 - DEBUG - 22719 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-11
 2020-01-20 22:13:14,135 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 22:13:14,135 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 22:13:14,135 - DEBUG - 22742 }
 2020-01-20 22:13:14,135 - DEBUG - 22801 }
 2020-01-20 22:13:14,135 - DEBUG - 23266 }
 2020-01-20 22:13:14,135 - DEBUG - oop-behavioral-12
 2020-01-20 22:13:14,135 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 22:13:14,135 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 22:13:14,135 - DEBUG - 23288 }
 2020-01-20 22:13:14,135 - DEBUG - 23343 }
 2020-01-20 22:13:14,151 - DEBUG - 23656 }
 2020-01-20 22:13:14,151 - DEBUG - oop-structural-4
 2020-01-20 22:13:14,151 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 22:13:14,151 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 22:13:14,151 - DEBUG - 23678 }
 2020-01-20 22:13:14,151 - DEBUG - 23735 }
 2020-01-20 22:13:14,151 - DEBUG - 24091 }
 2020-01-20 22:13:14,151 - DEBUG - oop-structural-5
 2020-01-20 22:13:14,151 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 22:13:14,151 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 22:13:14,151 - DEBUG - 24113 }
 2020-01-20 22:13:14,151 - DEBUG - 24170 }
 2020-01-20 22:13:14,151 - DEBUG - 24554 }
 2020-01-20 22:13:14,151 - DEBUG - oop-structural-6
 2020-01-20 22:13:14,151 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 22:13:14,151 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 22:13:14,151 - DEBUG - 24576 }
 2020-01-20 22:13:14,151 - DEBUG - 24629 }
 2020-01-20 22:13:14,151 - DEBUG - 24995 }
 2020-01-20 22:13:14,151 - DEBUG - oop-structural-7
 2020-01-20 22:13:14,151 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 22:13:14,151 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 22:13:14,151 - DEBUG - 25017 }
 2020-01-20 22:13:14,151 - DEBUG - 25071 }
 2020-01-20 22:13:14,151 - DEBUG - 25501 }
 2020-01-20 22:13:14,151 - DEBUG - oop-structural-8
 2020-01-20 22:13:14,151 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 22:13:14,151 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 22:13:14,151 - DEBUG - 25523 }
 2020-01-20 22:13:14,151 - DEBUG - 25580 }
 2020-01-20 22:13:14,151 - DEBUG - 26139 }
 2020-01-20 22:13:14,151 - DEBUG - oop-structural-9
 2020-01-20 22:13:14,151 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 22:13:14,151 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 22:13:14,151 - DEBUG - 26162 }
 2020-01-20 22:13:14,151 - DEBUG - 26216 }
 2020-01-20 22:13:14,151 - DEBUG - 26748 }
 2020-01-20 22:13:14,151 - DEBUG - oop-structural-10
 2020-01-20 22:13:14,151 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 22:13:14,151 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 22:13:14,151 - DEBUG - 26782 }
 2020-01-20 22:13:14,151 - DEBUG - 26838 }
 2020-01-20 22:13:14,151 - DEBUG - 26980 }
 2020-01-20 22:13:14,151 - DEBUG - python-datatypes-strings-1
 2020-01-20 22:13:14,166 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 22:13:14,166 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 22:13:14,166 - DEBUG - 27013 }
 2020-01-20 22:13:14,166 - DEBUG - 27073 }
 2020-01-20 22:13:14,166 - DEBUG - 27141 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-2
 2020-01-20 22:13:14,166 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 22:13:14,166 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 22:13:14,166 - DEBUG - 27174 }
 2020-01-20 22:13:14,166 - DEBUG - 27247 }
 2020-01-20 22:13:14,166 - DEBUG - 27409 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-3
 2020-01-20 22:13:14,166 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 22:13:14,166 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 22:13:14,166 - DEBUG - 27442 }
 2020-01-20 22:13:14,166 - DEBUG - 27502 }
 2020-01-20 22:13:14,166 - DEBUG - 27600 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-4
 2020-01-20 22:13:14,166 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 22:13:14,166 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 22:13:14,166 - DEBUG - 27634 }
 2020-01-20 22:13:14,166 - DEBUG - 27685 }
 2020-01-20 22:13:14,166 - DEBUG - 27715 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-5
 2020-01-20 22:13:14,166 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 22:13:14,166 - DEBUG -  len(mystring) is 5
 2020-01-20 22:13:14,166 - DEBUG - 27748 }
 2020-01-20 22:13:14,166 - DEBUG - 27790 }
 2020-01-20 22:13:14,166 - DEBUG - 27877 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-6
 2020-01-20 22:13:14,166 - DEBUG -  How do you merge two strings?
 2020-01-20 22:13:14,166 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 22:13:14,166 - DEBUG - 27912 }
 2020-01-20 22:13:14,166 - DEBUG - 27961 }
 2020-01-20 22:13:14,166 - DEBUG - 28039 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-7
 2020-01-20 22:13:14,166 - DEBUG -  How do you use a number in a string?
 2020-01-20 22:13:14,166 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 22:13:14,166 - DEBUG - 28074 }
 2020-01-20 22:13:14,166 - DEBUG - 28153 }
 2020-01-20 22:13:14,166 - DEBUG - 28184 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-8
 2020-01-20 22:13:14,166 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 22:13:14,166 - DEBUG -  mystring.split(',')
 2020-01-20 22:13:14,166 - DEBUG - 28217 }
 2020-01-20 22:13:14,166 - DEBUG - 28272 }
 2020-01-20 22:13:14,166 - DEBUG - 28300 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-9
 2020-01-20 22:13:14,166 - DEBUG -  How do you trim white space from a string?
 2020-01-20 22:13:14,166 - DEBUG -  mystring.strip()
 2020-01-20 22:13:14,166 - DEBUG - 28334 }
 2020-01-20 22:13:14,166 - DEBUG - 28394 }
 2020-01-20 22:13:14,166 - DEBUG - 28446 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-strings-10
 2020-01-20 22:13:14,166 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 22:13:14,166 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 22:13:14,166 - DEBUG - 28479 }
 2020-01-20 22:13:14,166 - DEBUG - 28525 }
 2020-01-20 22:13:14,166 - DEBUG - 28640 }
 2020-01-20 22:13:14,166 - DEBUG - python-datatypes-numbers-1
 2020-01-20 22:13:14,166 - DEBUG -  Describe types of python numbers.
 2020-01-20 22:13:14,166 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 22:13:14,166 - DEBUG - 28673 }
 2020-01-20 22:13:14,166 - DEBUG - 28745 }
 2020-01-20 22:13:14,166 - DEBUG - 28893 }
 2020-01-20 22:13:14,182 - DEBUG - python-datatypes-numbers-2
 2020-01-20 22:13:14,182 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 22:13:14,182 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 22:13:14,182 - DEBUG - 28926 }
 2020-01-20 22:13:14,182 - DEBUG - 29001 }
 2020-01-20 22:13:14,182 - DEBUG - 29095 }
 2020-01-20 22:13:14,182 - DEBUG - python-datatypes-numbers-3
 2020-01-20 22:13:14,182 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 22:13:14,182 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 22:13:14,182 - DEBUG - 29128 }
 2020-01-20 22:13:14,182 - DEBUG - 29179 }
 2020-01-20 22:13:14,182 - DEBUG - 29201 }
 2020-01-20 22:13:14,182 - DEBUG - python-datatypes-numbers-4
 2020-01-20 22:13:14,182 - DEBUG -  How do the absolute value of a number?
 2020-01-20 22:13:14,182 - DEBUG -  abs(mynum)
 2020-01-20 22:13:14,182 - DEBUG - 29234 }
 2020-01-20 22:13:14,182 - DEBUG - 29284 }
 2020-01-20 22:13:14,182 - DEBUG - 29313 }
 2020-01-20 22:13:14,182 - DEBUG - python-datatypes-numbers-5
 2020-01-20 22:13:14,182 - DEBUG -  How do you raise a number to a power?
 2020-01-20 22:13:14,182 - DEBUG -  pow(power,number)
 2020-01-20 22:13:14,182 - DEBUG - 29346 }
 2020-01-20 22:13:14,182 - DEBUG - 29390 }
 2020-01-20 22:13:14,182 - DEBUG - 29426 }
 2020-01-20 22:13:14,182 - DEBUG - python-datatypes-numbers-6
 2020-01-20 22:13:14,182 - DEBUG -  How do you round a real number?
 2020-01-20 22:13:14,182 - DEBUG -  round(num,decimalplaces)
 2020-01-20 22:13:14,182 - DEBUG - 29459 }
 2020-01-20 22:13:14,182 - DEBUG - 29513 }
 2020-01-20 22:13:14,182 - DEBUG - 29681 }
 2020-01-20 22:13:14,182 - DEBUG - python-datatypes-numbers-7
 2020-01-20 22:13:14,182 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 22:13:14,182 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 22:13:14,182 - DEBUG - 29695 }
 2020-01-20 22:13:14,182 - DEBUG - 29768 }
 2020-01-20 22:13:14,182 - DEBUG - 29837 }
 2020-01-20 22:13:14,182 - DEBUG - uml-1
 2020-01-20 22:13:14,182 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 22:13:14,182 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 22:13:14,182 - DEBUG - 29848 }
 2020-01-20 22:13:14,182 - DEBUG - 29892 }
 2020-01-20 22:13:14,182 - DEBUG - 29989 }
 2020-01-20 22:13:14,182 - DEBUG - uml-2
 2020-01-20 22:13:14,182 - DEBUG -  What is an interaction diagram?
 2020-01-20 22:13:14,182 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 22:13:14,182 - DEBUG - 30000 }
 2020-01-20 22:13:14,182 - DEBUG - 30041 }
 2020-01-20 22:13:14,182 - DEBUG - 30351 }
 2020-01-20 22:13:14,182 - DEBUG - uml-3
 2020-01-20 22:13:14,182 - DEBUG -  What is a structure diagram?
 2020-01-20 22:13:14,182 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 22:13:14,182 - DEBUG - 30362 }
 2020-01-20 22:13:14,182 - DEBUG - 30402 }
 2020-01-20 22:13:14,182 - DEBUG - 30516 }
 2020-01-20 22:13:14,182 - DEBUG - uml-4
 2020-01-20 22:13:14,182 - DEBUG -  What is a behavior diagram?
 2020-01-20 22:13:14,182 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 22:13:14,182 - DEBUG - 30537 }
 2020-01-20 22:13:14,182 - DEBUG - 30588 }
 2020-01-20 22:13:14,182 - DEBUG - 30670 }
 2020-01-20 22:13:14,182 - DEBUG - uml-structure-1
 2020-01-20 22:13:14,182 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 22:13:14,182 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 22:13:14,182 - DEBUG - 30690 }
 2020-01-20 22:13:14,182 - DEBUG - 30755 }
 2020-01-20 22:13:14,182 - DEBUG - 30815 }
 2020-01-20 22:13:14,182 - DEBUG - uml-behavior-1
 2020-01-20 22:13:14,198 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 22:13:14,198 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 22:13:14,198 - DEBUG - 30838 }
 2020-01-20 22:13:14,198 - DEBUG - 30895 }
 2020-01-20 22:13:14,198 - DEBUG - 30960 }
 2020-01-20 22:13:14,198 - DEBUG - uml-interaction-1
 2020-01-20 22:13:14,198 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 22:13:14,198 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 22:13:14,198 - DEBUG - 30971 }
 2020-01-20 22:13:14,198 - DEBUG - 31015 }
 2020-01-20 22:13:14,198 - DEBUG - 31049 }
 2020-01-20 22:13:14,198 - DEBUG - uml-2
 2020-01-20 22:13:14,198 - DEBUG -  How many uml digrams are there?
 2020-01-20 22:13:14,198 - DEBUG -  Around 14 give or take.
 2020-01-20 22:13:14,198 - DEBUG - 31070 }
 2020-01-20 22:13:14,198 - DEBUG - 31121 }
 2020-01-20 22:13:14,198 - DEBUG - 31369 }
 2020-01-20 22:13:14,198 - DEBUG - uml-structure-2
 2020-01-20 22:13:14,198 - DEBUG -  Describe the structure Package diagram
 2020-01-20 22:13:14,198 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 22:13:14,198 - DEBUG - 31390 }
 2020-01-20 22:13:14,198 - DEBUG - 31440 }
 2020-01-20 22:13:14,198 - DEBUG - 31713 }
 2020-01-20 22:13:14,198 - DEBUG - uml-structure-3
 2020-01-20 22:13:14,198 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 22:13:14,198 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 22:13:14,198 - DEBUG - 31734 }
 2020-01-20 22:13:14,198 - DEBUG - 31785 }
 2020-01-20 22:13:14,198 - DEBUG - 31919 }
 2020-01-20 22:13:14,198 - DEBUG - uml-structure-4
 2020-01-20 22:13:14,198 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 22:13:14,198 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 22:13:14,198 - DEBUG - 31940 }
 2020-01-20 22:13:14,198 - DEBUG - 31994 }
 2020-01-20 22:13:14,198 - DEBUG - 32246 }
 2020-01-20 22:13:14,198 - DEBUG - uml-structure-5
 2020-01-20 22:13:14,198 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 22:13:14,198 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 22:13:14,198 - DEBUG - 32267 }
 2020-01-20 22:13:14,198 - DEBUG - 32321 }
 2020-01-20 22:13:14,198 - DEBUG - 32658 }
 2020-01-20 22:13:14,198 - DEBUG - uml-structure-6
 2020-01-20 22:13:14,198 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 22:13:14,198 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 22:13:14,198 - DEBUG - 32679 }
 2020-01-20 22:13:14,198 - DEBUG - 32736 }
 2020-01-20 22:13:14,198 - DEBUG - 32924 }
 2020-01-20 22:13:14,198 - DEBUG - uml-structure-7
 2020-01-20 22:13:14,198 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 22:13:14,198 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 22:13:14,198 - DEBUG - 32945 }
 2020-01-20 22:13:14,198 - DEBUG - 33000 }
 2020-01-20 22:13:14,198 - DEBUG - 33308 }
 2020-01-20 22:13:14,198 - DEBUG - uml-structure-8
 2020-01-20 22:13:14,198 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 22:13:14,198 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 22:13:14,198 - DEBUG - 33328 }
 2020-01-20 22:13:14,198 - DEBUG - 33380 }
 2020-01-20 22:13:14,213 - DEBUG - 33546 }
 2020-01-20 22:13:14,213 - DEBUG - uml-behavior-1
 2020-01-20 22:13:14,213 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 22:13:14,213 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 22:13:14,213 - DEBUG - 33566 }
 2020-01-20 22:13:14,213 - DEBUG - 33618 }
 2020-01-20 22:13:14,213 - DEBUG - 33863 }
 2020-01-20 22:13:14,213 - DEBUG - uml-behavior-2
 2020-01-20 22:13:14,213 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 22:13:14,213 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 22:13:14,213 - DEBUG - 33883 }
 2020-01-20 22:13:14,213 - DEBUG - 33932 }
 2020-01-20 22:13:14,213 - DEBUG - 34238 }
 2020-01-20 22:13:14,213 - DEBUG - uml-behavior-3
 2020-01-20 22:13:14,213 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 22:13:14,213 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 22:13:14,213 - DEBUG - 34261 }
 2020-01-20 22:13:14,213 - DEBUG - 34316 }
 2020-01-20 22:13:14,213 - DEBUG - 34474 }
 2020-01-20 22:13:14,213 - DEBUG - uml-interaction-2
 2020-01-20 22:13:14,213 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 22:13:14,213 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 22:13:14,213 - DEBUG - 34497 }
 2020-01-20 22:13:14,213 - DEBUG - 34550 }
 2020-01-20 22:13:14,213 - DEBUG - 34800 }
 2020-01-20 22:13:14,213 - DEBUG - uml-interaction-3
 2020-01-20 22:13:14,213 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 22:13:14,213 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 22:13:14,213 - DEBUG - 34823 }
 2020-01-20 22:13:14,213 - DEBUG - 34884 }
 2020-01-20 22:13:14,213 - DEBUG - 35155 }
 2020-01-20 22:13:14,213 - DEBUG - uml-interaction-4
 2020-01-20 22:13:14,213 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 22:13:14,213 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 22:13:14,213 - DEBUG - 35178 }
 2020-01-20 22:13:14,213 - DEBUG - 35245 }
 2020-01-20 22:13:14,213 - DEBUG - 35403 }
 2020-01-20 22:13:14,213 - DEBUG - uml-interaction-5
 2020-01-20 22:13:14,213 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 22:13:14,213 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 22:13:14,213 - DEBUG - algo_cards
 2020-01-20 22:13:14,213 - DEBUG - box1
 2020-01-20 22:13:14,213 - DEBUG - algo_cards
 2020-01-20 22:13:14,213 - DEBUG - box1
 2020-01-20 22:13:14,213 - DEBUG - box2
 2020-01-20 22:13:14,213 - DEBUG - algo_cards
 2020-01-20 22:13:14,213 - DEBUG - box1
 2020-01-20 22:13:14,213 - DEBUG - box2
 2020-01-20 22:13:14,213 - DEBUG - box3
 2020-01-20 22:13:14,213 - DEBUG - algo_cards
 2020-01-20 22:13:14,213 - DEBUG - box1
 2020-01-20 22:13:14,213 - DEBUG - box2
 2020-01-20 22:13:14,213 - DEBUG - box3
 2020-01-20 22:13:14,213 - DEBUG - box4
 2020-01-20 22:13:14,213 - DEBUG - algo_cards
 2020-01-20 22:13:14,213 - DEBUG - box1
 2020-01-20 22:13:14,213 - DEBUG - box2
 2020-01-20 22:13:14,213 - DEBUG - box3
 2020-01-20 22:13:14,213 - DEBUG - box4
 2020-01-20 22:13:14,213 - DEBUG - box5
 2020-01-20 22:13:14,213 - DEBUG - algo_cards
 2020-01-20 22:13:14,213 - DEBUG - box1
 2020-01-20 22:13:14,213 - DEBUG - box2
 2020-01-20 22:13:14,213 - DEBUG - box3
 2020-01-20 22:13:14,213 - DEBUG - box4
 2020-01-20 22:13:14,213 - DEBUG - box5
 2020-01-20 22:13:14,213 - DEBUG - box6
 2020-01-20 22:13:14,213 - DEBUG - finding test cycle file
 2020-01-20 22:13:14,213 - DEBUG - quizs\
 2020-01-20 22:13:14,213 - DEBUG - algo_cards.txt
 2020-01-20 22:13:14,213 - DEBUG - box1.txt
 2020-01-20 22:13:14,213 - DEBUG - box2.txt
 2020-01-20 22:13:14,213 - DEBUG - box3.txt
 2020-01-20 22:13:14,213 - DEBUG - box4.txt
 2020-01-20 22:13:14,229 - DEBUG - box5.txt
 2020-01-20 22:13:14,229 - DEBUG - box6.txt
 2020-01-20 22:13:14,229 - DEBUG - data_struct_cards.txt
 2020-01-20 22:13:14,229 - DEBUG - oop_cards.txt
 2020-01-20 22:13:14,229 - DEBUG - python_cards.txt
 2020-01-20 22:13:14,229 - DEBUG - testcycle1.txt
 2020-01-20 22:13:14,229 - DEBUG - uml_cards.txt
 2020-01-20 22:13:14,229 - DEBUG - algo_cards
 2020-01-20 22:13:14,229 - DEBUG - box1
 2020-01-20 22:13:14,229 - DEBUG - box2
 2020-01-20 22:13:14,229 - DEBUG - box3
 2020-01-20 22:13:14,229 - DEBUG - box4
 2020-01-20 22:13:14,229 - DEBUG - box5
 2020-01-20 22:13:14,229 - DEBUG - box6
 2020-01-20 22:13:14,229 - DEBUG - data_struct_cards
 2020-01-20 22:13:14,229 - DEBUG - oop_cards
 2020-01-20 22:13:14,229 - DEBUG - python_cards
 2020-01-20 22:13:14,229 - DEBUG - testcycle1
 2020-01-20 22:13:14,229 - DEBUG - found testcycle1.txt
 2020-01-20 22:13:14,229 - DEBUG - testcycle1
 2020-01-20 22:13:14,229 - DEBUG - quizs\
 2020-01-20 22:13:14,229 - DEBUG - Starting new cycle number 1
 2020-01-20 22:13:14,229 - DEBUG - highestbox 1
 2020-01-20 22:13:14,229 - DEBUG - Loading box1 to box1
 2020-01-20 22:13:14,294 - DEBUG - Cycle number 2
 2020-01-20 22:19:32,504 - DEBUG - Start of Logging Leitner Module
 2020-01-20 22:19:32,504 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 22:19:32,504 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 22:19:32,504 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 22:19:32,504 - INFO - on things you get right.
 2020-01-20 22:19:32,551 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 22:19:32,553 - DEBUG - 15 }
 2020-01-20 22:19:32,553 - DEBUG - 57 }
 2020-01-20 22:19:32,553 - DEBUG - 225 }
 2020-01-20 22:19:32,553 - DEBUG - algorithm-1
 2020-01-20 22:19:32,553 - DEBUG -  What is algorithm efficiency?
 2020-01-20 22:19:32,554 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 22:19:32,554 - DEBUG - 242 }
 2020-01-20 22:19:32,554 - DEBUG - 324 }
 2020-01-20 22:19:32,554 - DEBUG - 403 }
 2020-01-20 22:19:32,554 - DEBUG - algorithm-2
 2020-01-20 22:19:32,554 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 22:19:32,554 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 22:19:32,555 - DEBUG - 420 }
 2020-01-20 22:19:32,555 - DEBUG - 502 }
 2020-01-20 22:19:32,555 - DEBUG - 531 }
 2020-01-20 22:19:32,555 - DEBUG - algorithm-3
 2020-01-20 22:19:32,555 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 22:19:32,555 - DEBUG -  Little O notation.
 2020-01-20 22:19:32,555 - DEBUG - 554 }
 2020-01-20 22:19:32,555 - DEBUG - 597 }
 2020-01-20 22:19:32,556 - DEBUG - 846 }
 2020-01-20 22:19:32,556 - DEBUG - alogorithm-bigo-1
 2020-01-20 22:19:32,556 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 22:19:32,556 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 22:19:32,556 - DEBUG - 868 }
 2020-01-20 22:19:32,556 - DEBUG - 911 }
 2020-01-20 22:19:32,557 - DEBUG - 1271 }
 2020-01-20 22:19:32,557 - DEBUG - algorithm-bigo-2
 2020-01-20 22:19:32,557 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 22:19:32,557 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 22:19:32,557 - DEBUG - 1293 }
 2020-01-20 22:19:32,558 - DEBUG - 1338 }
 2020-01-20 22:19:32,558 - DEBUG - 1581 }
 2020-01-20 22:19:32,558 - DEBUG - algorithm-bigo-3
 2020-01-20 22:19:32,558 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 22:19:32,558 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 22:19:32,558 - DEBUG - 1603 }
 2020-01-20 22:19:32,559 - DEBUG - 1650 }
 2020-01-20 22:19:32,559 - DEBUG - 1941 }
 2020-01-20 22:19:32,559 - DEBUG - algorithm-bigo-4
 2020-01-20 22:19:32,559 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 22:19:32,559 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 22:19:32,560 - DEBUG - 1963 }
 2020-01-20 22:19:32,560 - DEBUG - 2008 }
 2020-01-20 22:19:32,560 - DEBUG - 2088 }
 2020-01-20 22:19:32,560 - DEBUG - algorithm-bigo-5
 2020-01-20 22:19:32,560 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 22:19:32,560 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 22:19:32,560 - DEBUG - 2110 }
 2020-01-20 22:19:32,560 - DEBUG - 2155 }
 2020-01-20 22:19:32,561 - DEBUG - 2250 }
 2020-01-20 22:19:32,561 - DEBUG - algorithm-bigo-6
 2020-01-20 22:19:32,561 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 22:19:32,561 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 22:19:32,561 - DEBUG - 2272 }
 2020-01-20 22:19:32,561 - DEBUG - 2321 }
 2020-01-20 22:19:32,562 - DEBUG - 2517 }
 2020-01-20 22:19:32,562 - DEBUG - algorithm-bigo-7
 2020-01-20 22:19:32,562 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 22:19:32,562 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 22:19:32,562 - DEBUG - 2539 }
 2020-01-20 22:19:32,562 - DEBUG - 2606 }
 2020-01-20 22:19:32,562 - DEBUG - 2693 }
 2020-01-20 22:19:32,562 - DEBUG - algorithm-bigo-8
 2020-01-20 22:19:32,563 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 22:19:32,563 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 22:19:32,563 - DEBUG - 2715 }
 2020-01-20 22:19:32,563 - DEBUG - 2765 }
 2020-01-20 22:19:32,563 - DEBUG - 2893 }
 2020-01-20 22:19:32,563 - DEBUG - algorithm-bigo-9
 2020-01-20 22:19:32,563 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 22:19:32,563 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 22:19:32,564 - DEBUG - 2915 }
 2020-01-20 22:19:32,564 - DEBUG - 2959 }
 2020-01-20 22:19:32,564 - DEBUG - 3176 }
 2020-01-20 22:19:32,564 - DEBUG - algorithm-bigo-9
 2020-01-20 22:19:32,564 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 22:19:32,564 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 22:19:32,565 - DEBUG - 3199 }
 2020-01-20 22:19:32,565 - DEBUG - 3250 }
 2020-01-20 22:19:32,565 - DEBUG - 3415 }
 2020-01-20 22:19:32,565 - DEBUG - algorithm-bigo-10
 2020-01-20 22:19:32,565 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 22:19:32,565 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 22:19:32,565 - DEBUG - 3438 }
 2020-01-20 22:19:32,566 - DEBUG - 3493 }
 2020-01-20 22:19:32,566 - DEBUG - 3618 }
 2020-01-20 22:19:32,566 - DEBUG - algorithm-bigo-11
 2020-01-20 22:19:32,566 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 22:19:32,566 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 22:19:32,566 - DEBUG - 3641 }
 2020-01-20 22:19:32,566 - DEBUG - 3686 }
 2020-01-20 22:19:32,567 - DEBUG - 3838 }
 2020-01-20 22:19:32,567 - DEBUG - algorithm-bigo-12
 2020-01-20 22:19:32,567 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 22:19:32,567 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 22:19:32,568 - DEBUG - 3861 }
 2020-01-20 22:19:32,568 - DEBUG - 3916 }
 2020-01-20 22:19:32,568 - DEBUG - 4018 }
 2020-01-20 22:19:32,568 - DEBUG - algorithm-bigo-13
 2020-01-20 22:19:32,568 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 22:19:32,568 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 22:19:32,568 - DEBUG - 4041 }
 2020-01-20 22:19:32,569 - DEBUG - 4094 }
 2020-01-20 22:19:32,569 - DEBUG - 4229 }
 2020-01-20 22:19:32,569 - DEBUG - algorithm-bigo-14
 2020-01-20 22:19:32,569 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 22:19:32,569 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 22:19:32,569 - DEBUG - 4252 }
 2020-01-20 22:19:32,569 - DEBUG - 4299 }
 2020-01-20 22:19:32,570 - DEBUG - 4365 }
 2020-01-20 22:19:32,570 - DEBUG - algorithm-bigo-15
 2020-01-20 22:19:32,570 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 22:19:32,570 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 22:19:32,570 - DEBUG - 4388 }
 2020-01-20 22:19:32,570 - DEBUG - 4439 }
 2020-01-20 22:19:32,571 - DEBUG - 4545 }
 2020-01-20 22:19:32,571 - DEBUG - algorithm-bigo-16
 2020-01-20 22:19:32,571 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 22:19:32,571 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 22:19:32,571 - DEBUG - 4568 }
 2020-01-20 22:19:32,571 - DEBUG - 4613 }
 2020-01-20 22:19:32,571 - DEBUG - 4720 }
 2020-01-20 22:19:32,571 - DEBUG - algorithm-bigo-17
 2020-01-20 22:19:32,572 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 22:19:32,572 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 22:19:32,572 - DEBUG - 4742 }
 2020-01-20 22:19:32,572 - DEBUG - 4806 }
 2020-01-20 22:19:32,572 - DEBUG - 4927 }
 2020-01-20 22:19:32,572 - DEBUG - data_structures-1
 2020-01-20 22:19:32,572 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 22:19:32,572 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 22:19:32,573 - DEBUG - 4950 }
 2020-01-20 22:19:32,573 - DEBUG - 5021 }
 2020-01-20 22:19:32,573 - DEBUG - 5096 }
 2020-01-20 22:19:32,573 - DEBUG - data_structures-2
 2020-01-20 22:19:32,573 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 22:19:32,573 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 22:19:32,573 - DEBUG - 5119 }
 2020-01-20 22:19:32,574 - DEBUG - 5169 }
 2020-01-20 22:19:32,574 - DEBUG - 5250 }
 2020-01-20 22:19:32,574 - DEBUG - data_structures-3
 2020-01-20 22:19:32,574 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 22:19:32,574 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 22:19:32,574 - DEBUG - 5273 }
 2020-01-20 22:19:32,574 - DEBUG - 5344 }
 2020-01-20 22:19:32,575 - DEBUG - 5390 }
 2020-01-20 22:19:32,575 - DEBUG - data_structures-4
 2020-01-20 22:19:32,575 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 22:19:32,575 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 22:19:32,575 - DEBUG - 5413 }
 2020-01-20 22:19:32,575 - DEBUG - 5447 }
 2020-01-20 22:19:32,575 - DEBUG - 5479 }
 2020-01-20 22:19:32,575 - DEBUG - data_structures-5
 2020-01-20 22:19:32,575 - DEBUG -  List kinds of Queues.
 2020-01-20 22:19:32,575 - DEBUG -  Queue, Piority Queue.
 2020-01-20 22:19:32,576 - DEBUG - 5502 }
 2020-01-20 22:19:32,576 - DEBUG - 5553 }
 2020-01-20 22:19:32,576 - DEBUG - 5614 }
 2020-01-20 22:19:32,576 - DEBUG - data_structures-6
 2020-01-20 22:19:32,576 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 22:19:32,576 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 22:19:32,577 - DEBUG - 5637 }
 2020-01-20 22:19:32,577 - DEBUG - 5680 }
 2020-01-20 22:19:32,577 - DEBUG - 5746 }
 2020-01-20 22:19:32,577 - DEBUG - data_structures-7
 2020-01-20 22:19:32,577 - DEBUG -  List some main kinds of Trees.
 2020-01-20 22:19:32,577 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 22:19:32,577 - DEBUG - 5769 }
 2020-01-20 22:19:32,578 - DEBUG - 5829 }
 2020-01-20 22:19:32,578 - DEBUG - 5922 }
 2020-01-20 22:19:32,578 - DEBUG - data_structures-8
 2020-01-20 22:19:32,578 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 22:19:32,578 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 22:19:32,578 - DEBUG - 5945 }
 2020-01-20 22:19:32,578 - DEBUG - 6050 }
 2020-01-20 22:19:32,579 - DEBUG - 6359 }
 2020-01-20 22:19:32,579 - DEBUG - data_structures-9
 2020-01-20 22:19:32,579 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 22:19:32,579 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 22:19:32,579 - DEBUG - 6383 }
 2020-01-20 22:19:32,580 - DEBUG - 6428 }
 2020-01-20 22:19:32,580 - DEBUG - 6848 }
 2020-01-20 22:19:32,580 - DEBUG - data_structures-10
 2020-01-20 22:19:32,580 - DEBUG -  What is a linked data structure?
 2020-01-20 22:19:32,581 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 22:19:32,581 - DEBUG - 6872 }
 2020-01-20 22:19:32,581 - DEBUG - 6905 }
 2020-01-20 22:19:32,581 - DEBUG - 6937 }
 2020-01-20 22:19:32,581 - DEBUG - data_structures-11
 2020-01-20 22:19:32,581 - DEBUG -  List kinds of Graphs
 2020-01-20 22:19:32,581 - DEBUG -  Graph and Scene Graph
 2020-01-20 22:19:32,581 - DEBUG - 6961 }
 2020-01-20 22:19:32,581 - DEBUG - 6988 }
 2020-01-20 22:19:32,582 - DEBUG - 7456 }
 2020-01-20 22:19:32,582 - DEBUG - data_structures-12
 2020-01-20 22:19:32,582 - DEBUG -  Describe List.
 2020-01-20 22:19:32,582 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 22:19:32,583 - DEBUG - 7480 }
 2020-01-20 22:19:32,583 - DEBUG - 7511 }
 2020-01-20 22:19:32,583 - DEBUG - 7625 }
 2020-01-20 22:19:32,583 - DEBUG - data_structures-13
 2020-01-20 22:19:32,583 - DEBUG -  Describe a Vector.
 2020-01-20 22:19:32,583 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 22:19:32,583 - DEBUG - 7649 }
 2020-01-20 22:19:32,583 - DEBUG - 7675 }
 2020-01-20 22:19:32,584 - DEBUG - 7840 }
 2020-01-20 22:19:32,584 - DEBUG - data_structures-14
 2020-01-20 22:19:32,584 - DEBUG -  Describe Set.
 2020-01-20 22:19:32,584 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 22:19:32,584 - DEBUG - 7864 }
 2020-01-20 22:19:32,584 - DEBUG - 7894 }
 2020-01-20 22:19:32,585 - DEBUG - 8360 }
 2020-01-20 22:19:32,585 - DEBUG - data_structures-15
 2020-01-20 22:19:32,585 - DEBUG -  Describe a Stack.
 2020-01-20 22:19:32,585 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 22:19:32,586 - DEBUG - 8384 }
 2020-01-20 22:19:32,586 - DEBUG - 8414 }
 2020-01-20 22:19:32,586 - DEBUG - 8949 }
 2020-01-20 22:19:32,587 - DEBUG - data_structures-16
 2020-01-20 22:19:32,587 - DEBUG -  Describe a queue.
 2020-01-20 22:19:32,587 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 22:19:32,587 - DEBUG - 8973 }
 2020-01-20 22:19:32,587 - DEBUG - 9008 }
 2020-01-20 22:19:32,588 - DEBUG - 9456 }
 2020-01-20 22:19:32,588 - DEBUG - data_structures-17
 2020-01-20 22:19:32,588 - DEBUG -  Describe a Dictionary.
 2020-01-20 22:19:32,588 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 22:19:32,588 - DEBUG - 9480 }
 2020-01-20 22:19:32,588 - DEBUG - 9525 }
 2020-01-20 22:19:32,589 - DEBUG - 10271 }
 2020-01-20 22:19:32,589 - DEBUG - data_structures-18
 2020-01-20 22:19:32,589 - DEBUG -  Describe a Tree data structures.
 2020-01-20 22:19:32,590 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 22:19:32,590 - DEBUG - 10295 }
 2020-01-20 22:19:32,590 - DEBUG - 10325 }
 2020-01-20 22:19:32,591 - DEBUG - 10932 }
 2020-01-20 22:19:32,591 - DEBUG - data_structures-19
 2020-01-20 22:19:32,591 - DEBUG -  Describe a Graph.
 2020-01-20 22:19:32,591 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 22:19:32,592 - DEBUG - 10960 }
 2020-01-20 22:19:32,592 - DEBUG - 11042 }
 2020-01-20 22:19:32,593 - DEBUG - 11361 }
 2020-01-20 22:19:32,593 - DEBUG - data_structures-java-1
 2020-01-20 22:19:32,593 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 22:19:32,594 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 22:19:32,594 - DEBUG - 11389 }
 2020-01-20 22:19:32,594 - DEBUG - 11460 }
 2020-01-20 22:19:32,596 - DEBUG - 11641 }
 2020-01-20 22:19:32,596 - DEBUG - data_structures-java-2
 2020-01-20 22:19:32,596 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 22:19:32,596 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 22:19:32,596 - DEBUG - 11669 }
 2020-01-20 22:19:32,597 - DEBUG - 11714 }
 2020-01-20 22:19:32,597 - DEBUG - 11877 }
 2020-01-20 22:19:32,597 - DEBUG - data_structures-java-3
 2020-01-20 22:19:32,597 - DEBUG -  Describe java boolean primitive.
 2020-01-20 22:19:32,597 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 22:19:32,597 - DEBUG - 11905 }
 2020-01-20 22:19:32,598 - DEBUG - 11943 }
 2020-01-20 22:19:32,598 - DEBUG - 12272 }
 2020-01-20 22:19:32,598 - DEBUG - data_structures-java-4
 2020-01-20 22:19:32,598 - DEBUG -  Describe java references.
 2020-01-20 22:19:32,598 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 22:19:32,599 - DEBUG - 12296 }
 2020-01-20 22:19:32,599 - DEBUG - 12375 }
 2020-01-20 22:19:32,599 - DEBUG - 12458 }
 2020-01-20 22:19:32,599 - DEBUG - data_structures-20
 2020-01-20 22:19:32,599 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 22:19:32,600 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 22:19:32,600 - DEBUG - 12492 }
 2020-01-20 22:19:32,600 - DEBUG - 12532 }
 2020-01-20 22:19:32,601 - DEBUG - 12826 }
 2020-01-20 22:19:32,601 - DEBUG - data_structures-javascript-1
 2020-01-20 22:19:32,601 - DEBUG -  Name JavaScript primitives.
 2020-01-20 22:19:32,601 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 22:19:32,602 - DEBUG - 12850 }
 2020-01-20 22:19:32,602 - DEBUG - 12956 }
 2020-01-20 22:19:32,602 - DEBUG - 13123 }
 2020-01-20 22:19:32,602 - DEBUG - data_structures-21
 2020-01-20 22:19:32,602 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 22:19:32,602 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 22:19:32,603 - DEBUG - 13153 }
 2020-01-20 22:19:32,603 - DEBUG - 13189 }
 2020-01-20 22:19:32,603 - DEBUG - 13247 }
 2020-01-20 22:19:32,603 - DEBUG - data_structures-python-1
 2020-01-20 22:19:32,603 - DEBUG -  List python primitives.
 2020-01-20 22:19:32,603 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 22:19:32,603 - DEBUG - 13277 }
 2020-01-20 22:19:32,604 - DEBUG - 13309 }
 2020-01-20 22:19:32,604 - DEBUG - 13422 }
 2020-01-20 22:19:32,604 - DEBUG - data_structures-csharp-1
 2020-01-20 22:19:32,604 - DEBUG -  List c# primitives.
 2020-01-20 22:19:32,604 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 22:19:32,604 - DEBUG - 13434 }
 2020-01-20 22:19:32,604 - DEBUG - 13477 }
 2020-01-20 22:19:32,605 - DEBUG - 13821 }
 2020-01-20 22:19:32,605 - DEBUG - oop-1
 2020-01-20 22:19:32,605 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 22:19:32,605 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 22:19:32,605 - DEBUG - 13832 }
 2020-01-20 22:19:32,605 - DEBUG - 13899 }
 2020-01-20 22:19:32,606 - DEBUG - 13965 }
 2020-01-20 22:19:32,606 - DEBUG - oop-2
 2020-01-20 22:19:32,606 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 22:19:32,606 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 22:19:32,606 - DEBUG - 13976 }
 2020-01-20 22:19:32,606 - DEBUG - 14039 }
 2020-01-20 22:19:32,606 - DEBUG - 14084 }
 2020-01-20 22:19:32,606 - DEBUG - oop-3
 2020-01-20 22:19:32,607 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 22:19:32,607 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 22:19:32,607 - DEBUG - 14095 }
 2020-01-20 22:19:32,607 - DEBUG - 14149 }
 2020-01-20 22:19:32,607 - DEBUG - 14406 }
 2020-01-20 22:19:32,607 - DEBUG - oop-4
 2020-01-20 22:19:32,608 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 22:19:32,608 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 22:19:32,608 - DEBUG - 14417 }
 2020-01-20 22:19:32,608 - DEBUG - 14471 }
 2020-01-20 22:19:32,609 - DEBUG - 14834 }
 2020-01-20 22:19:32,609 - DEBUG - oop-5
 2020-01-20 22:19:32,609 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 22:19:32,609 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 22:19:32,609 - DEBUG - 14845 }
 2020-01-20 22:19:32,609 - DEBUG - 14899 }
 2020-01-20 22:19:32,610 - DEBUG - 15220 }
 2020-01-20 22:19:32,610 - DEBUG - oop-6
 2020-01-20 22:19:32,610 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 22:19:32,610 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 22:19:32,610 - DEBUG - 15242 }
 2020-01-20 22:19:32,610 - DEBUG - 15294 }
 2020-01-20 22:19:32,611 - DEBUG - 15369 }
 2020-01-20 22:19:32,611 - DEBUG - oop-creational-1
 2020-01-20 22:19:32,611 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 22:19:32,611 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 22:19:32,611 - DEBUG - 15391 }
 2020-01-20 22:19:32,611 - DEBUG - 15444 }
 2020-01-20 22:19:32,611 - DEBUG - 15583 }
 2020-01-20 22:19:32,611 - DEBUG - oop-behavioral-1
 2020-01-20 22:19:32,612 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 22:19:32,612 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 22:19:32,612 - DEBUG - 15605 }
 2020-01-20 22:19:32,612 - DEBUG - 15657 }
 2020-01-20 22:19:32,612 - DEBUG - 15733 }
 2020-01-20 22:19:32,612 - DEBUG - oop-structural-1
 2020-01-20 22:19:32,612 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 22:19:32,613 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 22:19:32,613 - DEBUG - 15755 }
 2020-01-20 22:19:32,613 - DEBUG - 15842 }
 2020-01-20 22:19:32,613 - DEBUG - 15882 }
 2020-01-20 22:19:32,613 - DEBUG - oop-structural-2
 2020-01-20 22:19:32,613 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 22:19:32,613 - DEBUG -  Model View Controller or MVC.
 2020-01-20 22:19:32,613 - DEBUG - 15904 }
 2020-01-20 22:19:32,614 - DEBUG - 15938 }
 2020-01-20 22:19:32,614 - DEBUG - 16451 }
 2020-01-20 22:19:32,614 - DEBUG - oop-structural-3
 2020-01-20 22:19:32,614 - DEBUG -  Describe MVC pattern.
 2020-01-20 22:19:32,615 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 22:19:32,615 - DEBUG - 16473 }
 2020-01-20 22:19:32,615 - DEBUG - 16513 }
 2020-01-20 22:19:32,615 - DEBUG - 16769 }
 2020-01-20 22:19:32,615 - DEBUG - oop-creational-2
 2020-01-20 22:19:32,615 - DEBUG -  What is the Factory Method?
 2020-01-20 22:19:32,616 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 22:19:32,616 - DEBUG - 16791 }
 2020-01-20 22:19:32,616 - DEBUG - 16822 }
 2020-01-20 22:19:32,616 - DEBUG - 17062 }
 2020-01-20 22:19:32,616 - DEBUG - oop-creational-3
 2020-01-20 22:19:32,616 - DEBUG -  What is Prototype?
 2020-01-20 22:19:32,616 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 22:19:32,617 - DEBUG - 17084 }
 2020-01-20 22:19:32,617 - DEBUG - 17115 }
 2020-01-20 22:19:32,617 - DEBUG - 17404 }
 2020-01-20 22:19:32,617 - DEBUG - oop-creational-4
 2020-01-20 22:19:32,617 - DEBUG -  What is Singleton?
 2020-01-20 22:19:32,618 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 22:19:32,618 - DEBUG - 17426 }
 2020-01-20 22:19:32,618 - DEBUG - 17464 }
 2020-01-20 22:19:32,619 - DEBUG - 18097 }
 2020-01-20 22:19:32,619 - DEBUG - oop-creational-5
 2020-01-20 22:19:32,619 - DEBUG -  What is Abstract Factory?
 2020-01-20 22:19:32,619 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 22:19:32,619 - DEBUG - 18119 }
 2020-01-20 22:19:32,619 - DEBUG - 18174 }
 2020-01-20 22:19:32,620 - DEBUG - 18512 }
 2020-01-20 22:19:32,620 - DEBUG - oop-creational-6
 2020-01-20 22:19:32,620 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 22:19:32,620 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 22:19:32,620 - DEBUG - 18534 }
 2020-01-20 22:19:32,621 - DEBUG - 18597 }
 2020-01-20 22:19:32,621 - DEBUG - 18869 }
 2020-01-20 22:19:32,621 - DEBUG - oop-behavioral-2
 2020-01-20 22:19:32,621 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 22:19:32,621 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 22:19:32,621 - DEBUG - 18891 }
 2020-01-20 22:19:32,622 - DEBUG - 18947 }
 2020-01-20 22:19:32,622 - DEBUG - 19298 }
 2020-01-20 22:19:32,622 - DEBUG - oop-behavioral-3
 2020-01-20 22:19:32,622 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 22:19:32,622 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 22:19:32,623 - DEBUG - 19320 }
 2020-01-20 22:19:32,623 - DEBUG - 19379 }
 2020-01-20 22:19:32,623 - DEBUG - 19657 }
 2020-01-20 22:19:32,623 - DEBUG - oop-behavioral-4
 2020-01-20 22:19:32,624 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 22:19:32,624 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 22:19:32,624 - DEBUG - 19679 }
 2020-01-20 22:19:32,624 - DEBUG - 19734 }
 2020-01-20 22:19:32,625 - DEBUG - 20104 }
 2020-01-20 22:19:32,625 - DEBUG - oop-behavioral-5
 2020-01-20 22:19:32,625 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 22:19:32,625 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 22:19:32,625 - DEBUG - 20126 }
 2020-01-20 22:19:32,625 - DEBUG - 20182 }
 2020-01-20 22:19:32,626 - DEBUG - 20562 }
 2020-01-20 22:19:32,626 - DEBUG - oop-behavioral-6
 2020-01-20 22:19:32,627 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 22:19:32,627 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 22:19:32,627 - DEBUG - 20584 }
 2020-01-20 22:19:32,627 - DEBUG - 20637 }
 2020-01-20 22:19:32,628 - DEBUG - 20945 }
 2020-01-20 22:19:32,628 - DEBUG - oop-behavioral-7
 2020-01-20 22:19:32,628 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 22:19:32,628 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 22:19:32,628 - DEBUG - 20967 }
 2020-01-20 22:19:32,628 - DEBUG - 21023 }
 2020-01-20 22:19:32,629 - DEBUG - 21457 }
 2020-01-20 22:19:32,629 - DEBUG - oop-behavioral-8
 2020-01-20 22:19:32,629 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 22:19:32,629 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 22:19:32,630 - DEBUG - 21479 }
 2020-01-20 22:19:32,630 - DEBUG - 21535 }
 2020-01-20 22:19:32,630 - DEBUG - 21801 }
 2020-01-20 22:19:32,630 - DEBUG - oop-behavioral-9
 2020-01-20 22:19:32,630 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 22:19:32,631 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 22:19:32,631 - DEBUG - 21824 }
 2020-01-20 22:19:32,631 - DEBUG - 21894 }
 2020-01-20 22:19:32,632 - DEBUG - 22311 }
 2020-01-20 22:19:32,632 - DEBUG - oop-behavioral-10
 2020-01-20 22:19:32,632 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 22:19:32,632 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 22:19:32,632 - DEBUG - 22334 }
 2020-01-20 22:19:32,632 - DEBUG - 22393 }
 2020-01-20 22:19:32,633 - DEBUG - 22719 }
 2020-01-20 22:19:32,633 - DEBUG - oop-behavioral-11
 2020-01-20 22:19:32,633 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 22:19:32,633 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 22:19:32,633 - DEBUG - 22742 }
 2020-01-20 22:19:32,633 - DEBUG - 22801 }
 2020-01-20 22:19:32,634 - DEBUG - 23266 }
 2020-01-20 22:19:32,634 - DEBUG - oop-behavioral-12
 2020-01-20 22:19:32,634 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 22:19:32,634 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 22:19:32,635 - DEBUG - 23288 }
 2020-01-20 22:19:32,635 - DEBUG - 23343 }
 2020-01-20 22:19:32,635 - DEBUG - 23656 }
 2020-01-20 22:19:32,635 - DEBUG - oop-structural-4
 2020-01-20 22:19:32,636 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 22:19:32,636 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 22:19:32,636 - DEBUG - 23678 }
 2020-01-20 22:19:32,636 - DEBUG - 23735 }
 2020-01-20 22:19:32,637 - DEBUG - 24091 }
 2020-01-20 22:19:32,637 - DEBUG - oop-structural-5
 2020-01-20 22:19:32,637 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 22:19:32,637 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 22:19:32,637 - DEBUG - 24113 }
 2020-01-20 22:19:32,637 - DEBUG - 24170 }
 2020-01-20 22:19:32,638 - DEBUG - 24554 }
 2020-01-20 22:19:32,638 - DEBUG - oop-structural-6
 2020-01-20 22:19:32,638 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 22:19:32,638 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 22:19:32,639 - DEBUG - 24576 }
 2020-01-20 22:19:32,639 - DEBUG - 24629 }
 2020-01-20 22:19:32,639 - DEBUG - 24995 }
 2020-01-20 22:19:32,639 - DEBUG - oop-structural-7
 2020-01-20 22:19:32,639 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 22:19:32,640 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 22:19:32,640 - DEBUG - 25017 }
 2020-01-20 22:19:32,640 - DEBUG - 25071 }
 2020-01-20 22:19:32,641 - DEBUG - 25501 }
 2020-01-20 22:19:32,641 - DEBUG - oop-structural-8
 2020-01-20 22:19:32,641 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 22:19:32,641 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 22:19:32,641 - DEBUG - 25523 }
 2020-01-20 22:19:32,641 - DEBUG - 25580 }
 2020-01-20 22:19:32,642 - DEBUG - 26139 }
 2020-01-20 22:19:32,642 - DEBUG - oop-structural-9
 2020-01-20 22:19:32,642 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 22:19:32,642 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 22:19:32,642 - DEBUG - 26162 }
 2020-01-20 22:19:32,643 - DEBUG - 26216 }
 2020-01-20 22:19:32,643 - DEBUG - 26748 }
 2020-01-20 22:19:32,643 - DEBUG - oop-structural-10
 2020-01-20 22:19:32,644 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 22:19:32,644 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 22:19:32,644 - DEBUG - 26782 }
 2020-01-20 22:19:32,644 - DEBUG - 26838 }
 2020-01-20 22:19:32,644 - DEBUG - 26980 }
 2020-01-20 22:19:32,644 - DEBUG - python-datatypes-strings-1
 2020-01-20 22:19:32,644 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 22:19:32,645 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 22:19:32,645 - DEBUG - 27013 }
 2020-01-20 22:19:32,645 - DEBUG - 27073 }
 2020-01-20 22:19:32,645 - DEBUG - 27141 }
 2020-01-20 22:19:32,645 - DEBUG - python-datatypes-strings-2
 2020-01-20 22:19:32,645 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 22:19:32,645 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 22:19:32,645 - DEBUG - 27174 }
 2020-01-20 22:19:32,646 - DEBUG - 27247 }
 2020-01-20 22:19:32,646 - DEBUG - 27409 }
 2020-01-20 22:19:32,646 - DEBUG - python-datatypes-strings-3
 2020-01-20 22:19:32,646 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 22:19:32,646 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 22:19:32,646 - DEBUG - 27442 }
 2020-01-20 22:19:32,647 - DEBUG - 27502 }
 2020-01-20 22:19:32,647 - DEBUG - 27600 }
 2020-01-20 22:19:32,647 - DEBUG - python-datatypes-strings-4
 2020-01-20 22:19:32,647 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 22:19:32,647 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 22:19:32,647 - DEBUG - 27634 }
 2020-01-20 22:19:32,647 - DEBUG - 27685 }
 2020-01-20 22:19:32,647 - DEBUG - 27715 }
 2020-01-20 22:19:32,648 - DEBUG - python-datatypes-strings-5
 2020-01-20 22:19:32,648 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 22:19:32,648 - DEBUG -  len(mystring) is 5
 2020-01-20 22:19:32,648 - DEBUG - 27748 }
 2020-01-20 22:19:32,648 - DEBUG - 27790 }
 2020-01-20 22:19:32,648 - DEBUG - 27877 }
 2020-01-20 22:19:32,648 - DEBUG - python-datatypes-strings-6
 2020-01-20 22:19:32,648 - DEBUG -  How do you merge two strings?
 2020-01-20 22:19:32,649 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 22:19:32,649 - DEBUG - 27912 }
 2020-01-20 22:19:32,649 - DEBUG - 27961 }
 2020-01-20 22:19:32,649 - DEBUG - 28039 }
 2020-01-20 22:19:32,649 - DEBUG - python-datatypes-strings-7
 2020-01-20 22:19:32,649 - DEBUG -  How do you use a number in a string?
 2020-01-20 22:19:32,649 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 22:19:32,649 - DEBUG - 28074 }
 2020-01-20 22:19:32,650 - DEBUG - 28153 }
 2020-01-20 22:19:32,650 - DEBUG - 28184 }
 2020-01-20 22:19:32,650 - DEBUG - python-datatypes-strings-8
 2020-01-20 22:19:32,650 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 22:19:32,650 - DEBUG -  mystring.split(',')
 2020-01-20 22:19:32,650 - DEBUG - 28217 }
 2020-01-20 22:19:32,650 - DEBUG - 28272 }
 2020-01-20 22:19:32,651 - DEBUG - 28300 }
 2020-01-20 22:19:32,651 - DEBUG - python-datatypes-strings-9
 2020-01-20 22:19:32,651 - DEBUG -  How do you trim white space from a string?
 2020-01-20 22:19:32,651 - DEBUG -  mystring.strip()
 2020-01-20 22:19:32,651 - DEBUG - 28334 }
 2020-01-20 22:19:32,651 - DEBUG - 28394 }
 2020-01-20 22:19:32,651 - DEBUG - 28446 }
 2020-01-20 22:19:32,651 - DEBUG - python-datatypes-strings-10
 2020-01-20 22:19:32,651 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 22:19:32,652 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 22:19:32,652 - DEBUG - 28479 }
 2020-01-20 22:19:32,652 - DEBUG - 28525 }
 2020-01-20 22:19:32,652 - DEBUG - 28640 }
 2020-01-20 22:19:32,652 - DEBUG - python-datatypes-numbers-1
 2020-01-20 22:19:32,652 - DEBUG -  Describe types of python numbers.
 2020-01-20 22:19:32,652 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 22:19:32,653 - DEBUG - 28673 }
 2020-01-20 22:19:32,653 - DEBUG - 28745 }
 2020-01-20 22:19:32,653 - DEBUG - 28893 }
 2020-01-20 22:19:32,653 - DEBUG - python-datatypes-numbers-2
 2020-01-20 22:19:32,653 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 22:19:32,653 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 22:19:32,653 - DEBUG - 28926 }
 2020-01-20 22:19:32,654 - DEBUG - 29001 }
 2020-01-20 22:19:32,654 - DEBUG - 29095 }
 2020-01-20 22:19:32,654 - DEBUG - python-datatypes-numbers-3
 2020-01-20 22:19:32,654 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 22:19:32,654 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 22:19:32,654 - DEBUG - 29128 }
 2020-01-20 22:19:32,654 - DEBUG - 29179 }
 2020-01-20 22:19:32,655 - DEBUG - 29201 }
 2020-01-20 22:19:32,655 - DEBUG - python-datatypes-numbers-4
 2020-01-20 22:19:32,655 - DEBUG -  How do the absolute value of a number?
 2020-01-20 22:19:32,655 - DEBUG -  abs(mynum)
 2020-01-20 22:19:32,655 - DEBUG - 29234 }
 2020-01-20 22:19:32,655 - DEBUG - 29284 }
 2020-01-20 22:19:32,655 - DEBUG - 29313 }
 2020-01-20 22:19:32,655 - DEBUG - python-datatypes-numbers-5
 2020-01-20 22:19:32,655 - DEBUG -  How do you raise a number to a power?
 2020-01-20 22:19:32,655 - DEBUG -  pow(power,number)
 2020-01-20 22:19:32,656 - DEBUG - 29346 }
 2020-01-20 22:19:32,656 - DEBUG - 29390 }
 2020-01-20 22:19:32,656 - DEBUG - 29426 }
 2020-01-20 22:19:32,656 - DEBUG - python-datatypes-numbers-6
 2020-01-20 22:19:32,656 - DEBUG -  How do you round a real number?
 2020-01-20 22:19:32,656 - DEBUG -  round(num,decimalplaces)
 2020-01-20 22:19:32,656 - DEBUG - 29459 }
 2020-01-20 22:19:32,656 - DEBUG - 29513 }
 2020-01-20 22:19:32,657 - DEBUG - 29681 }
 2020-01-20 22:19:32,657 - DEBUG - python-datatypes-numbers-7
 2020-01-20 22:19:32,657 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 22:19:32,657 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 22:19:32,657 - DEBUG - 29695 }
 2020-01-20 22:19:32,657 - DEBUG - 29768 }
 2020-01-20 22:19:32,658 - DEBUG - 29837 }
 2020-01-20 22:19:32,658 - DEBUG - uml-1
 2020-01-20 22:19:32,658 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 22:19:32,658 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 22:19:32,658 - DEBUG - 29848 }
 2020-01-20 22:19:32,658 - DEBUG - 29892 }
 2020-01-20 22:19:32,658 - DEBUG - 29989 }
 2020-01-20 22:19:32,658 - DEBUG - uml-2
 2020-01-20 22:19:32,658 - DEBUG -  What is an interaction diagram?
 2020-01-20 22:19:32,659 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 22:19:32,659 - DEBUG - 30000 }
 2020-01-20 22:19:32,659 - DEBUG - 30041 }
 2020-01-20 22:19:32,659 - DEBUG - 30351 }
 2020-01-20 22:19:32,660 - DEBUG - uml-3
 2020-01-20 22:19:32,660 - DEBUG -  What is a structure diagram?
 2020-01-20 22:19:32,660 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 22:19:32,660 - DEBUG - 30362 }
 2020-01-20 22:19:32,660 - DEBUG - 30402 }
 2020-01-20 22:19:32,660 - DEBUG - 30516 }
 2020-01-20 22:19:32,660 - DEBUG - uml-4
 2020-01-20 22:19:32,661 - DEBUG -  What is a behavior diagram?
 2020-01-20 22:19:32,661 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 22:19:32,661 - DEBUG - 30537 }
 2020-01-20 22:19:32,661 - DEBUG - 30588 }
 2020-01-20 22:19:32,661 - DEBUG - 30670 }
 2020-01-20 22:19:32,661 - DEBUG - uml-structure-1
 2020-01-20 22:19:32,661 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 22:19:32,661 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 22:19:32,662 - DEBUG - 30690 }
 2020-01-20 22:19:32,662 - DEBUG - 30755 }
 2020-01-20 22:19:32,662 - DEBUG - 30815 }
 2020-01-20 22:19:32,662 - DEBUG - uml-behavior-1
 2020-01-20 22:19:32,662 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 22:19:32,662 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 22:19:32,663 - DEBUG - 30838 }
 2020-01-20 22:19:32,663 - DEBUG - 30895 }
 2020-01-20 22:19:32,663 - DEBUG - 30960 }
 2020-01-20 22:19:32,663 - DEBUG - uml-interaction-1
 2020-01-20 22:19:32,663 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 22:19:32,663 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 22:19:32,663 - DEBUG - 30971 }
 2020-01-20 22:19:32,663 - DEBUG - 31015 }
 2020-01-20 22:19:32,664 - DEBUG - 31049 }
 2020-01-20 22:19:32,664 - DEBUG - uml-2
 2020-01-20 22:19:32,664 - DEBUG -  How many uml digrams are there?
 2020-01-20 22:19:32,664 - DEBUG -  Around 14 give or take.
 2020-01-20 22:19:32,664 - DEBUG - 31070 }
 2020-01-20 22:19:32,664 - DEBUG - 31121 }
 2020-01-20 22:19:32,665 - DEBUG - 31369 }
 2020-01-20 22:19:32,665 - DEBUG - uml-structure-2
 2020-01-20 22:19:32,665 - DEBUG -  Describe the structure Package diagram
 2020-01-20 22:19:32,665 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 22:19:32,665 - DEBUG - 31390 }
 2020-01-20 22:19:32,665 - DEBUG - 31440 }
 2020-01-20 22:19:32,666 - DEBUG - 31713 }
 2020-01-20 22:19:32,666 - DEBUG - uml-structure-3
 2020-01-20 22:19:32,666 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 22:19:32,666 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 22:19:32,666 - DEBUG - 31734 }
 2020-01-20 22:19:32,666 - DEBUG - 31785 }
 2020-01-20 22:19:32,666 - DEBUG - 31919 }
 2020-01-20 22:19:32,666 - DEBUG - uml-structure-4
 2020-01-20 22:19:32,667 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 22:19:32,667 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 22:19:32,667 - DEBUG - 31940 }
 2020-01-20 22:19:32,667 - DEBUG - 31994 }
 2020-01-20 22:19:32,667 - DEBUG - 32246 }
 2020-01-20 22:19:32,667 - DEBUG - uml-structure-5
 2020-01-20 22:19:32,668 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 22:19:32,668 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 22:19:32,668 - DEBUG - 32267 }
 2020-01-20 22:19:32,668 - DEBUG - 32321 }
 2020-01-20 22:19:32,668 - DEBUG - 32658 }
 2020-01-20 22:19:32,669 - DEBUG - uml-structure-6
 2020-01-20 22:19:32,669 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 22:19:32,669 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 22:19:32,669 - DEBUG - 32679 }
 2020-01-20 22:19:32,669 - DEBUG - 32736 }
 2020-01-20 22:19:32,669 - DEBUG - 32924 }
 2020-01-20 22:19:32,669 - DEBUG - uml-structure-7
 2020-01-20 22:19:32,670 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 22:19:32,670 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 22:19:32,670 - DEBUG - 32945 }
 2020-01-20 22:19:32,670 - DEBUG - 33000 }
 2020-01-20 22:19:32,670 - DEBUG - 33308 }
 2020-01-20 22:19:32,671 - DEBUG - uml-structure-8
 2020-01-20 22:19:32,671 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 22:19:32,671 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 22:19:32,671 - DEBUG - 33328 }
 2020-01-20 22:19:32,671 - DEBUG - 33380 }
 2020-01-20 22:19:32,671 - DEBUG - 33546 }
 2020-01-20 22:19:32,671 - DEBUG - uml-behavior-1
 2020-01-20 22:19:32,672 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 22:19:32,672 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 22:19:32,672 - DEBUG - 33566 }
 2020-01-20 22:19:32,672 - DEBUG - 33618 }
 2020-01-20 22:19:32,672 - DEBUG - 33863 }
 2020-01-20 22:19:32,672 - DEBUG - uml-behavior-2
 2020-01-20 22:19:32,673 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 22:19:32,673 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 22:19:32,673 - DEBUG - 33883 }
 2020-01-20 22:19:32,673 - DEBUG - 33932 }
 2020-01-20 22:19:32,673 - DEBUG - 34238 }
 2020-01-20 22:19:32,674 - DEBUG - uml-behavior-3
 2020-01-20 22:19:32,674 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 22:19:32,674 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 22:19:32,674 - DEBUG - 34261 }
 2020-01-20 22:19:32,674 - DEBUG - 34316 }
 2020-01-20 22:19:32,674 - DEBUG - 34474 }
 2020-01-20 22:19:32,674 - DEBUG - uml-interaction-2
 2020-01-20 22:19:32,674 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 22:19:32,675 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 22:19:32,675 - DEBUG - 34497 }
 2020-01-20 22:19:32,675 - DEBUG - 34550 }
 2020-01-20 22:19:32,675 - DEBUG - 34800 }
 2020-01-20 22:19:32,675 - DEBUG - uml-interaction-3
 2020-01-20 22:19:32,675 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 22:19:32,676 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 22:19:32,676 - DEBUG - 34823 }
 2020-01-20 22:19:32,676 - DEBUG - 34884 }
 2020-01-20 22:19:32,677 - DEBUG - 35155 }
 2020-01-20 22:19:32,677 - DEBUG - uml-interaction-4
 2020-01-20 22:19:32,677 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 22:19:32,677 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 22:19:32,677 - DEBUG - 35178 }
 2020-01-20 22:19:32,677 - DEBUG - 35245 }
 2020-01-20 22:19:32,677 - DEBUG - 35403 }
 2020-01-20 22:19:32,678 - DEBUG - uml-interaction-5
 2020-01-20 22:19:32,678 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 22:19:32,678 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 22:19:32,678 - DEBUG - algo_cards
 2020-01-20 22:19:32,678 - DEBUG - box1
 2020-01-20 22:19:32,679 - DEBUG - algo_cards
 2020-01-20 22:19:32,679 - DEBUG - box1
 2020-01-20 22:19:32,679 - DEBUG - box2
 2020-01-20 22:19:32,680 - DEBUG - algo_cards
 2020-01-20 22:19:32,680 - DEBUG - box1
 2020-01-20 22:19:32,680 - DEBUG - box2
 2020-01-20 22:19:32,681 - DEBUG - box3
 2020-01-20 22:19:32,681 - DEBUG - algo_cards
 2020-01-20 22:19:32,681 - DEBUG - box1
 2020-01-20 22:19:32,682 - DEBUG - box2
 2020-01-20 22:19:32,682 - DEBUG - box3
 2020-01-20 22:19:32,682 - DEBUG - box4
 2020-01-20 22:19:32,682 - DEBUG - algo_cards
 2020-01-20 22:19:32,683 - DEBUG - box1
 2020-01-20 22:19:32,683 - DEBUG - box2
 2020-01-20 22:19:32,683 - DEBUG - box3
 2020-01-20 22:19:32,683 - DEBUG - box4
 2020-01-20 22:19:32,683 - DEBUG - box5
 2020-01-20 22:19:32,684 - DEBUG - algo_cards
 2020-01-20 22:19:32,684 - DEBUG - box1
 2020-01-20 22:19:32,684 - DEBUG - box2
 2020-01-20 22:19:32,684 - DEBUG - box3
 2020-01-20 22:19:32,684 - DEBUG - box4
 2020-01-20 22:19:32,684 - DEBUG - box5
 2020-01-20 22:19:32,684 - DEBUG - box6
 2020-01-20 22:19:32,685 - DEBUG - finding test cycle file
 2020-01-20 22:19:32,685 - DEBUG - quizs\
 2020-01-20 22:19:32,685 - DEBUG - algo_cards.txt
 2020-01-20 22:19:32,685 - DEBUG - box1.txt
 2020-01-20 22:19:32,685 - DEBUG - box2.txt
 2020-01-20 22:19:32,685 - DEBUG - box3.txt
 2020-01-20 22:19:32,685 - DEBUG - box4.txt
 2020-01-20 22:19:32,685 - DEBUG - box5.txt
 2020-01-20 22:19:32,686 - DEBUG - box6.txt
 2020-01-20 22:19:32,686 - DEBUG - data_struct_cards.txt
 2020-01-20 22:19:32,686 - DEBUG - oop_cards.txt
 2020-01-20 22:19:32,686 - DEBUG - python_cards.txt
 2020-01-20 22:19:32,686 - DEBUG - testcycle1.txt
 2020-01-20 22:19:32,686 - DEBUG - uml_cards.txt
 2020-01-20 22:19:32,686 - DEBUG - algo_cards
 2020-01-20 22:19:32,686 - DEBUG - box1
 2020-01-20 22:19:32,687 - DEBUG - box2
 2020-01-20 22:19:32,687 - DEBUG - box3
 2020-01-20 22:19:32,687 - DEBUG - box4
 2020-01-20 22:19:32,687 - DEBUG - box5
 2020-01-20 22:19:32,687 - DEBUG - box6
 2020-01-20 22:19:32,687 - DEBUG - data_struct_cards
 2020-01-20 22:19:32,687 - DEBUG - oop_cards
 2020-01-20 22:19:32,687 - DEBUG - python_cards
 2020-01-20 22:19:32,687 - DEBUG - testcycle1
 2020-01-20 22:19:32,687 - DEBUG - found testcycle1.txt
 2020-01-20 22:19:32,688 - DEBUG - testcycle1
 2020-01-20 22:19:32,688 - DEBUG - quizs\
 2020-01-20 22:19:32,689 - DEBUG - Starting new cycle number 2
 2020-01-20 22:19:32,689 - DEBUG - highestbox 2
 2020-01-20 22:19:32,689 - DEBUG - Loading box1 to box2
 2020-01-20 22:22:11,353 - DEBUG - Start of Logging Leitner Module
 2020-01-20 22:22:11,353 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-01-20 22:22:11,353 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-01-20 22:22:11,353 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-01-20 22:22:11,353 - INFO - on things you get right.
 2020-01-20 22:22:11,400 - DEBUG - C:\dev\github\python\quiz
 2020-01-20 22:22:11,400 - DEBUG - 15 }
 2020-01-20 22:22:11,400 - DEBUG - 57 }
 2020-01-20 22:22:11,400 - DEBUG - 225 }
 2020-01-20 22:22:11,400 - DEBUG - algorithm-1
 2020-01-20 22:22:11,400 - DEBUG -  What is algorithm efficiency?
 2020-01-20 22:22:11,416 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-01-20 22:22:11,416 - DEBUG - 242 }
 2020-01-20 22:22:11,416 - DEBUG - 324 }
 2020-01-20 22:22:11,416 - DEBUG - 403 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-2
 2020-01-20 22:22:11,416 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-01-20 22:22:11,416 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-01-20 22:22:11,416 - DEBUG - 420 }
 2020-01-20 22:22:11,416 - DEBUG - 502 }
 2020-01-20 22:22:11,416 - DEBUG - 531 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-3
 2020-01-20 22:22:11,416 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-01-20 22:22:11,416 - DEBUG -  Little O notation.
 2020-01-20 22:22:11,416 - DEBUG - 554 }
 2020-01-20 22:22:11,416 - DEBUG - 597 }
 2020-01-20 22:22:11,416 - DEBUG - 846 }
 2020-01-20 22:22:11,416 - DEBUG - alogorithm-bigo-1
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(1) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-01-20 22:22:11,416 - DEBUG - 868 }
 2020-01-20 22:22:11,416 - DEBUG - 911 }
 2020-01-20 22:22:11,416 - DEBUG - 1271 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-2
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-01-20 22:22:11,416 - DEBUG - 1293 }
 2020-01-20 22:22:11,416 - DEBUG - 1338 }
 2020-01-20 22:22:11,416 - DEBUG - 1581 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-3
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n^2) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-01-20 22:22:11,416 - DEBUG - 1603 }
 2020-01-20 22:22:11,416 - DEBUG - 1650 }
 2020-01-20 22:22:11,416 - DEBUG - 1941 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-4
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(log n) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-01-20 22:22:11,416 - DEBUG - 1963 }
 2020-01-20 22:22:11,416 - DEBUG - 2008 }
 2020-01-20 22:22:11,416 - DEBUG - 2088 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-5
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n^c) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-01-20 22:22:11,416 - DEBUG - 2110 }
 2020-01-20 22:22:11,416 - DEBUG - 2155 }
 2020-01-20 22:22:11,416 - DEBUG - 2250 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-6
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(c^n) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-01-20 22:22:11,416 - DEBUG - 2272 }
 2020-01-20 22:22:11,416 - DEBUG - 2321 }
 2020-01-20 22:22:11,416 - DEBUG - 2517 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-7
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n log n) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-01-20 22:22:11,416 - DEBUG - 2539 }
 2020-01-20 22:22:11,416 - DEBUG - 2606 }
 2020-01-20 22:22:11,416 - DEBUG - 2693 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-8
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-01-20 22:22:11,416 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-01-20 22:22:11,416 - DEBUG - 2715 }
 2020-01-20 22:22:11,416 - DEBUG - 2765 }
 2020-01-20 22:22:11,416 - DEBUG - 2893 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-9
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n log* n) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-01-20 22:22:11,416 - DEBUG - 2915 }
 2020-01-20 22:22:11,416 - DEBUG - 2959 }
 2020-01-20 22:22:11,416 - DEBUG - 3176 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-9
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n!) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-01-20 22:22:11,416 - DEBUG - 3199 }
 2020-01-20 22:22:11,416 - DEBUG - 3250 }
 2020-01-20 22:22:11,416 - DEBUG - 3415 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-10
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(log log n) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-01-20 22:22:11,416 - DEBUG - 3438 }
 2020-01-20 22:22:11,416 - DEBUG - 3493 }
 2020-01-20 22:22:11,416 - DEBUG - 3618 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-11
 2020-01-20 22:22:11,416 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-01-20 22:22:11,416 - DEBUG - 3641 }
 2020-01-20 22:22:11,416 - DEBUG - 3686 }
 2020-01-20 22:22:11,416 - DEBUG - 3838 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-12
 2020-01-20 22:22:11,416 - DEBUG -  Describe O(n^3) time complexity.
 2020-01-20 22:22:11,416 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-01-20 22:22:11,416 - DEBUG - 3861 }
 2020-01-20 22:22:11,416 - DEBUG - 3916 }
 2020-01-20 22:22:11,416 - DEBUG - 4018 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-13
 2020-01-20 22:22:11,416 - DEBUG -  What is the rule about constants in Big O?
 2020-01-20 22:22:11,416 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-01-20 22:22:11,416 - DEBUG - 4041 }
 2020-01-20 22:22:11,416 - DEBUG - 4094 }
 2020-01-20 22:22:11,416 - DEBUG - 4229 }
 2020-01-20 22:22:11,416 - DEBUG - algorithm-bigo-14
 2020-01-20 22:22:11,416 - DEBUG -  What is the transivtivity rule in Big O?
 2020-01-20 22:22:11,416 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-01-20 22:22:11,416 - DEBUG - 4252 }
 2020-01-20 22:22:11,416 - DEBUG - 4299 }
 2020-01-20 22:22:11,431 - DEBUG - 4365 }
 2020-01-20 22:22:11,431 - DEBUG - algorithm-bigo-15
 2020-01-20 22:22:11,431 - DEBUG -  What is the rule of sums in Big O?
 2020-01-20 22:22:11,431 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-01-20 22:22:11,431 - DEBUG - 4388 }
 2020-01-20 22:22:11,431 - DEBUG - 4439 }
 2020-01-20 22:22:11,431 - DEBUG - 4545 }
 2020-01-20 22:22:11,431 - DEBUG - algorithm-bigo-16
 2020-01-20 22:22:11,431 - DEBUG -  What is the rule of products in Big O?
 2020-01-20 22:22:11,431 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-01-20 22:22:11,431 - DEBUG - 4568 }
 2020-01-20 22:22:11,431 - DEBUG - 4613 }
 2020-01-20 22:22:11,431 - DEBUG - 4720 }
 2020-01-20 22:22:11,431 - DEBUG - algorithm-bigo-17
 2020-01-20 22:22:11,431 - DEBUG -  What is the limit rule in Big O?
 2020-01-20 22:22:11,431 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-01-20 22:22:11,431 - DEBUG - 4742 }
 2020-01-20 22:22:11,431 - DEBUG - 4806 }
 2020-01-20 22:22:11,431 - DEBUG - 4927 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-1
 2020-01-20 22:22:11,431 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-01-20 22:22:11,431 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-01-20 22:22:11,431 - DEBUG - 4950 }
 2020-01-20 22:22:11,431 - DEBUG - 5021 }
 2020-01-20 22:22:11,431 - DEBUG - 5096 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-2
 2020-01-20 22:22:11,431 - DEBUG -  Name seven common names for main types of data structures.
 2020-01-20 22:22:11,431 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-01-20 22:22:11,431 - DEBUG - 5119 }
 2020-01-20 22:22:11,431 - DEBUG - 5169 }
 2020-01-20 22:22:11,431 - DEBUG - 5250 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-3
 2020-01-20 22:22:11,431 - DEBUG -  List kinds of Linked data structures.
 2020-01-20 22:22:11,431 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-01-20 22:22:11,431 - DEBUG - 5273 }
 2020-01-20 22:22:11,431 - DEBUG - 5344 }
 2020-01-20 22:22:11,431 - DEBUG - 5390 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-4
 2020-01-20 22:22:11,431 - DEBUG -  List alternative language names for Vector dat structures.
 2020-01-20 22:22:11,431 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-01-20 22:22:11,431 - DEBUG - 5413 }
 2020-01-20 22:22:11,431 - DEBUG - 5447 }
 2020-01-20 22:22:11,431 - DEBUG - 5479 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-5
 2020-01-20 22:22:11,431 - DEBUG -  List kinds of Queues.
 2020-01-20 22:22:11,431 - DEBUG -  Queue, Piority Queue.
 2020-01-20 22:22:11,431 - DEBUG - 5502 }
 2020-01-20 22:22:11,431 - DEBUG - 5553 }
 2020-01-20 22:22:11,431 - DEBUG - 5614 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-6
 2020-01-20 22:22:11,431 - DEBUG -  List alternate names for Dictionaries.
 2020-01-20 22:22:11,431 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-01-20 22:22:11,431 - DEBUG - 5637 }
 2020-01-20 22:22:11,431 - DEBUG - 5680 }
 2020-01-20 22:22:11,431 - DEBUG - 5746 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-7
 2020-01-20 22:22:11,431 - DEBUG -  List some main kinds of Trees.
 2020-01-20 22:22:11,431 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-01-20 22:22:11,431 - DEBUG - 5769 }
 2020-01-20 22:22:11,431 - DEBUG - 5829 }
 2020-01-20 22:22:11,431 - DEBUG - 5922 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-8
 2020-01-20 22:22:11,431 - DEBUG -  List types of arrays and array like structures.
 2020-01-20 22:22:11,431 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-01-20 22:22:11,431 - DEBUG - 5945 }
 2020-01-20 22:22:11,431 - DEBUG - 6050 }
 2020-01-20 22:22:11,431 - DEBUG - 6359 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-9
 2020-01-20 22:22:11,431 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-01-20 22:22:11,431 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-01-20 22:22:11,431 - DEBUG - 6383 }
 2020-01-20 22:22:11,431 - DEBUG - 6428 }
 2020-01-20 22:22:11,431 - DEBUG - 6848 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-10
 2020-01-20 22:22:11,431 - DEBUG -  What is a linked data structure?
 2020-01-20 22:22:11,431 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-01-20 22:22:11,431 - DEBUG - 6872 }
 2020-01-20 22:22:11,431 - DEBUG - 6905 }
 2020-01-20 22:22:11,431 - DEBUG - 6937 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-11
 2020-01-20 22:22:11,431 - DEBUG -  List kinds of Graphs
 2020-01-20 22:22:11,431 - DEBUG -  Graph and Scene Graph
 2020-01-20 22:22:11,431 - DEBUG - 6961 }
 2020-01-20 22:22:11,431 - DEBUG - 6988 }
 2020-01-20 22:22:11,431 - DEBUG - 7456 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-12
 2020-01-20 22:22:11,431 - DEBUG -  Describe List.
 2020-01-20 22:22:11,431 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-01-20 22:22:11,431 - DEBUG - 7480 }
 2020-01-20 22:22:11,431 - DEBUG - 7511 }
 2020-01-20 22:22:11,431 - DEBUG - 7625 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-13
 2020-01-20 22:22:11,431 - DEBUG -  Describe a Vector.
 2020-01-20 22:22:11,431 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-01-20 22:22:11,431 - DEBUG - 7649 }
 2020-01-20 22:22:11,431 - DEBUG - 7675 }
 2020-01-20 22:22:11,431 - DEBUG - 7840 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-14
 2020-01-20 22:22:11,431 - DEBUG -  Describe Set.
 2020-01-20 22:22:11,431 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-01-20 22:22:11,431 - DEBUG - 7864 }
 2020-01-20 22:22:11,431 - DEBUG - 7894 }
 2020-01-20 22:22:11,431 - DEBUG - 8360 }
 2020-01-20 22:22:11,431 - DEBUG - data_structures-15
 2020-01-20 22:22:11,447 - DEBUG -  Describe a Stack.
 2020-01-20 22:22:11,447 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-01-20 22:22:11,447 - DEBUG - 8384 }
 2020-01-20 22:22:11,447 - DEBUG - 8414 }
 2020-01-20 22:22:11,447 - DEBUG - 8949 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-16
 2020-01-20 22:22:11,447 - DEBUG -  Describe a queue.
 2020-01-20 22:22:11,447 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-01-20 22:22:11,447 - DEBUG - 8973 }
 2020-01-20 22:22:11,447 - DEBUG - 9008 }
 2020-01-20 22:22:11,447 - DEBUG - 9456 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-17
 2020-01-20 22:22:11,447 - DEBUG -  Describe a Dictionary.
 2020-01-20 22:22:11,447 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-01-20 22:22:11,447 - DEBUG - 9480 }
 2020-01-20 22:22:11,447 - DEBUG - 9525 }
 2020-01-20 22:22:11,447 - DEBUG - 10271 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-18
 2020-01-20 22:22:11,447 - DEBUG -  Describe a Tree data structures.
 2020-01-20 22:22:11,447 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-01-20 22:22:11,447 - DEBUG - 10295 }
 2020-01-20 22:22:11,447 - DEBUG - 10325 }
 2020-01-20 22:22:11,447 - DEBUG - 10932 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-19
 2020-01-20 22:22:11,447 - DEBUG -  Describe a Graph.
 2020-01-20 22:22:11,447 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-01-20 22:22:11,447 - DEBUG - 10960 }
 2020-01-20 22:22:11,447 - DEBUG - 11042 }
 2020-01-20 22:22:11,447 - DEBUG - 11361 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-java-1
 2020-01-20 22:22:11,447 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-01-20 22:22:11,447 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-01-20 22:22:11,447 - DEBUG - 11389 }
 2020-01-20 22:22:11,447 - DEBUG - 11460 }
 2020-01-20 22:22:11,447 - DEBUG - 11641 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-java-2
 2020-01-20 22:22:11,447 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-01-20 22:22:11,447 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-01-20 22:22:11,447 - DEBUG - 11669 }
 2020-01-20 22:22:11,447 - DEBUG - 11714 }
 2020-01-20 22:22:11,447 - DEBUG - 11877 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-java-3
 2020-01-20 22:22:11,447 - DEBUG -  Describe java boolean primitive.
 2020-01-20 22:22:11,447 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-01-20 22:22:11,447 - DEBUG - 11905 }
 2020-01-20 22:22:11,447 - DEBUG - 11943 }
 2020-01-20 22:22:11,447 - DEBUG - 12272 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-java-4
 2020-01-20 22:22:11,447 - DEBUG -  Describe java references.
 2020-01-20 22:22:11,447 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-01-20 22:22:11,447 - DEBUG - 12296 }
 2020-01-20 22:22:11,447 - DEBUG - 12375 }
 2020-01-20 22:22:11,447 - DEBUG - 12458 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-20
 2020-01-20 22:22:11,447 - DEBUG -  What do modern programming languages usually call data structures?
 2020-01-20 22:22:11,447 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-01-20 22:22:11,447 - DEBUG - 12492 }
 2020-01-20 22:22:11,447 - DEBUG - 12532 }
 2020-01-20 22:22:11,447 - DEBUG - 12826 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-javascript-1
 2020-01-20 22:22:11,447 - DEBUG -  Name JavaScript primitives.
 2020-01-20 22:22:11,447 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-01-20 22:22:11,447 - DEBUG - 12850 }
 2020-01-20 22:22:11,447 - DEBUG - 12956 }
 2020-01-20 22:22:11,447 - DEBUG - 13123 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-21
 2020-01-20 22:22:11,447 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-01-20 22:22:11,447 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-01-20 22:22:11,447 - DEBUG - 13153 }
 2020-01-20 22:22:11,447 - DEBUG - 13189 }
 2020-01-20 22:22:11,447 - DEBUG - 13247 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-python-1
 2020-01-20 22:22:11,447 - DEBUG -  List python primitives.
 2020-01-20 22:22:11,447 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-01-20 22:22:11,447 - DEBUG - 13277 }
 2020-01-20 22:22:11,447 - DEBUG - 13309 }
 2020-01-20 22:22:11,447 - DEBUG - 13422 }
 2020-01-20 22:22:11,447 - DEBUG - data_structures-csharp-1
 2020-01-20 22:22:11,447 - DEBUG -  List c# primitives.
 2020-01-20 22:22:11,447 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-01-20 22:22:11,447 - DEBUG - 13434 }
 2020-01-20 22:22:11,447 - DEBUG - 13477 }
 2020-01-20 22:22:11,447 - DEBUG - 13821 }
 2020-01-20 22:22:11,447 - DEBUG - oop-1
 2020-01-20 22:22:11,447 - DEBUG -  What is an OOP Design Pattern?
 2020-01-20 22:22:11,463 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-01-20 22:22:11,463 - DEBUG - 13832 }
 2020-01-20 22:22:11,463 - DEBUG - 13899 }
 2020-01-20 22:22:11,463 - DEBUG - 13965 }
 2020-01-20 22:22:11,463 - DEBUG - oop-2
 2020-01-20 22:22:11,463 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-01-20 22:22:11,463 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-01-20 22:22:11,463 - DEBUG - 13976 }
 2020-01-20 22:22:11,463 - DEBUG - 14039 }
 2020-01-20 22:22:11,463 - DEBUG - 14084 }
 2020-01-20 22:22:11,463 - DEBUG - oop-3
 2020-01-20 22:22:11,463 - DEBUG -  What are the 3 main categories of design patterns?
 2020-01-20 22:22:11,463 - DEBUG -  Creational, Behavioral, Structural
 2020-01-20 22:22:11,463 - DEBUG - 14095 }
 2020-01-20 22:22:11,463 - DEBUG - 14149 }
 2020-01-20 22:22:11,463 - DEBUG - 14406 }
 2020-01-20 22:22:11,463 - DEBUG - oop-4
 2020-01-20 22:22:11,463 - DEBUG -  What is an OOP Creational design pattern?
 2020-01-20 22:22:11,463 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-01-20 22:22:11,463 - DEBUG - 14417 }
 2020-01-20 22:22:11,463 - DEBUG - 14471 }
 2020-01-20 22:22:11,463 - DEBUG - 14834 }
 2020-01-20 22:22:11,463 - DEBUG - oop-5
 2020-01-20 22:22:11,463 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-01-20 22:22:11,463 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-01-20 22:22:11,463 - DEBUG - 14845 }
 2020-01-20 22:22:11,463 - DEBUG - 14899 }
 2020-01-20 22:22:11,463 - DEBUG - 15220 }
 2020-01-20 22:22:11,463 - DEBUG - oop-6
 2020-01-20 22:22:11,463 - DEBUG -  What is an OOP Structural design pattern?
 2020-01-20 22:22:11,463 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-01-20 22:22:11,463 - DEBUG - 15242 }
 2020-01-20 22:22:11,463 - DEBUG - 15294 }
 2020-01-20 22:22:11,463 - DEBUG - 15369 }
 2020-01-20 22:22:11,463 - DEBUG - oop-creational-1
 2020-01-20 22:22:11,463 - DEBUG -  Name 5 most common creational patterns.
 2020-01-20 22:22:11,463 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-01-20 22:22:11,463 - DEBUG - 15391 }
 2020-01-20 22:22:11,463 - DEBUG - 15444 }
 2020-01-20 22:22:11,463 - DEBUG - 15583 }
 2020-01-20 22:22:11,463 - DEBUG - oop-behavioral-1
 2020-01-20 22:22:11,463 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-01-20 22:22:11,463 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-01-20 22:22:11,463 - DEBUG - 15605 }
 2020-01-20 22:22:11,463 - DEBUG - 15657 }
 2020-01-20 22:22:11,463 - DEBUG - 15733 }
 2020-01-20 22:22:11,463 - DEBUG - oop-structural-1
 2020-01-20 22:22:11,463 - DEBUG -  Name 7 most common structural patterns.
 2020-01-20 22:22:11,463 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-01-20 22:22:11,463 - DEBUG - 15755 }
 2020-01-20 22:22:11,463 - DEBUG - 15842 }
 2020-01-20 22:22:11,463 - DEBUG - 15882 }
 2020-01-20 22:22:11,463 - DEBUG - oop-structural-2
 2020-01-20 22:22:11,463 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-01-20 22:22:11,463 - DEBUG -  Model View Controller or MVC.
 2020-01-20 22:22:11,463 - DEBUG - 15904 }
 2020-01-20 22:22:11,463 - DEBUG - 15938 }
 2020-01-20 22:22:11,463 - DEBUG - 16451 }
 2020-01-20 22:22:11,463 - DEBUG - oop-structural-3
 2020-01-20 22:22:11,463 - DEBUG -  Describe MVC pattern.
 2020-01-20 22:22:11,463 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-01-20 22:22:11,463 - DEBUG - 16473 }
 2020-01-20 22:22:11,463 - DEBUG - 16513 }
 2020-01-20 22:22:11,463 - DEBUG - 16769 }
 2020-01-20 22:22:11,463 - DEBUG - oop-creational-2
 2020-01-20 22:22:11,463 - DEBUG -  What is the Factory Method?
 2020-01-20 22:22:11,463 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-01-20 22:22:11,463 - DEBUG - 16791 }
 2020-01-20 22:22:11,463 - DEBUG - 16822 }
 2020-01-20 22:22:11,463 - DEBUG - 17062 }
 2020-01-20 22:22:11,463 - DEBUG - oop-creational-3
 2020-01-20 22:22:11,463 - DEBUG -  What is Prototype?
 2020-01-20 22:22:11,463 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-01-20 22:22:11,463 - DEBUG - 17084 }
 2020-01-20 22:22:11,463 - DEBUG - 17115 }
 2020-01-20 22:22:11,463 - DEBUG - 17404 }
 2020-01-20 22:22:11,478 - DEBUG - oop-creational-4
 2020-01-20 22:22:11,478 - DEBUG -  What is Singleton?
 2020-01-20 22:22:11,478 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-01-20 22:22:11,478 - DEBUG - 17426 }
 2020-01-20 22:22:11,478 - DEBUG - 17464 }
 2020-01-20 22:22:11,478 - DEBUG - 18097 }
 2020-01-20 22:22:11,478 - DEBUG - oop-creational-5
 2020-01-20 22:22:11,478 - DEBUG -  What is Abstract Factory?
 2020-01-20 22:22:11,478 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-01-20 22:22:11,478 - DEBUG - 18119 }
 2020-01-20 22:22:11,478 - DEBUG - 18174 }
 2020-01-20 22:22:11,478 - DEBUG - 18512 }
 2020-01-20 22:22:11,478 - DEBUG - oop-creational-6
 2020-01-20 22:22:11,478 - DEBUG -  What is Builder creational design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-01-20 22:22:11,478 - DEBUG - 18534 }
 2020-01-20 22:22:11,478 - DEBUG - 18597 }
 2020-01-20 22:22:11,478 - DEBUG - 18869 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-2
 2020-01-20 22:22:11,478 - DEBUG -  What is Template Method behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-01-20 22:22:11,478 - DEBUG - 18891 }
 2020-01-20 22:22:11,478 - DEBUG - 18947 }
 2020-01-20 22:22:11,478 - DEBUG - 19298 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-3
 2020-01-20 22:22:11,478 - DEBUG -  What is Strategy behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-01-20 22:22:11,478 - DEBUG - 19320 }
 2020-01-20 22:22:11,478 - DEBUG - 19379 }
 2020-01-20 22:22:11,478 - DEBUG - 19657 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-4
 2020-01-20 22:22:11,478 - DEBUG -  What is the Command behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-01-20 22:22:11,478 - DEBUG - 19679 }
 2020-01-20 22:22:11,478 - DEBUG - 19734 }
 2020-01-20 22:22:11,478 - DEBUG - 20104 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-5
 2020-01-20 22:22:11,478 - DEBUG -  What is Memento behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-01-20 22:22:11,478 - DEBUG - 20126 }
 2020-01-20 22:22:11,478 - DEBUG - 20182 }
 2020-01-20 22:22:11,478 - DEBUG - 20562 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-6
 2020-01-20 22:22:11,478 - DEBUG -  What is Mediator behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-01-20 22:22:11,478 - DEBUG - 20584 }
 2020-01-20 22:22:11,478 - DEBUG - 20637 }
 2020-01-20 22:22:11,478 - DEBUG - 20945 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-7
 2020-01-20 22:22:11,478 - DEBUG -  What is State behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-01-20 22:22:11,478 - DEBUG - 20967 }
 2020-01-20 22:22:11,478 - DEBUG - 21023 }
 2020-01-20 22:22:11,478 - DEBUG - 21457 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-8
 2020-01-20 22:22:11,478 - DEBUG -  What is Observer behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-01-20 22:22:11,478 - DEBUG - 21479 }
 2020-01-20 22:22:11,478 - DEBUG - 21535 }
 2020-01-20 22:22:11,478 - DEBUG - 21801 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-9
 2020-01-20 22:22:11,478 - DEBUG -  What is Iterator behavioral design pattern.
 2020-01-20 22:22:11,478 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-01-20 22:22:11,478 - DEBUG - 21824 }
 2020-01-20 22:22:11,478 - DEBUG - 21894 }
 2020-01-20 22:22:11,478 - DEBUG - 22311 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-10
 2020-01-20 22:22:11,478 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-01-20 22:22:11,478 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-01-20 22:22:11,478 - DEBUG - 22334 }
 2020-01-20 22:22:11,478 - DEBUG - 22393 }
 2020-01-20 22:22:11,478 - DEBUG - 22719 }
 2020-01-20 22:22:11,478 - DEBUG - oop-behavioral-11
 2020-01-20 22:22:11,478 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-01-20 22:22:11,478 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-01-20 22:22:11,494 - DEBUG - 22742 }
 2020-01-20 22:22:11,494 - DEBUG - 22801 }
 2020-01-20 22:22:11,494 - DEBUG - 23266 }
 2020-01-20 22:22:11,494 - DEBUG - oop-behavioral-12
 2020-01-20 22:22:11,494 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-01-20 22:22:11,494 - DEBUG - 23288 }
 2020-01-20 22:22:11,494 - DEBUG - 23343 }
 2020-01-20 22:22:11,494 - DEBUG - 23656 }
 2020-01-20 22:22:11,494 - DEBUG - oop-structural-4
 2020-01-20 22:22:11,494 - DEBUG -  What is Adapter structural design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-01-20 22:22:11,494 - DEBUG - 23678 }
 2020-01-20 22:22:11,494 - DEBUG - 23735 }
 2020-01-20 22:22:11,494 - DEBUG - 24091 }
 2020-01-20 22:22:11,494 - DEBUG - oop-structural-5
 2020-01-20 22:22:11,494 - DEBUG -  What is Composite structural design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-01-20 22:22:11,494 - DEBUG - 24113 }
 2020-01-20 22:22:11,494 - DEBUG - 24170 }
 2020-01-20 22:22:11,494 - DEBUG - 24554 }
 2020-01-20 22:22:11,494 - DEBUG - oop-structural-6
 2020-01-20 22:22:11,494 - DEBUG -  What is Decorator structural design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-01-20 22:22:11,494 - DEBUG - 24576 }
 2020-01-20 22:22:11,494 - DEBUG - 24629 }
 2020-01-20 22:22:11,494 - DEBUG - 24995 }
 2020-01-20 22:22:11,494 - DEBUG - oop-structural-7
 2020-01-20 22:22:11,494 - DEBUG -  What is Proxy structural design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-01-20 22:22:11,494 - DEBUG - 25017 }
 2020-01-20 22:22:11,494 - DEBUG - 25071 }
 2020-01-20 22:22:11,494 - DEBUG - 25501 }
 2020-01-20 22:22:11,494 - DEBUG - oop-structural-8
 2020-01-20 22:22:11,494 - DEBUG -  What is Facade structural design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-01-20 22:22:11,494 - DEBUG - 25523 }
 2020-01-20 22:22:11,494 - DEBUG - 25580 }
 2020-01-20 22:22:11,494 - DEBUG - 26139 }
 2020-01-20 22:22:11,494 - DEBUG - oop-structural-9
 2020-01-20 22:22:11,494 - DEBUG -  What is Flyweight structural design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-01-20 22:22:11,494 - DEBUG - 26162 }
 2020-01-20 22:22:11,494 - DEBUG - 26216 }
 2020-01-20 22:22:11,494 - DEBUG - 26748 }
 2020-01-20 22:22:11,494 - DEBUG - oop-structural-10
 2020-01-20 22:22:11,494 - DEBUG -  What is Bridge structural design pattern?
 2020-01-20 22:22:11,494 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-01-20 22:22:11,494 - DEBUG - 26782 }
 2020-01-20 22:22:11,494 - DEBUG - 26838 }
 2020-01-20 22:22:11,494 - DEBUG - 26980 }
 2020-01-20 22:22:11,494 - DEBUG - python-datatypes-strings-1
 2020-01-20 22:22:11,494 - DEBUG -  Describe a basic python strings definition.
 2020-01-20 22:22:11,494 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-01-20 22:22:11,494 - DEBUG - 27013 }
 2020-01-20 22:22:11,494 - DEBUG - 27073 }
 2020-01-20 22:22:11,494 - DEBUG - 27141 }
 2020-01-20 22:22:11,494 - DEBUG - python-datatypes-strings-2
 2020-01-20 22:22:11,494 - DEBUG -  How can strings be defined over multiple lines?
 2020-01-20 22:22:11,494 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-01-20 22:22:11,494 - DEBUG - 27174 }
 2020-01-20 22:22:11,494 - DEBUG - 27247 }
 2020-01-20 22:22:11,494 - DEBUG - 27409 }
 2020-01-20 22:22:11,494 - DEBUG - python-datatypes-strings-3
 2020-01-20 22:22:11,494 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-01-20 22:22:11,494 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-01-20 22:22:11,494 - DEBUG - 27442 }
 2020-01-20 22:22:11,494 - DEBUG - 27502 }
 2020-01-20 22:22:11,494 - DEBUG - 27600 }
 2020-01-20 22:22:11,494 - DEBUG - python-datatypes-strings-4
 2020-01-20 22:22:11,494 - DEBUG -  How do you iterator over the chars of a string?
 2020-01-20 22:22:11,494 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-01-20 22:22:11,494 - DEBUG - 27634 }
 2020-01-20 22:22:11,494 - DEBUG - 27685 }
 2020-01-20 22:22:11,494 - DEBUG - 27715 }
 2020-01-20 22:22:11,494 - DEBUG - python-datatypes-strings-5
 2020-01-20 22:22:11,494 - DEBUG -  How do you get the lenght of a string?
 2020-01-20 22:22:11,494 - DEBUG -  len(mystring) is 5
 2020-01-20 22:22:11,494 - DEBUG - 27748 }
 2020-01-20 22:22:11,494 - DEBUG - 27790 }
 2020-01-20 22:22:11,494 - DEBUG - 27877 }
 2020-01-20 22:22:11,510 - DEBUG - python-datatypes-strings-6
 2020-01-20 22:22:11,510 - DEBUG -  How do you merge two strings?
 2020-01-20 22:22:11,510 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-01-20 22:22:11,510 - DEBUG - 27912 }
 2020-01-20 22:22:11,510 - DEBUG - 27961 }
 2020-01-20 22:22:11,510 - DEBUG - 28039 }
 2020-01-20 22:22:11,510 - DEBUG - python-datatypes-strings-7
 2020-01-20 22:22:11,510 - DEBUG -  How do you use a number in a string?
 2020-01-20 22:22:11,511 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-01-20 22:22:11,511 - DEBUG - 28074 }
 2020-01-20 22:22:11,511 - DEBUG - 28153 }
 2020-01-20 22:22:11,511 - DEBUG - 28184 }
 2020-01-20 22:22:11,511 - DEBUG - python-datatypes-strings-8
 2020-01-20 22:22:11,511 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-01-20 22:22:11,511 - DEBUG -  mystring.split(',')
 2020-01-20 22:22:11,511 - DEBUG - 28217 }
 2020-01-20 22:22:11,512 - DEBUG - 28272 }
 2020-01-20 22:22:11,512 - DEBUG - 28300 }
 2020-01-20 22:22:11,512 - DEBUG - python-datatypes-strings-9
 2020-01-20 22:22:11,512 - DEBUG -  How do you trim white space from a string?
 2020-01-20 22:22:11,512 - DEBUG -  mystring.strip()
 2020-01-20 22:22:11,512 - DEBUG - 28334 }
 2020-01-20 22:22:11,512 - DEBUG - 28394 }
 2020-01-20 22:22:11,513 - DEBUG - 28446 }
 2020-01-20 22:22:11,513 - DEBUG - python-datatypes-strings-10
 2020-01-20 22:22:11,513 - DEBUG -  How do you convert a string to an int or float?
 2020-01-20 22:22:11,513 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-01-20 22:22:11,513 - DEBUG - 28479 }
 2020-01-20 22:22:11,513 - DEBUG - 28525 }
 2020-01-20 22:22:11,513 - DEBUG - 28640 }
 2020-01-20 22:22:11,513 - DEBUG - python-datatypes-numbers-1
 2020-01-20 22:22:11,514 - DEBUG -  Describe types of python numbers.
 2020-01-20 22:22:11,514 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-01-20 22:22:11,514 - DEBUG - 28673 }
 2020-01-20 22:22:11,514 - DEBUG - 28745 }
 2020-01-20 22:22:11,514 - DEBUG - 28893 }
 2020-01-20 22:22:11,514 - DEBUG - python-datatypes-numbers-2
 2020-01-20 22:22:11,514 - DEBUG -  How do you work with really precise real numbers in python?
 2020-01-20 22:22:11,515 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-01-20 22:22:11,515 - DEBUG - 28926 }
 2020-01-20 22:22:11,515 - DEBUG - 29001 }
 2020-01-20 22:22:11,515 - DEBUG - 29095 }
 2020-01-20 22:22:11,515 - DEBUG - python-datatypes-numbers-3
 2020-01-20 22:22:11,515 - DEBUG -  How can you work with say fractional measurements with python?
 2020-01-20 22:22:11,515 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-01-20 22:22:11,516 - DEBUG - 29128 }
 2020-01-20 22:22:11,516 - DEBUG - 29179 }
 2020-01-20 22:22:11,516 - DEBUG - 29201 }
 2020-01-20 22:22:11,516 - DEBUG - python-datatypes-numbers-4
 2020-01-20 22:22:11,516 - DEBUG -  How do the absolute value of a number?
 2020-01-20 22:22:11,516 - DEBUG -  abs(mynum)
 2020-01-20 22:22:11,516 - DEBUG - 29234 }
 2020-01-20 22:22:11,516 - DEBUG - 29284 }
 2020-01-20 22:22:11,517 - DEBUG - 29313 }
 2020-01-20 22:22:11,517 - DEBUG - python-datatypes-numbers-5
 2020-01-20 22:22:11,517 - DEBUG -  How do you raise a number to a power?
 2020-01-20 22:22:11,517 - DEBUG -  pow(power,number)
 2020-01-20 22:22:11,517 - DEBUG - 29346 }
 2020-01-20 22:22:11,518 - DEBUG - 29390 }
 2020-01-20 22:22:11,518 - DEBUG - 29426 }
 2020-01-20 22:22:11,518 - DEBUG - python-datatypes-numbers-6
 2020-01-20 22:22:11,518 - DEBUG -  How do you round a real number?
 2020-01-20 22:22:11,518 - DEBUG -  round(num,decimalplaces)
 2020-01-20 22:22:11,518 - DEBUG - 29459 }
 2020-01-20 22:22:11,518 - DEBUG - 29513 }
 2020-01-20 22:22:11,519 - DEBUG - 29681 }
 2020-01-20 22:22:11,519 - DEBUG - python-datatypes-numbers-7
 2020-01-20 22:22:11,519 - DEBUG -  Whats involved in getting random numbers?
 2020-01-20 22:22:11,519 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-01-20 22:22:11,519 - DEBUG - 29695 }
 2020-01-20 22:22:11,519 - DEBUG - 29768 }
 2020-01-20 22:22:11,519 - DEBUG - 29837 }
 2020-01-20 22:22:11,519 - DEBUG - uml-1
 2020-01-20 22:22:11,520 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-01-20 22:22:11,520 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-01-20 22:22:11,520 - DEBUG - 29848 }
 2020-01-20 22:22:11,520 - DEBUG - 29892 }
 2020-01-20 22:22:11,521 - DEBUG - 29989 }
 2020-01-20 22:22:11,521 - DEBUG - uml-2
 2020-01-20 22:22:11,521 - DEBUG -  What is an interaction diagram?
 2020-01-20 22:22:11,521 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-01-20 22:22:11,521 - DEBUG - 30000 }
 2020-01-20 22:22:11,521 - DEBUG - 30041 }
 2020-01-20 22:22:11,522 - DEBUG - 30351 }
 2020-01-20 22:22:11,522 - DEBUG - uml-3
 2020-01-20 22:22:11,522 - DEBUG -  What is a structure diagram?
 2020-01-20 22:22:11,522 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-01-20 22:22:11,522 - DEBUG - 30362 }
 2020-01-20 22:22:11,523 - DEBUG - 30402 }
 2020-01-20 22:22:11,523 - DEBUG - 30516 }
 2020-01-20 22:22:11,523 - DEBUG - uml-4
 2020-01-20 22:22:11,523 - DEBUG -  What is a behavior diagram?
 2020-01-20 22:22:11,523 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-01-20 22:22:11,523 - DEBUG - 30537 }
 2020-01-20 22:22:11,523 - DEBUG - 30588 }
 2020-01-20 22:22:11,524 - DEBUG - 30670 }
 2020-01-20 22:22:11,524 - DEBUG - uml-structure-1
 2020-01-20 22:22:11,524 - DEBUG -  Name the seven UML structure diagrams.
 2020-01-20 22:22:11,524 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-01-20 22:22:11,524 - DEBUG - 30690 }
 2020-01-20 22:22:11,524 - DEBUG - 30755 }
 2020-01-20 22:22:11,524 - DEBUG - 30815 }
 2020-01-20 22:22:11,524 - DEBUG - uml-behavior-1
 2020-01-20 22:22:11,525 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-01-20 22:22:11,525 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-01-20 22:22:11,525 - DEBUG - 30838 }
 2020-01-20 22:22:11,525 - DEBUG - 30895 }
 2020-01-20 22:22:11,525 - DEBUG - 30960 }
 2020-01-20 22:22:11,525 - DEBUG - uml-interaction-1
 2020-01-20 22:22:11,525 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-01-20 22:22:11,525 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-01-20 22:22:11,525 - DEBUG - 30971 }
 2020-01-20 22:22:11,526 - DEBUG - 31015 }
 2020-01-20 22:22:11,526 - DEBUG - 31049 }
 2020-01-20 22:22:11,526 - DEBUG - uml-2
 2020-01-20 22:22:11,526 - DEBUG -  How many uml digrams are there?
 2020-01-20 22:22:11,526 - DEBUG -  Around 14 give or take.
 2020-01-20 22:22:11,526 - DEBUG - 31070 }
 2020-01-20 22:22:11,526 - DEBUG - 31121 }
 2020-01-20 22:22:11,527 - DEBUG - 31369 }
 2020-01-20 22:22:11,527 - DEBUG - uml-structure-2
 2020-01-20 22:22:11,527 - DEBUG -  Describe the structure Package diagram
 2020-01-20 22:22:11,527 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-01-20 22:22:11,527 - DEBUG - 31390 }
 2020-01-20 22:22:11,527 - DEBUG - 31440 }
 2020-01-20 22:22:11,528 - DEBUG - 31713 }
 2020-01-20 22:22:11,528 - DEBUG - uml-structure-3
 2020-01-20 22:22:11,528 - DEBUG -  Describe the structure Class diagram.
 2020-01-20 22:22:11,528 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-01-20 22:22:11,528 - DEBUG - 31734 }
 2020-01-20 22:22:11,528 - DEBUG - 31785 }
 2020-01-20 22:22:11,529 - DEBUG - 31919 }
 2020-01-20 22:22:11,529 - DEBUG - uml-structure-4
 2020-01-20 22:22:11,529 - DEBUG -  Describe the structure Object diagram.
 2020-01-20 22:22:11,529 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-01-20 22:22:11,529 - DEBUG - 31940 }
 2020-01-20 22:22:11,529 - DEBUG - 31994 }
 2020-01-20 22:22:11,530 - DEBUG - 32246 }
 2020-01-20 22:22:11,530 - DEBUG - uml-structure-5
 2020-01-20 22:22:11,530 - DEBUG -  Describe the structure Component diagram.
 2020-01-20 22:22:11,530 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-01-20 22:22:11,530 - DEBUG - 32267 }
 2020-01-20 22:22:11,530 - DEBUG - 32321 }
 2020-01-20 22:22:11,531 - DEBUG - 32658 }
 2020-01-20 22:22:11,531 - DEBUG - uml-structure-6
 2020-01-20 22:22:11,531 - DEBUG -  Describe the structure Composite diagram.
 2020-01-20 22:22:11,531 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-01-20 22:22:11,531 - DEBUG - 32679 }
 2020-01-20 22:22:11,531 - DEBUG - 32736 }
 2020-01-20 22:22:11,532 - DEBUG - 32924 }
 2020-01-20 22:22:11,532 - DEBUG - uml-structure-7
 2020-01-20 22:22:11,532 - DEBUG -  Describe the structure Collaboration diagram
 2020-01-20 22:22:11,532 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-01-20 22:22:11,532 - DEBUG - 32945 }
 2020-01-20 22:22:11,532 - DEBUG - 33000 }
 2020-01-20 22:22:11,533 - DEBUG - 33308 }
 2020-01-20 22:22:11,533 - DEBUG - uml-structure-8
 2020-01-20 22:22:11,533 - DEBUG -  Describe the structure Deployment diagram.
 2020-01-20 22:22:11,533 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-01-20 22:22:11,533 - DEBUG - 33328 }
 2020-01-20 22:22:11,533 - DEBUG - 33380 }
 2020-01-20 22:22:11,534 - DEBUG - 33546 }
 2020-01-20 22:22:11,534 - DEBUG - uml-behavior-1
 2020-01-20 22:22:11,534 - DEBUG -  Describe the behavior Activity diagram.
 2020-01-20 22:22:11,534 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-01-20 22:22:11,534 - DEBUG - 33566 }
 2020-01-20 22:22:11,534 - DEBUG - 33618 }
 2020-01-20 22:22:11,535 - DEBUG - 33863 }
 2020-01-20 22:22:11,535 - DEBUG - uml-behavior-2
 2020-01-20 22:22:11,535 - DEBUG -  Describe the behavior Use Case diagram.
 2020-01-20 22:22:11,535 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-01-20 22:22:11,535 - DEBUG - 33883 }
 2020-01-20 22:22:11,535 - DEBUG - 33932 }
 2020-01-20 22:22:11,536 - DEBUG - 34238 }
 2020-01-20 22:22:11,536 - DEBUG - uml-behavior-3
 2020-01-20 22:22:11,536 - DEBUG -  Describe the behavior State diagram.
 2020-01-20 22:22:11,536 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-01-20 22:22:11,536 - DEBUG - 34261 }
 2020-01-20 22:22:11,536 - DEBUG - 34316 }
 2020-01-20 22:22:11,537 - DEBUG - 34474 }
 2020-01-20 22:22:11,537 - DEBUG - uml-interaction-2
 2020-01-20 22:22:11,537 - DEBUG -  Describe the interaction Sequence diagram.
 2020-01-20 22:22:11,537 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-01-20 22:22:11,537 - DEBUG - 34497 }
 2020-01-20 22:22:11,537 - DEBUG - 34550 }
 2020-01-20 22:22:11,538 - DEBUG - 34800 }
 2020-01-20 22:22:11,538 - DEBUG - uml-interaction-3
 2020-01-20 22:22:11,538 - DEBUG -  Describe the interaction Timing diagram.
 2020-01-20 22:22:11,538 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-01-20 22:22:11,538 - DEBUG - 34823 }
 2020-01-20 22:22:11,538 - DEBUG - 34884 }
 2020-01-20 22:22:11,538 - DEBUG - 35155 }
 2020-01-20 22:22:11,538 - DEBUG - uml-interaction-4
 2020-01-20 22:22:11,538 - DEBUG -  Describe the interaction Communications diagram.
 2020-01-20 22:22:11,538 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-01-20 22:22:11,538 - DEBUG - 35178 }
 2020-01-20 22:22:11,538 - DEBUG - 35245 }
 2020-01-20 22:22:11,538 - DEBUG - 35403 }
 2020-01-20 22:22:11,538 - DEBUG - uml-interaction-5
 2020-01-20 22:22:11,538 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-01-20 22:22:11,538 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-01-20 22:22:11,538 - DEBUG - algo_cards
 2020-01-20 22:22:11,538 - DEBUG - box1
 2020-01-20 22:22:11,538 - DEBUG - algo_cards
 2020-01-20 22:22:11,538 - DEBUG - box1
 2020-01-20 22:22:11,538 - DEBUG - box2
 2020-01-20 22:22:11,538 - DEBUG - algo_cards
 2020-01-20 22:22:11,538 - DEBUG - box1
 2020-01-20 22:22:11,538 - DEBUG - box2
 2020-01-20 22:22:11,538 - DEBUG - box3
 2020-01-20 22:22:11,538 - DEBUG - algo_cards
 2020-01-20 22:22:11,538 - DEBUG - box1
 2020-01-20 22:22:11,538 - DEBUG - box2
 2020-01-20 22:22:11,538 - DEBUG - box3
 2020-01-20 22:22:11,538 - DEBUG - box4
 2020-01-20 22:22:11,538 - DEBUG - algo_cards
 2020-01-20 22:22:11,538 - DEBUG - box1
 2020-01-20 22:22:11,538 - DEBUG - box2
 2020-01-20 22:22:11,538 - DEBUG - box3
 2020-01-20 22:22:11,538 - DEBUG - box4
 2020-01-20 22:22:11,538 - DEBUG - box5
 2020-01-20 22:22:11,538 - DEBUG - algo_cards
 2020-01-20 22:22:11,538 - DEBUG - box1
 2020-01-20 22:22:11,538 - DEBUG - box2
 2020-01-20 22:22:11,538 - DEBUG - box3
 2020-01-20 22:22:11,538 - DEBUG - box4
 2020-01-20 22:22:11,538 - DEBUG - box5
 2020-01-20 22:22:11,538 - DEBUG - box6
 2020-01-20 22:22:11,538 - DEBUG - finding test cycle file
 2020-01-20 22:22:11,538 - DEBUG - quizs\
 2020-01-20 22:22:11,538 - DEBUG - algo_cards.txt
 2020-01-20 22:22:11,538 - DEBUG - box1.txt
 2020-01-20 22:22:11,538 - DEBUG - box2.txt
 2020-01-20 22:22:11,538 - DEBUG - box3.txt
 2020-01-20 22:22:11,538 - DEBUG - box4.txt
 2020-01-20 22:22:11,538 - DEBUG - box5.txt
 2020-01-20 22:22:11,538 - DEBUG - box6.txt
 2020-01-20 22:22:11,538 - DEBUG - data_struct_cards.txt
 2020-01-20 22:22:11,538 - DEBUG - oop_cards.txt
 2020-01-20 22:22:11,538 - DEBUG - python_cards.txt
 2020-01-20 22:22:11,538 - DEBUG - testcycle1.txt
 2020-01-20 22:22:11,538 - DEBUG - uml_cards.txt
 2020-01-20 22:22:11,538 - DEBUG - algo_cards
 2020-01-20 22:22:11,538 - DEBUG - box1
 2020-01-20 22:22:11,538 - DEBUG - box2
 2020-01-20 22:22:11,538 - DEBUG - box3
 2020-01-20 22:22:11,538 - DEBUG - box4
 2020-01-20 22:22:11,538 - DEBUG - box5
 2020-01-20 22:22:11,538 - DEBUG - box6
 2020-01-20 22:22:11,538 - DEBUG - data_struct_cards
 2020-01-20 22:22:11,538 - DEBUG - oop_cards
 2020-01-20 22:22:11,538 - DEBUG - python_cards
 2020-01-20 22:22:11,538 - DEBUG - testcycle1
 2020-01-20 22:22:11,538 - DEBUG - found testcycle1.txt
 2020-01-20 22:22:11,538 - DEBUG - testcycle1
 2020-01-20 22:22:11,538 - DEBUG - quizs\
 2020-01-20 22:22:11,538 - DEBUG - Starting new cycle number 1
 2020-01-20 22:22:11,538 - DEBUG - highestbox 2
 2020-01-20 22:22:11,538 - DEBUG - Loading box1 to box2
 2020-01-20 22:22:11,613 - DEBUG - Cycle number 2
 2020-07-13 14:10:10,706 - DEBUG - Start of Logging Leitner Module
 2020-07-13 14:10:10,706 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-13 14:10:10,706 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-13 14:10:10,706 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-13 14:10:10,706 - INFO - on things you get right.
 2020-07-13 14:12:18,664 - DEBUG - Start of Logging Leitner Module
 2020-07-13 14:12:18,665 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-13 14:12:18,665 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-13 14:12:18,665 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-13 14:12:18,665 - INFO - on things you get right.
 2020-07-13 14:15:55,439 - DEBUG - Start of Logging Leitner Module
 2020-07-13 14:15:55,439 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-13 14:15:55,439 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-13 14:15:55,439 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-13 14:15:55,440 - INFO - on things you get right.
 2020-07-13 14:15:55,494 - DEBUG - c:\dev2\github\python\quiz
 2020-07-13 14:15:55,542 - DEBUG - 15 }
 2020-07-13 14:15:55,543 - DEBUG - 57 }
 2020-07-13 14:15:55,543 - DEBUG - 225 }
 2020-07-13 14:15:55,543 - DEBUG - algorithm-1
 2020-07-13 14:15:55,543 - DEBUG -  What is algorithm efficiency?
 2020-07-13 14:15:55,543 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-07-13 14:15:55,543 - DEBUG - 242 }
 2020-07-13 14:15:55,544 - DEBUG - 324 }
 2020-07-13 14:15:55,544 - DEBUG - 403 }
 2020-07-13 14:15:55,544 - DEBUG - algorithm-2
 2020-07-13 14:15:55,544 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-07-13 14:15:55,544 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-07-13 14:15:55,544 - DEBUG - 420 }
 2020-07-13 14:15:55,544 - DEBUG - 502 }
 2020-07-13 14:15:55,544 - DEBUG - 531 }
 2020-07-13 14:15:55,544 - DEBUG - algorithm-3
 2020-07-13 14:15:55,544 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-07-13 14:15:55,545 - DEBUG -  Little O notation.
 2020-07-13 14:15:55,545 - DEBUG - 554 }
 2020-07-13 14:15:55,545 - DEBUG - 597 }
 2020-07-13 14:15:55,545 - DEBUG - 846 }
 2020-07-13 14:15:55,545 - DEBUG - alogorithm-bigo-1
 2020-07-13 14:15:55,545 - DEBUG -  Describe O(1) time complexity.
 2020-07-13 14:15:55,545 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-07-13 14:15:55,545 - DEBUG - 868 }
 2020-07-13 14:15:55,546 - DEBUG - 911 }
 2020-07-13 14:15:55,546 - DEBUG - 1271 }
 2020-07-13 14:15:55,546 - DEBUG - algorithm-bigo-2
 2020-07-13 14:15:55,546 - DEBUG -  Describe O(n) time complexity.
 2020-07-13 14:15:55,546 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-07-13 14:15:55,546 - DEBUG - 1293 }
 2020-07-13 14:15:55,546 - DEBUG - 1338 }
 2020-07-13 14:15:55,547 - DEBUG - 1581 }
 2020-07-13 14:15:55,547 - DEBUG - algorithm-bigo-3
 2020-07-13 14:15:55,547 - DEBUG -  Describe O(n^2) time complexity.
 2020-07-13 14:15:55,547 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-07-13 14:15:55,547 - DEBUG - 1603 }
 2020-07-13 14:15:55,547 - DEBUG - 1650 }
 2020-07-13 14:15:55,548 - DEBUG - 1941 }
 2020-07-13 14:15:55,548 - DEBUG - algorithm-bigo-4
 2020-07-13 14:15:55,548 - DEBUG -  Describe O(log n) time complexity.
 2020-07-13 14:15:55,548 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-07-13 14:15:55,548 - DEBUG - 1963 }
 2020-07-13 14:15:55,548 - DEBUG - 2008 }
 2020-07-13 14:15:55,548 - DEBUG - 2088 }
 2020-07-13 14:15:55,548 - DEBUG - algorithm-bigo-5
 2020-07-13 14:15:55,548 - DEBUG -  Describe O(n^c) time complexity.
 2020-07-13 14:15:55,549 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-07-13 14:15:55,549 - DEBUG - 2110 }
 2020-07-13 14:15:55,549 - DEBUG - 2155 }
 2020-07-13 14:15:55,549 - DEBUG - 2250 }
 2020-07-13 14:15:55,549 - DEBUG - algorithm-bigo-6
 2020-07-13 14:15:55,549 - DEBUG -  Describe O(c^n) time complexity.
 2020-07-13 14:15:55,549 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-07-13 14:15:55,549 - DEBUG - 2272 }
 2020-07-13 14:15:55,549 - DEBUG - 2321 }
 2020-07-13 14:15:55,550 - DEBUG - 2517 }
 2020-07-13 14:15:55,550 - DEBUG - algorithm-bigo-7
 2020-07-13 14:15:55,550 - DEBUG -  Describe O(n log n) time complexity.
 2020-07-13 14:15:55,550 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-07-13 14:15:55,550 - DEBUG - 2539 }
 2020-07-13 14:15:55,550 - DEBUG - 2606 }
 2020-07-13 14:15:55,550 - DEBUG - 2693 }
 2020-07-13 14:15:55,550 - DEBUG - algorithm-bigo-8
 2020-07-13 14:15:55,550 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-07-13 14:15:55,551 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-07-13 14:15:55,551 - DEBUG - 2715 }
 2020-07-13 14:15:55,551 - DEBUG - 2765 }
 2020-07-13 14:15:55,551 - DEBUG - 2893 }
 2020-07-13 14:15:55,551 - DEBUG - algorithm-bigo-9
 2020-07-13 14:15:55,551 - DEBUG -  Describe O(n log* n) time complexity.
 2020-07-13 14:15:55,551 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-07-13 14:15:55,551 - DEBUG - 2915 }
 2020-07-13 14:15:55,551 - DEBUG - 2959 }
 2020-07-13 14:15:55,552 - DEBUG - 3176 }
 2020-07-13 14:15:55,552 - DEBUG - algorithm-bigo-9
 2020-07-13 14:15:55,552 - DEBUG -  Describe O(n!) time complexity.
 2020-07-13 14:15:55,552 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-07-13 14:15:55,552 - DEBUG - 3199 }
 2020-07-13 14:15:55,552 - DEBUG - 3250 }
 2020-07-13 14:15:55,552 - DEBUG - 3415 }
 2020-07-13 14:15:55,552 - DEBUG - algorithm-bigo-10
 2020-07-13 14:15:55,553 - DEBUG -  Describe O(log log n) time complexity.
 2020-07-13 14:15:55,553 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-07-13 14:15:55,553 - DEBUG - 3438 }
 2020-07-13 14:15:55,553 - DEBUG - 3493 }
 2020-07-13 14:15:55,553 - DEBUG - 3618 }
 2020-07-13 14:15:55,553 - DEBUG - algorithm-bigo-11
 2020-07-13 14:15:55,553 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-07-13 14:15:55,553 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-07-13 14:15:55,553 - DEBUG - 3641 }
 2020-07-13 14:15:55,553 - DEBUG - 3686 }
 2020-07-13 14:15:55,554 - DEBUG - 3838 }
 2020-07-13 14:15:55,554 - DEBUG - algorithm-bigo-12
 2020-07-13 14:15:55,554 - DEBUG -  Describe O(n^3) time complexity.
 2020-07-13 14:15:55,554 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-07-13 14:15:55,554 - DEBUG - 3861 }
 2020-07-13 14:15:55,554 - DEBUG - 3916 }
 2020-07-13 14:15:55,554 - DEBUG - 4018 }
 2020-07-13 14:15:55,554 - DEBUG - algorithm-bigo-13
 2020-07-13 14:15:55,554 - DEBUG -  What is the rule about constants in Big O?
 2020-07-13 14:15:55,555 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-07-13 14:15:55,555 - DEBUG - 4041 }
 2020-07-13 14:15:55,555 - DEBUG - 4094 }
 2020-07-13 14:15:55,555 - DEBUG - 4229 }
 2020-07-13 14:15:55,555 - DEBUG - algorithm-bigo-14
 2020-07-13 14:15:55,555 - DEBUG -  What is the transivtivity rule in Big O?
 2020-07-13 14:15:55,555 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-07-13 14:15:55,555 - DEBUG - 4252 }
 2020-07-13 14:15:55,556 - DEBUG - 4299 }
 2020-07-13 14:15:55,556 - DEBUG - 4365 }
 2020-07-13 14:15:55,556 - DEBUG - algorithm-bigo-15
 2020-07-13 14:15:55,556 - DEBUG -  What is the rule of sums in Big O?
 2020-07-13 14:15:55,556 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-07-13 14:15:55,556 - DEBUG - 4388 }
 2020-07-13 14:15:55,556 - DEBUG - 4439 }
 2020-07-13 14:15:55,556 - DEBUG - 4545 }
 2020-07-13 14:15:55,557 - DEBUG - algorithm-bigo-16
 2020-07-13 14:15:55,557 - DEBUG -  What is the rule of products in Big O?
 2020-07-13 14:15:55,557 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-07-13 14:15:55,557 - DEBUG - 4568 }
 2020-07-13 14:15:55,557 - DEBUG - 4613 }
 2020-07-13 14:15:55,557 - DEBUG - 4720 }
 2020-07-13 14:15:55,557 - DEBUG - algorithm-bigo-17
 2020-07-13 14:15:55,557 - DEBUG -  What is the limit rule in Big O?
 2020-07-13 14:15:55,557 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-07-13 14:15:55,557 - DEBUG - 4742 }
 2020-07-13 14:15:55,558 - DEBUG - 4806 }
 2020-07-13 14:15:55,558 - DEBUG - 4927 }
 2020-07-13 14:15:55,558 - DEBUG - data_structures-1
 2020-07-13 14:15:55,558 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-07-13 14:15:55,558 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-07-13 14:15:55,558 - DEBUG - 4950 }
 2020-07-13 14:15:55,558 - DEBUG - 5021 }
 2020-07-13 14:15:55,558 - DEBUG - 5096 }
 2020-07-13 14:15:55,558 - DEBUG - data_structures-2
 2020-07-13 14:15:55,559 - DEBUG -  Name seven common names for main types of data structures.
 2020-07-13 14:15:55,559 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-07-13 14:15:55,559 - DEBUG - 5119 }
 2020-07-13 14:15:55,559 - DEBUG - 5169 }
 2020-07-13 14:15:55,559 - DEBUG - 5250 }
 2020-07-13 14:15:55,559 - DEBUG - data_structures-3
 2020-07-13 14:15:55,559 - DEBUG -  List kinds of Linked data structures.
 2020-07-13 14:15:55,559 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-07-13 14:15:55,559 - DEBUG - 5273 }
 2020-07-13 14:15:55,559 - DEBUG - 5344 }
 2020-07-13 14:15:55,560 - DEBUG - 5390 }
 2020-07-13 14:15:55,560 - DEBUG - data_structures-4
 2020-07-13 14:15:55,560 - DEBUG -  List alternative language names for Vector dat structures.
 2020-07-13 14:15:55,560 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-07-13 14:15:55,560 - DEBUG - 5413 }
 2020-07-13 14:15:55,560 - DEBUG - 5447 }
 2020-07-13 14:15:55,560 - DEBUG - 5479 }
 2020-07-13 14:15:55,560 - DEBUG - data_structures-5
 2020-07-13 14:15:55,560 - DEBUG -  List kinds of Queues.
 2020-07-13 14:15:55,560 - DEBUG -  Queue, Piority Queue.
 2020-07-13 14:15:55,561 - DEBUG - 5502 }
 2020-07-13 14:15:55,561 - DEBUG - 5553 }
 2020-07-13 14:15:55,561 - DEBUG - 5614 }
 2020-07-13 14:15:55,561 - DEBUG - data_structures-6
 2020-07-13 14:15:55,561 - DEBUG -  List alternate names for Dictionaries.
 2020-07-13 14:15:55,561 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-07-13 14:15:55,561 - DEBUG - 5637 }
 2020-07-13 14:15:55,561 - DEBUG - 5680 }
 2020-07-13 14:15:55,561 - DEBUG - 5746 }
 2020-07-13 14:15:55,561 - DEBUG - data_structures-7
 2020-07-13 14:15:55,562 - DEBUG -  List some main kinds of Trees.
 2020-07-13 14:15:55,562 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-07-13 14:15:55,562 - DEBUG - 5769 }
 2020-07-13 14:15:55,562 - DEBUG - 5829 }
 2020-07-13 14:15:55,562 - DEBUG - 5922 }
 2020-07-13 14:15:55,562 - DEBUG - data_structures-8
 2020-07-13 14:15:55,562 - DEBUG -  List types of arrays and array like structures.
 2020-07-13 14:15:55,562 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-07-13 14:15:55,562 - DEBUG - 5945 }
 2020-07-13 14:15:55,563 - DEBUG - 6050 }
 2020-07-13 14:15:55,563 - DEBUG - 6359 }
 2020-07-13 14:15:55,563 - DEBUG - data_structures-9
 2020-07-13 14:15:55,563 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-07-13 14:15:55,563 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-07-13 14:15:55,563 - DEBUG - 6383 }
 2020-07-13 14:15:55,564 - DEBUG - 6428 }
 2020-07-13 14:15:55,564 - DEBUG - 6848 }
 2020-07-13 14:15:55,564 - DEBUG - data_structures-10
 2020-07-13 14:15:55,564 - DEBUG -  What is a linked data structure?
 2020-07-13 14:15:55,564 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-07-13 14:15:55,564 - DEBUG - 6872 }
 2020-07-13 14:15:55,564 - DEBUG - 6905 }
 2020-07-13 14:15:55,565 - DEBUG - 6937 }
 2020-07-13 14:15:55,565 - DEBUG - data_structures-11
 2020-07-13 14:15:55,565 - DEBUG -  List kinds of Graphs
 2020-07-13 14:15:55,565 - DEBUG -  Graph and Scene Graph
 2020-07-13 14:15:55,565 - DEBUG - 6961 }
 2020-07-13 14:15:55,565 - DEBUG - 6988 }
 2020-07-13 14:15:55,565 - DEBUG - 7456 }
 2020-07-13 14:15:55,565 - DEBUG - data_structures-12
 2020-07-13 14:15:55,566 - DEBUG -  Describe List.
 2020-07-13 14:15:55,566 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-07-13 14:15:55,566 - DEBUG - 7480 }
 2020-07-13 14:15:55,566 - DEBUG - 7511 }
 2020-07-13 14:15:55,566 - DEBUG - 7625 }
 2020-07-13 14:15:55,566 - DEBUG - data_structures-13
 2020-07-13 14:15:55,566 - DEBUG -  Describe a Vector.
 2020-07-13 14:15:55,566 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-07-13 14:15:55,566 - DEBUG - 7649 }
 2020-07-13 14:15:55,567 - DEBUG - 7675 }
 2020-07-13 14:15:55,567 - DEBUG - 7840 }
 2020-07-13 14:15:55,567 - DEBUG - data_structures-14
 2020-07-13 14:15:55,567 - DEBUG -  Describe Set.
 2020-07-13 14:15:55,567 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-07-13 14:15:55,567 - DEBUG - 7864 }
 2020-07-13 14:15:55,567 - DEBUG - 7894 }
 2020-07-13 14:15:55,568 - DEBUG - 8360 }
 2020-07-13 14:15:55,568 - DEBUG - data_structures-15
 2020-07-13 14:15:55,568 - DEBUG -  Describe a Stack.
 2020-07-13 14:15:55,568 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-07-13 14:15:55,568 - DEBUG - 8384 }
 2020-07-13 14:15:55,568 - DEBUG - 8414 }
 2020-07-13 14:15:55,570 - DEBUG - 8949 }
 2020-07-13 14:15:55,570 - DEBUG - data_structures-16
 2020-07-13 14:15:55,570 - DEBUG -  Describe a queue.
 2020-07-13 14:15:55,570 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-07-13 14:15:55,570 - DEBUG - 8973 }
 2020-07-13 14:15:55,570 - DEBUG - 9008 }
 2020-07-13 14:15:55,571 - DEBUG - 9456 }
 2020-07-13 14:15:55,571 - DEBUG - data_structures-17
 2020-07-13 14:15:55,571 - DEBUG -  Describe a Dictionary.
 2020-07-13 14:15:55,571 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-07-13 14:15:55,571 - DEBUG - 9480 }
 2020-07-13 14:15:55,571 - DEBUG - 9525 }
 2020-07-13 14:15:55,572 - DEBUG - 10271 }
 2020-07-13 14:15:55,572 - DEBUG - data_structures-18
 2020-07-13 14:15:55,572 - DEBUG -  Describe a Tree data structures.
 2020-07-13 14:15:55,572 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-07-13 14:15:55,572 - DEBUG - 10295 }
 2020-07-13 14:15:55,572 - DEBUG - 10325 }
 2020-07-13 14:15:55,573 - DEBUG - 10932 }
 2020-07-13 14:15:55,573 - DEBUG - data_structures-19
 2020-07-13 14:15:55,573 - DEBUG -  Describe a Graph.
 2020-07-13 14:15:55,573 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-07-13 14:15:55,573 - DEBUG - 10960 }
 2020-07-13 14:15:55,574 - DEBUG - 11042 }
 2020-07-13 14:15:55,574 - DEBUG - 11361 }
 2020-07-13 14:15:55,574 - DEBUG - data_structures-java-1
 2020-07-13 14:15:55,574 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-07-13 14:15:55,574 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-07-13 14:15:55,574 - DEBUG - 11389 }
 2020-07-13 14:15:55,574 - DEBUG - 11460 }
 2020-07-13 14:15:55,575 - DEBUG - 11641 }
 2020-07-13 14:15:55,575 - DEBUG - data_structures-java-2
 2020-07-13 14:15:55,575 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-07-13 14:15:55,575 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-07-13 14:15:55,575 - DEBUG - 11669 }
 2020-07-13 14:15:55,575 - DEBUG - 11714 }
 2020-07-13 14:15:55,575 - DEBUG - 11877 }
 2020-07-13 14:15:55,575 - DEBUG - data_structures-java-3
 2020-07-13 14:15:55,576 - DEBUG -  Describe java boolean primitive.
 2020-07-13 14:15:55,576 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-07-13 14:15:55,576 - DEBUG - 11905 }
 2020-07-13 14:15:55,576 - DEBUG - 11943 }
 2020-07-13 14:15:55,576 - DEBUG - 12272 }
 2020-07-13 14:15:55,576 - DEBUG - data_structures-java-4
 2020-07-13 14:15:55,577 - DEBUG -  Describe java references.
 2020-07-13 14:15:55,577 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-07-13 14:15:55,577 - DEBUG - 12296 }
 2020-07-13 14:15:55,577 - DEBUG - 12375 }
 2020-07-13 14:15:55,577 - DEBUG - 12458 }
 2020-07-13 14:15:55,577 - DEBUG - data_structures-20
 2020-07-13 14:15:55,577 - DEBUG -  What do modern programming languages usually call data structures?
 2020-07-13 14:15:55,577 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-07-13 14:15:55,577 - DEBUG - 12492 }
 2020-07-13 14:15:55,578 - DEBUG - 12532 }
 2020-07-13 14:15:55,578 - DEBUG - 12826 }
 2020-07-13 14:15:55,578 - DEBUG - data_structures-javascript-1
 2020-07-13 14:15:55,578 - DEBUG -  Name JavaScript primitives.
 2020-07-13 14:15:55,578 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-07-13 14:15:55,578 - DEBUG - 12850 }
 2020-07-13 14:15:55,578 - DEBUG - 12956 }
 2020-07-13 14:15:55,579 - DEBUG - 13123 }
 2020-07-13 14:15:55,579 - DEBUG - data_structures-21
 2020-07-13 14:15:55,579 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-07-13 14:15:55,579 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-07-13 14:15:55,579 - DEBUG - 13153 }
 2020-07-13 14:15:55,579 - DEBUG - 13189 }
 2020-07-13 14:15:55,579 - DEBUG - 13247 }
 2020-07-13 14:15:55,579 - DEBUG - data_structures-python-1
 2020-07-13 14:15:55,579 - DEBUG -  List python primitives.
 2020-07-13 14:15:55,579 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-07-13 14:15:55,580 - DEBUG - 13277 }
 2020-07-13 14:15:55,580 - DEBUG - 13309 }
 2020-07-13 14:15:55,580 - DEBUG - 13422 }
 2020-07-13 14:15:55,580 - DEBUG - data_structures-csharp-1
 2020-07-13 14:15:55,580 - DEBUG -  List c# primitives.
 2020-07-13 14:15:55,580 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-07-13 14:15:55,580 - DEBUG - 13434 }
 2020-07-13 14:15:55,580 - DEBUG - 13477 }
 2020-07-13 14:15:55,581 - DEBUG - 13821 }
 2020-07-13 14:15:55,581 - DEBUG - oop-1
 2020-07-13 14:15:55,581 - DEBUG -  What is an OOP Design Pattern?
 2020-07-13 14:15:55,581 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-07-13 14:15:55,581 - DEBUG - 13832 }
 2020-07-13 14:15:55,581 - DEBUG - 13899 }
 2020-07-13 14:15:55,581 - DEBUG - 13965 }
 2020-07-13 14:15:55,581 - DEBUG - oop-2
 2020-07-13 14:15:55,581 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-07-13 14:15:55,581 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-07-13 14:15:55,582 - DEBUG - 13976 }
 2020-07-13 14:15:55,582 - DEBUG - 14039 }
 2020-07-13 14:15:55,582 - DEBUG - 14084 }
 2020-07-13 14:15:55,582 - DEBUG - oop-3
 2020-07-13 14:15:55,582 - DEBUG -  What are the 3 main categories of design patterns?
 2020-07-13 14:15:55,582 - DEBUG -  Creational, Behavioral, Structural
 2020-07-13 14:15:55,582 - DEBUG - 14095 }
 2020-07-13 14:15:55,582 - DEBUG - 14149 }
 2020-07-13 14:15:55,583 - DEBUG - 14406 }
 2020-07-13 14:15:55,583 - DEBUG - oop-4
 2020-07-13 14:15:55,583 - DEBUG -  What is an OOP Creational design pattern?
 2020-07-13 14:15:55,583 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-07-13 14:15:55,583 - DEBUG - 14417 }
 2020-07-13 14:15:55,583 - DEBUG - 14471 }
 2020-07-13 14:15:55,584 - DEBUG - 14834 }
 2020-07-13 14:15:55,584 - DEBUG - oop-5
 2020-07-13 14:15:55,584 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-07-13 14:15:55,584 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-07-13 14:15:55,584 - DEBUG - 14845 }
 2020-07-13 14:15:55,584 - DEBUG - 14899 }
 2020-07-13 14:15:55,584 - DEBUG - 15220 }
 2020-07-13 14:15:55,585 - DEBUG - oop-6
 2020-07-13 14:15:55,585 - DEBUG -  What is an OOP Structural design pattern?
 2020-07-13 14:15:55,585 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-07-13 14:15:55,585 - DEBUG - 15242 }
 2020-07-13 14:15:55,585 - DEBUG - 15294 }
 2020-07-13 14:15:55,585 - DEBUG - 15369 }
 2020-07-13 14:15:55,585 - DEBUG - oop-creational-1
 2020-07-13 14:15:55,585 - DEBUG -  Name 5 most common creational patterns.
 2020-07-13 14:15:55,585 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-07-13 14:15:55,585 - DEBUG - 15391 }
 2020-07-13 14:15:55,586 - DEBUG - 15444 }
 2020-07-13 14:15:55,586 - DEBUG - 15583 }
 2020-07-13 14:15:55,586 - DEBUG - oop-behavioral-1
 2020-07-13 14:15:55,586 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-07-13 14:15:55,586 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-07-13 14:15:55,586 - DEBUG - 15605 }
 2020-07-13 14:15:55,586 - DEBUG - 15657 }
 2020-07-13 14:15:55,586 - DEBUG - 15733 }
 2020-07-13 14:15:55,587 - DEBUG - oop-structural-1
 2020-07-13 14:15:55,587 - DEBUG -  Name 7 most common structural patterns.
 2020-07-13 14:15:55,587 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-07-13 14:15:55,587 - DEBUG - 15755 }
 2020-07-13 14:15:55,587 - DEBUG - 15842 }
 2020-07-13 14:15:55,587 - DEBUG - 15882 }
 2020-07-13 14:15:55,587 - DEBUG - oop-structural-2
 2020-07-13 14:15:55,587 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-07-13 14:15:55,587 - DEBUG -  Model View Controller or MVC.
 2020-07-13 14:15:55,587 - DEBUG - 15904 }
 2020-07-13 14:15:55,588 - DEBUG - 15938 }
 2020-07-13 14:15:55,588 - DEBUG - 16451 }
 2020-07-13 14:15:55,588 - DEBUG - oop-structural-3
 2020-07-13 14:15:55,588 - DEBUG -  Describe MVC pattern.
 2020-07-13 14:15:55,588 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-07-13 14:15:55,588 - DEBUG - 16473 }
 2020-07-13 14:15:55,588 - DEBUG - 16513 }
 2020-07-13 14:15:55,589 - DEBUG - 16769 }
 2020-07-13 14:15:55,589 - DEBUG - oop-creational-2
 2020-07-13 14:15:55,589 - DEBUG -  What is the Factory Method?
 2020-07-13 14:15:55,589 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-07-13 14:15:55,589 - DEBUG - 16791 }
 2020-07-13 14:15:55,589 - DEBUG - 16822 }
 2020-07-13 14:15:55,590 - DEBUG - 17062 }
 2020-07-13 14:15:55,590 - DEBUG - oop-creational-3
 2020-07-13 14:15:55,590 - DEBUG -  What is Prototype?
 2020-07-13 14:15:55,590 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-07-13 14:15:55,590 - DEBUG - 17084 }
 2020-07-13 14:15:55,590 - DEBUG - 17115 }
 2020-07-13 14:15:55,590 - DEBUG - 17404 }
 2020-07-13 14:15:55,590 - DEBUG - oop-creational-4
 2020-07-13 14:15:55,591 - DEBUG -  What is Singleton?
 2020-07-13 14:15:55,591 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-07-13 14:15:55,591 - DEBUG - 17426 }
 2020-07-13 14:15:55,591 - DEBUG - 17464 }
 2020-07-13 14:15:55,591 - DEBUG - 18097 }
 2020-07-13 14:15:55,592 - DEBUG - oop-creational-5
 2020-07-13 14:15:55,592 - DEBUG -  What is Abstract Factory?
 2020-07-13 14:15:55,592 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-07-13 14:15:55,592 - DEBUG - 18119 }
 2020-07-13 14:15:55,592 - DEBUG - 18174 }
 2020-07-13 14:15:55,592 - DEBUG - 18512 }
 2020-07-13 14:15:55,592 - DEBUG - oop-creational-6
 2020-07-13 14:15:55,593 - DEBUG -  What is Builder creational design pattern?
 2020-07-13 14:15:55,593 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-07-13 14:15:55,593 - DEBUG - 18534 }
 2020-07-13 14:15:55,593 - DEBUG - 18597 }
 2020-07-13 14:15:55,593 - DEBUG - 18869 }
 2020-07-13 14:15:55,593 - DEBUG - oop-behavioral-2
 2020-07-13 14:15:55,593 - DEBUG -  What is Template Method behavioral design pattern?
 2020-07-13 14:15:55,593 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-07-13 14:15:55,593 - DEBUG - 18891 }
 2020-07-13 14:15:55,594 - DEBUG - 18947 }
 2020-07-13 14:15:55,594 - DEBUG - 19298 }
 2020-07-13 14:15:55,594 - DEBUG - oop-behavioral-3
 2020-07-13 14:15:55,594 - DEBUG -  What is Strategy behavioral design pattern?
 2020-07-13 14:15:55,594 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-07-13 14:15:55,594 - DEBUG - 19320 }
 2020-07-13 14:15:55,594 - DEBUG - 19379 }
 2020-07-13 14:15:55,595 - DEBUG - 19657 }
 2020-07-13 14:15:55,595 - DEBUG - oop-behavioral-4
 2020-07-13 14:15:55,595 - DEBUG -  What is the Command behavioral design pattern?
 2020-07-13 14:15:55,595 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-07-13 14:15:55,595 - DEBUG - 19679 }
 2020-07-13 14:15:55,595 - DEBUG - 19734 }
 2020-07-13 14:15:55,596 - DEBUG - 20104 }
 2020-07-13 14:15:55,596 - DEBUG - oop-behavioral-5
 2020-07-13 14:15:55,596 - DEBUG -  What is Memento behavioral design pattern?
 2020-07-13 14:15:55,596 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-07-13 14:15:55,596 - DEBUG - 20126 }
 2020-07-13 14:15:55,596 - DEBUG - 20182 }
 2020-07-13 14:15:55,597 - DEBUG - 20562 }
 2020-07-13 14:15:55,597 - DEBUG - oop-behavioral-6
 2020-07-13 14:15:55,597 - DEBUG -  What is Mediator behavioral design pattern?
 2020-07-13 14:15:55,597 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-07-13 14:15:55,597 - DEBUG - 20584 }
 2020-07-13 14:15:55,597 - DEBUG - 20637 }
 2020-07-13 14:15:55,597 - DEBUG - 20945 }
 2020-07-13 14:15:55,598 - DEBUG - oop-behavioral-7
 2020-07-13 14:15:55,598 - DEBUG -  What is State behavioral design pattern?
 2020-07-13 14:15:55,598 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-07-13 14:15:55,598 - DEBUG - 20967 }
 2020-07-13 14:15:55,598 - DEBUG - 21023 }
 2020-07-13 14:15:55,598 - DEBUG - 21457 }
 2020-07-13 14:15:55,598 - DEBUG - oop-behavioral-8
 2020-07-13 14:15:55,599 - DEBUG -  What is Observer behavioral design pattern?
 2020-07-13 14:15:55,599 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-07-13 14:15:55,599 - DEBUG - 21479 }
 2020-07-13 14:15:55,599 - DEBUG - 21535 }
 2020-07-13 14:15:55,599 - DEBUG - 21801 }
 2020-07-13 14:15:55,599 - DEBUG - oop-behavioral-9
 2020-07-13 14:15:55,599 - DEBUG -  What is Iterator behavioral design pattern.
 2020-07-13 14:15:55,599 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-07-13 14:15:55,599 - DEBUG - 21824 }
 2020-07-13 14:15:55,600 - DEBUG - 21894 }
 2020-07-13 14:15:55,600 - DEBUG - 22311 }
 2020-07-13 14:15:55,600 - DEBUG - oop-behavioral-10
 2020-07-13 14:15:55,600 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-07-13 14:15:55,600 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-07-13 14:15:55,600 - DEBUG - 22334 }
 2020-07-13 14:15:55,601 - DEBUG - 22393 }
 2020-07-13 14:15:55,601 - DEBUG - 22719 }
 2020-07-13 14:15:55,601 - DEBUG - oop-behavioral-11
 2020-07-13 14:15:55,601 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-07-13 14:15:55,601 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-07-13 14:15:55,601 - DEBUG - 22742 }
 2020-07-13 14:15:55,601 - DEBUG - 22801 }
 2020-07-13 14:15:55,602 - DEBUG - 23266 }
 2020-07-13 14:15:55,602 - DEBUG - oop-behavioral-12
 2020-07-13 14:15:55,602 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-07-13 14:15:55,602 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-07-13 14:15:55,602 - DEBUG - 23288 }
 2020-07-13 14:15:55,602 - DEBUG - 23343 }
 2020-07-13 14:15:55,603 - DEBUG - 23656 }
 2020-07-13 14:15:55,603 - DEBUG - oop-structural-4
 2020-07-13 14:15:55,603 - DEBUG -  What is Adapter structural design pattern?
 2020-07-13 14:15:55,603 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-07-13 14:15:55,603 - DEBUG - 23678 }
 2020-07-13 14:15:55,603 - DEBUG - 23735 }
 2020-07-13 14:15:55,603 - DEBUG - 24091 }
 2020-07-13 14:15:55,604 - DEBUG - oop-structural-5
 2020-07-13 14:15:55,604 - DEBUG -  What is Composite structural design pattern?
 2020-07-13 14:15:55,604 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-07-13 14:15:55,604 - DEBUG - 24113 }
 2020-07-13 14:15:55,604 - DEBUG - 24170 }
 2020-07-13 14:15:55,604 - DEBUG - 24554 }
 2020-07-13 14:15:55,604 - DEBUG - oop-structural-6
 2020-07-13 14:15:55,604 - DEBUG -  What is Decorator structural design pattern?
 2020-07-13 14:15:55,605 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-07-13 14:15:55,605 - DEBUG - 24576 }
 2020-07-13 14:15:55,605 - DEBUG - 24629 }
 2020-07-13 14:15:55,605 - DEBUG - 24995 }
 2020-07-13 14:15:55,605 - DEBUG - oop-structural-7
 2020-07-13 14:15:55,606 - DEBUG -  What is Proxy structural design pattern?
 2020-07-13 14:15:55,606 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-07-13 14:15:55,606 - DEBUG - 25017 }
 2020-07-13 14:15:55,606 - DEBUG - 25071 }
 2020-07-13 14:15:55,606 - DEBUG - 25501 }
 2020-07-13 14:15:55,606 - DEBUG - oop-structural-8
 2020-07-13 14:15:55,606 - DEBUG -  What is Facade structural design pattern?
 2020-07-13 14:15:55,607 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-07-13 14:15:55,607 - DEBUG - 25523 }
 2020-07-13 14:15:55,607 - DEBUG - 25580 }
 2020-07-13 14:15:55,607 - DEBUG - 26139 }
 2020-07-13 14:15:55,607 - DEBUG - oop-structural-9
 2020-07-13 14:15:55,607 - DEBUG -  What is Flyweight structural design pattern?
 2020-07-13 14:15:55,608 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-07-13 14:15:55,608 - DEBUG - 26162 }
 2020-07-13 14:15:55,608 - DEBUG - 26216 }
 2020-07-13 14:15:55,608 - DEBUG - 26748 }
 2020-07-13 14:15:55,608 - DEBUG - oop-structural-10
 2020-07-13 14:15:55,609 - DEBUG -  What is Bridge structural design pattern?
 2020-07-13 14:15:55,609 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-07-13 14:15:55,609 - DEBUG - 26782 }
 2020-07-13 14:15:55,609 - DEBUG - 26838 }
 2020-07-13 14:15:55,609 - DEBUG - 26980 }
 2020-07-13 14:15:55,609 - DEBUG - python-datatypes-strings-1
 2020-07-13 14:15:55,609 - DEBUG -  Describe a basic python strings definition.
 2020-07-13 14:15:55,609 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-07-13 14:15:55,609 - DEBUG - 27013 }
 2020-07-13 14:15:55,610 - DEBUG - 27073 }
 2020-07-13 14:15:55,610 - DEBUG - 27141 }
 2020-07-13 14:15:55,610 - DEBUG - python-datatypes-strings-2
 2020-07-13 14:15:55,610 - DEBUG -  How can strings be defined over multiple lines?
 2020-07-13 14:15:55,610 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-07-13 14:15:55,610 - DEBUG - 27174 }
 2020-07-13 14:15:55,610 - DEBUG - 27247 }
 2020-07-13 14:15:55,610 - DEBUG - 27409 }
 2020-07-13 14:15:55,610 - DEBUG - python-datatypes-strings-3
 2020-07-13 14:15:55,611 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-07-13 14:15:55,611 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-07-13 14:15:55,611 - DEBUG - 27442 }
 2020-07-13 14:15:55,611 - DEBUG - 27502 }
 2020-07-13 14:15:55,611 - DEBUG - 27600 }
 2020-07-13 14:15:55,611 - DEBUG - python-datatypes-strings-4
 2020-07-13 14:15:55,611 - DEBUG -  How do you iterator over the chars of a string?
 2020-07-13 14:15:55,611 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-07-13 14:15:55,611 - DEBUG - 27634 }
 2020-07-13 14:15:55,612 - DEBUG - 27685 }
 2020-07-13 14:15:55,612 - DEBUG - 27715 }
 2020-07-13 14:15:55,612 - DEBUG - python-datatypes-strings-5
 2020-07-13 14:15:55,612 - DEBUG -  How do you get the lenght of a string?
 2020-07-13 14:15:55,612 - DEBUG -  len(mystring) is 5
 2020-07-13 14:15:55,612 - DEBUG - 27748 }
 2020-07-13 14:15:55,612 - DEBUG - 27790 }
 2020-07-13 14:15:55,612 - DEBUG - 27877 }
 2020-07-13 14:15:55,613 - DEBUG - python-datatypes-strings-6
 2020-07-13 14:15:55,613 - DEBUG -  How do you merge two strings?
 2020-07-13 14:15:55,613 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-07-13 14:15:55,613 - DEBUG - 27912 }
 2020-07-13 14:15:55,613 - DEBUG - 27961 }
 2020-07-13 14:15:55,613 - DEBUG - 28039 }
 2020-07-13 14:15:55,613 - DEBUG - python-datatypes-strings-7
 2020-07-13 14:15:55,613 - DEBUG -  How do you use a number in a string?
 2020-07-13 14:15:55,613 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-07-13 14:15:55,613 - DEBUG - 28074 }
 2020-07-13 14:15:55,613 - DEBUG - 28153 }
 2020-07-13 14:15:55,613 - DEBUG - 28184 }
 2020-07-13 14:15:55,613 - DEBUG - python-datatypes-strings-8
 2020-07-13 14:15:55,613 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-07-13 14:15:55,613 - DEBUG -  mystring.split(',')
 2020-07-13 14:15:55,614 - DEBUG - 28217 }
 2020-07-13 14:15:55,614 - DEBUG - 28272 }
 2020-07-13 14:15:55,614 - DEBUG - 28300 }
 2020-07-13 14:15:55,614 - DEBUG - python-datatypes-strings-9
 2020-07-13 14:15:55,614 - DEBUG -  How do you trim white space from a string?
 2020-07-13 14:15:55,614 - DEBUG -  mystring.strip()
 2020-07-13 14:15:55,614 - DEBUG - 28334 }
 2020-07-13 14:15:55,614 - DEBUG - 28394 }
 2020-07-13 14:15:55,614 - DEBUG - 28446 }
 2020-07-13 14:15:55,615 - DEBUG - python-datatypes-strings-10
 2020-07-13 14:15:55,615 - DEBUG -  How do you convert a string to an int or float?
 2020-07-13 14:15:55,615 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-07-13 14:15:55,615 - DEBUG - 28479 }
 2020-07-13 14:15:55,615 - DEBUG - 28525 }
 2020-07-13 14:15:55,615 - DEBUG - 28640 }
 2020-07-13 14:15:55,615 - DEBUG - python-datatypes-numbers-1
 2020-07-13 14:15:55,615 - DEBUG -  Describe types of python numbers.
 2020-07-13 14:15:55,615 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-07-13 14:15:55,615 - DEBUG - 28673 }
 2020-07-13 14:15:55,616 - DEBUG - 28745 }
 2020-07-13 14:15:55,616 - DEBUG - 28893 }
 2020-07-13 14:15:55,616 - DEBUG - python-datatypes-numbers-2
 2020-07-13 14:15:55,616 - DEBUG -  How do you work with really precise real numbers in python?
 2020-07-13 14:15:55,616 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-07-13 14:15:55,616 - DEBUG - 28926 }
 2020-07-13 14:15:55,616 - DEBUG - 29001 }
 2020-07-13 14:15:55,616 - DEBUG - 29095 }
 2020-07-13 14:15:55,617 - DEBUG - python-datatypes-numbers-3
 2020-07-13 14:15:55,617 - DEBUG -  How can you work with say fractional measurements with python?
 2020-07-13 14:15:55,617 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-07-13 14:15:55,617 - DEBUG - 29128 }
 2020-07-13 14:15:55,617 - DEBUG - 29179 }
 2020-07-13 14:15:55,617 - DEBUG - 29201 }
 2020-07-13 14:15:55,617 - DEBUG - python-datatypes-numbers-4
 2020-07-13 14:15:55,617 - DEBUG -  How do the absolute value of a number?
 2020-07-13 14:15:55,617 - DEBUG -  abs(mynum)
 2020-07-13 14:15:55,617 - DEBUG - 29234 }
 2020-07-13 14:15:55,618 - DEBUG - 29284 }
 2020-07-13 14:15:55,618 - DEBUG - 29313 }
 2020-07-13 14:15:55,618 - DEBUG - python-datatypes-numbers-5
 2020-07-13 14:15:55,618 - DEBUG -  How do you raise a number to a power?
 2020-07-13 14:15:55,618 - DEBUG -  pow(power,number)
 2020-07-13 14:15:55,618 - DEBUG - 29346 }
 2020-07-13 14:15:55,618 - DEBUG - 29390 }
 2020-07-13 14:15:55,618 - DEBUG - 29426 }
 2020-07-13 14:15:55,618 - DEBUG - python-datatypes-numbers-6
 2020-07-13 14:15:55,618 - DEBUG -  How do you round a real number?
 2020-07-13 14:15:55,619 - DEBUG -  round(num,decimalplaces)
 2020-07-13 14:15:55,619 - DEBUG - 29459 }
 2020-07-13 14:15:55,619 - DEBUG - 29513 }
 2020-07-13 14:15:55,619 - DEBUG - 29681 }
 2020-07-13 14:15:55,619 - DEBUG - python-datatypes-numbers-7
 2020-07-13 14:15:55,619 - DEBUG -  Whats involved in getting random numbers?
 2020-07-13 14:15:55,619 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-07-13 14:15:55,619 - DEBUG - 29695 }
 2020-07-13 14:15:55,620 - DEBUG - 29768 }
 2020-07-13 14:15:55,620 - DEBUG - 29837 }
 2020-07-13 14:15:55,620 - DEBUG - uml-1
 2020-07-13 14:15:55,620 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-07-13 14:15:55,620 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-07-13 14:15:55,620 - DEBUG - 29848 }
 2020-07-13 14:15:55,620 - DEBUG - 29892 }
 2020-07-13 14:15:55,620 - DEBUG - 29989 }
 2020-07-13 14:15:55,620 - DEBUG - uml-2
 2020-07-13 14:15:55,620 - DEBUG -  What is an interaction diagram?
 2020-07-13 14:15:55,621 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-07-13 14:15:55,621 - DEBUG - 30000 }
 2020-07-13 14:15:55,621 - DEBUG - 30041 }
 2020-07-13 14:15:55,621 - DEBUG - 30351 }
 2020-07-13 14:15:55,621 - DEBUG - uml-3
 2020-07-13 14:15:55,621 - DEBUG -  What is a structure diagram?
 2020-07-13 14:15:55,621 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-07-13 14:15:55,621 - DEBUG - 30362 }
 2020-07-13 14:15:55,622 - DEBUG - 30402 }
 2020-07-13 14:15:55,622 - DEBUG - 30516 }
 2020-07-13 14:15:55,622 - DEBUG - uml-4
 2020-07-13 14:15:55,622 - DEBUG -  What is a behavior diagram?
 2020-07-13 14:15:55,622 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-07-13 14:15:55,622 - DEBUG - 30537 }
 2020-07-13 14:15:55,622 - DEBUG - 30588 }
 2020-07-13 14:15:55,622 - DEBUG - 30670 }
 2020-07-13 14:15:55,622 - DEBUG - uml-structure-1
 2020-07-13 14:15:55,623 - DEBUG -  Name the seven UML structure diagrams.
 2020-07-13 14:15:55,623 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-07-13 14:15:55,623 - DEBUG - 30690 }
 2020-07-13 14:15:55,623 - DEBUG - 30755 }
 2020-07-13 14:15:55,623 - DEBUG - 30815 }
 2020-07-13 14:15:55,623 - DEBUG - uml-behavior-1
 2020-07-13 14:15:55,623 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-07-13 14:15:55,623 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-07-13 14:15:55,623 - DEBUG - 30838 }
 2020-07-13 14:15:55,623 - DEBUG - 30895 }
 2020-07-13 14:15:55,624 - DEBUG - 30960 }
 2020-07-13 14:15:55,624 - DEBUG - uml-interaction-1
 2020-07-13 14:15:55,624 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-07-13 14:15:55,624 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-07-13 14:15:55,624 - DEBUG - 30971 }
 2020-07-13 14:15:55,624 - DEBUG - 31015 }
 2020-07-13 14:15:55,624 - DEBUG - 31049 }
 2020-07-13 14:15:55,624 - DEBUG - uml-2
 2020-07-13 14:15:55,624 - DEBUG -  How many uml digrams are there?
 2020-07-13 14:15:55,624 - DEBUG -  Around 14 give or take.
 2020-07-13 14:15:55,624 - DEBUG - 31070 }
 2020-07-13 14:15:55,625 - DEBUG - 31121 }
 2020-07-13 14:15:55,625 - DEBUG - 31369 }
 2020-07-13 14:15:55,625 - DEBUG - uml-structure-2
 2020-07-13 14:15:55,625 - DEBUG -  Describe the structure Package diagram
 2020-07-13 14:15:55,625 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-07-13 14:15:55,625 - DEBUG - 31390 }
 2020-07-13 14:15:55,625 - DEBUG - 31440 }
 2020-07-13 14:15:55,626 - DEBUG - 31713 }
 2020-07-13 14:15:55,626 - DEBUG - uml-structure-3
 2020-07-13 14:15:55,626 - DEBUG -  Describe the structure Class diagram.
 2020-07-13 14:15:55,626 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-07-13 14:15:55,626 - DEBUG - 31734 }
 2020-07-13 14:15:55,626 - DEBUG - 31785 }
 2020-07-13 14:15:55,626 - DEBUG - 31919 }
 2020-07-13 14:15:55,627 - DEBUG - uml-structure-4
 2020-07-13 14:15:55,627 - DEBUG -  Describe the structure Object diagram.
 2020-07-13 14:15:55,627 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-07-13 14:15:55,627 - DEBUG - 31940 }
 2020-07-13 14:15:55,627 - DEBUG - 31994 }
 2020-07-13 14:15:55,627 - DEBUG - 32246 }
 2020-07-13 14:15:55,627 - DEBUG - uml-structure-5
 2020-07-13 14:15:55,627 - DEBUG -  Describe the structure Component diagram.
 2020-07-13 14:15:55,627 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-07-13 14:15:55,628 - DEBUG - 32267 }
 2020-07-13 14:15:55,628 - DEBUG - 32321 }
 2020-07-13 14:15:55,628 - DEBUG - 32658 }
 2020-07-13 14:15:55,628 - DEBUG - uml-structure-6
 2020-07-13 14:15:55,628 - DEBUG -  Describe the structure Composite diagram.
 2020-07-13 14:15:55,628 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-07-13 14:15:55,628 - DEBUG - 32679 }
 2020-07-13 14:15:55,629 - DEBUG - 32736 }
 2020-07-13 14:15:55,629 - DEBUG - 32924 }
 2020-07-13 14:15:55,629 - DEBUG - uml-structure-7
 2020-07-13 14:15:55,629 - DEBUG -  Describe the structure Collaboration diagram
 2020-07-13 14:15:55,629 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-07-13 14:15:55,629 - DEBUG - 32945 }
 2020-07-13 14:15:55,629 - DEBUG - 33000 }
 2020-07-13 14:15:55,630 - DEBUG - 33308 }
 2020-07-13 14:15:55,630 - DEBUG - uml-structure-8
 2020-07-13 14:15:55,630 - DEBUG -  Describe the structure Deployment diagram.
 2020-07-13 14:15:55,630 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-07-13 14:15:55,630 - DEBUG - 33328 }
 2020-07-13 14:15:55,630 - DEBUG - 33380 }
 2020-07-13 14:15:55,630 - DEBUG - 33546 }
 2020-07-13 14:15:55,630 - DEBUG - uml-behavior-1
 2020-07-13 14:15:55,630 - DEBUG -  Describe the behavior Activity diagram.
 2020-07-13 14:15:55,631 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-07-13 14:15:55,631 - DEBUG - 33566 }
 2020-07-13 14:15:55,631 - DEBUG - 33618 }
 2020-07-13 14:15:55,631 - DEBUG - 33863 }
 2020-07-13 14:15:55,631 - DEBUG - uml-behavior-2
 2020-07-13 14:15:55,631 - DEBUG -  Describe the behavior Use Case diagram.
 2020-07-13 14:15:55,631 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-07-13 14:15:55,631 - DEBUG - 33883 }
 2020-07-13 14:15:55,632 - DEBUG - 33932 }
 2020-07-13 14:15:55,632 - DEBUG - 34238 }
 2020-07-13 14:15:55,632 - DEBUG - uml-behavior-3
 2020-07-13 14:15:55,632 - DEBUG -  Describe the behavior State diagram.
 2020-07-13 14:15:55,632 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-07-13 14:15:55,632 - DEBUG - 34261 }
 2020-07-13 14:15:55,633 - DEBUG - 34316 }
 2020-07-13 14:15:55,633 - DEBUG - 34474 }
 2020-07-13 14:15:55,633 - DEBUG - uml-interaction-2
 2020-07-13 14:15:55,633 - DEBUG -  Describe the interaction Sequence diagram.
 2020-07-13 14:15:55,633 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-07-13 14:15:55,633 - DEBUG - 34497 }
 2020-07-13 14:15:55,633 - DEBUG - 34550 }
 2020-07-13 14:15:55,633 - DEBUG - 34800 }
 2020-07-13 14:15:55,634 - DEBUG - uml-interaction-3
 2020-07-13 14:15:55,634 - DEBUG -  Describe the interaction Timing diagram.
 2020-07-13 14:15:55,634 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-07-13 14:15:55,634 - DEBUG - 34823 }
 2020-07-13 14:15:55,634 - DEBUG - 34884 }
 2020-07-13 14:15:55,634 - DEBUG - 35155 }
 2020-07-13 14:15:55,634 - DEBUG - uml-interaction-4
 2020-07-13 14:15:55,634 - DEBUG -  Describe the interaction Communications diagram.
 2020-07-13 14:15:55,634 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-07-13 14:15:55,635 - DEBUG - 35178 }
 2020-07-13 14:15:55,635 - DEBUG - 35245 }
 2020-07-13 14:15:55,635 - DEBUG - 35403 }
 2020-07-13 14:15:55,635 - DEBUG - uml-interaction-5
 2020-07-13 14:15:55,635 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-07-13 14:15:55,635 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-07-13 14:15:55,636 - DEBUG - algo_cards
 2020-07-13 14:15:55,636 - DEBUG - box1
 2020-07-13 14:15:55,644 - DEBUG - algo_cards
 2020-07-13 14:15:55,645 - DEBUG - box1
 2020-07-13 14:15:55,645 - DEBUG - box2
 2020-07-13 14:15:55,653 - DEBUG - algo_cards
 2020-07-13 14:15:55,653 - DEBUG - box1
 2020-07-13 14:15:55,653 - DEBUG - box2
 2020-07-13 14:15:55,653 - DEBUG - box3
 2020-07-13 14:15:55,661 - DEBUG - algo_cards
 2020-07-13 14:15:55,661 - DEBUG - box1
 2020-07-13 14:15:55,661 - DEBUG - box2
 2020-07-13 14:15:55,661 - DEBUG - box3
 2020-07-13 14:15:55,661 - DEBUG - box4
 2020-07-13 14:15:55,663 - DEBUG - algo_cards
 2020-07-13 14:15:55,664 - DEBUG - box1
 2020-07-13 14:15:55,664 - DEBUG - box2
 2020-07-13 14:15:55,664 - DEBUG - box3
 2020-07-13 14:15:55,664 - DEBUG - box4
 2020-07-13 14:15:55,664 - DEBUG - box5
 2020-07-13 14:15:55,666 - DEBUG - algo_cards
 2020-07-13 14:15:55,666 - DEBUG - box1
 2020-07-13 14:15:55,666 - DEBUG - box2
 2020-07-13 14:15:55,666 - DEBUG - box3
 2020-07-13 14:15:55,666 - DEBUG - box4
 2020-07-13 14:15:55,666 - DEBUG - box5
 2020-07-13 14:15:55,667 - DEBUG - box6
 2020-07-13 14:15:55,668 - DEBUG - finding test cycle file
 2020-07-13 14:15:55,668 - DEBUG - quizs\
 2020-07-13 14:15:55,668 - DEBUG - algo_cards.txt
 2020-07-13 14:15:55,668 - DEBUG - box1.txt
 2020-07-13 14:15:55,668 - DEBUG - box2.txt
 2020-07-13 14:15:55,669 - DEBUG - box3.txt
 2020-07-13 14:15:55,669 - DEBUG - box4.txt
 2020-07-13 14:15:55,669 - DEBUG - box5.txt
 2020-07-13 14:15:55,669 - DEBUG - box6.txt
 2020-07-13 14:15:55,669 - DEBUG - data_struct_cards.txt
 2020-07-13 14:15:55,669 - DEBUG - oop_cards.txt
 2020-07-13 14:15:55,669 - DEBUG - python_cards.txt
 2020-07-13 14:15:55,669 - DEBUG - testcycle2.txt
 2020-07-13 14:15:55,669 - DEBUG - uml_cards.txt
 2020-07-13 14:15:55,670 - DEBUG - algo_cards
 2020-07-13 14:15:55,670 - DEBUG - box1
 2020-07-13 14:15:55,670 - DEBUG - box2
 2020-07-13 14:15:55,670 - DEBUG - box3
 2020-07-13 14:15:55,670 - DEBUG - box4
 2020-07-13 14:15:55,670 - DEBUG - box5
 2020-07-13 14:15:55,671 - DEBUG - box6
 2020-07-13 14:15:55,671 - DEBUG - data_struct_cards
 2020-07-13 14:15:55,671 - DEBUG - oop_cards
 2020-07-13 14:15:55,671 - DEBUG - python_cards
 2020-07-13 14:15:55,671 - DEBUG - testcycle2
 2020-07-13 14:15:55,671 - DEBUG - found testcycle2.txt
 2020-07-13 14:15:55,671 - DEBUG - testcycle2
 2020-07-13 14:15:55,671 - DEBUG - quizs\
 2020-07-13 14:15:55,682 - DEBUG - Cycle number 2
 2020-07-13 14:16:46,397 - DEBUG - Moving to Box
 2020-07-13 14:16:46,398 - DEBUG - Remove From Box
 2020-07-13 14:16:46,400 - DEBUG - Add To Box
 2020-07-13 14:16:46,402 - DEBUG - Remove From Test Cycle
 2020-07-13 14:16:46,402 - DEBUG - Save Test Cycle
 2020-07-13 14:31:57,172 - DEBUG - Remove From Test Cycle
 2020-07-13 14:31:57,183 - DEBUG - Save Test Cycle
 2020-07-13 14:32:49,958 - DEBUG - Remove From Test Cycle
 2020-07-13 14:32:49,968 - DEBUG - Save Test Cycle
 2020-07-13 17:29:39,651 - DEBUG - Moving to Box
 2020-07-13 17:29:39,652 - DEBUG - Remove From Box
 2020-07-13 17:29:39,663 - DEBUG - Add To Box
 2020-07-13 17:29:39,664 - DEBUG - Remove From Test Cycle
 2020-07-13 17:29:39,673 - DEBUG - Save Test Cycle
 2020-07-13 17:30:42,332 - DEBUG - Remove From Test Cycle
 2020-07-13 17:30:42,341 - DEBUG - Save Test Cycle
 2020-07-13 17:36:25,547 - DEBUG - Moving to Box
 2020-07-13 17:36:25,548 - DEBUG - Remove From Box
 2020-07-13 17:36:25,550 - DEBUG - Add To Box
 2020-07-13 17:36:25,558 - DEBUG - Remove From Test Cycle
 2020-07-13 17:36:25,568 - DEBUG - Save Test Cycle
 2020-07-13 17:37:46,180 - DEBUG - Moving to Box
 2020-07-13 17:37:46,180 - DEBUG - Remove From Box
 2020-07-13 17:37:46,191 - DEBUG - Add To Box
 2020-07-13 17:37:46,200 - DEBUG - Remove From Test Cycle
 2020-07-13 17:37:46,209 - DEBUG - Save Test Cycle
 2020-07-13 17:39:02,748 - DEBUG - Moving to Box
 2020-07-13 17:39:02,748 - DEBUG - Remove From Box
 2020-07-13 17:39:02,759 - DEBUG - Add To Box
 2020-07-13 17:39:02,767 - DEBUG - Remove From Test Cycle
 2020-07-13 17:39:02,776 - DEBUG - Save Test Cycle
 2020-07-13 17:40:01,724 - DEBUG - Remove From Test Cycle
 2020-07-13 17:40:01,734 - DEBUG - Save Test Cycle
 2020-07-13 17:41:24,896 - DEBUG - Remove From Test Cycle
 2020-07-13 17:41:24,906 - DEBUG - Save Test Cycle
 2020-07-13 17:44:16,677 - DEBUG - Moving to Box
 2020-07-13 17:44:16,678 - DEBUG - Remove From Box
 2020-07-13 17:44:16,687 - DEBUG - Add To Box
 2020-07-13 17:44:16,696 - DEBUG - Remove From Test Cycle
 2020-07-13 17:44:16,705 - DEBUG - Save Test Cycle
 2020-07-13 17:46:57,969 - DEBUG - Moving to Box
 2020-07-13 17:46:57,970 - DEBUG - Remove From Box
 2020-07-13 17:46:57,980 - DEBUG - Add To Box
 2020-07-13 17:46:57,989 - DEBUG - Remove From Test Cycle
 2020-07-13 17:46:57,998 - DEBUG - Save Test Cycle
 2020-07-13 17:48:32,569 - DEBUG - Moving to Box
 2020-07-13 17:48:32,570 - DEBUG - Remove From Box
 2020-07-13 17:48:32,579 - DEBUG - Add To Box
 2020-07-13 17:48:32,589 - DEBUG - Remove From Test Cycle
 2020-07-13 17:48:32,598 - DEBUG - Save Test Cycle
 2020-07-13 17:49:11,135 - DEBUG - Moving to Box
 2020-07-13 17:49:11,136 - DEBUG - Remove From Box
 2020-07-13 17:49:11,147 - DEBUG - Add To Box
 2020-07-13 17:49:11,155 - DEBUG - Remove From Test Cycle
 2020-07-13 17:49:11,163 - DEBUG - Save Test Cycle
 2020-07-13 17:50:01,392 - DEBUG - Moving to Box
 2020-07-13 17:50:01,393 - DEBUG - Remove From Box
 2020-07-13 17:50:01,403 - DEBUG - Add To Box
 2020-07-13 17:50:01,412 - DEBUG - Remove From Test Cycle
 2020-07-13 17:50:01,420 - DEBUG - Save Test Cycle
 2020-07-13 17:51:05,337 - DEBUG - Moving to Box
 2020-07-13 17:51:05,337 - DEBUG - Remove From Box
 2020-07-13 17:51:05,348 - DEBUG - Add To Box
 2020-07-13 17:51:05,356 - DEBUG - Remove From Test Cycle
 2020-07-13 17:51:05,365 - DEBUG - Save Test Cycle
 2020-07-13 17:51:59,726 - DEBUG - Moving to Box
 2020-07-13 17:51:59,726 - DEBUG - Remove From Box
 2020-07-13 17:51:59,737 - DEBUG - Add To Box
 2020-07-13 17:51:59,746 - DEBUG - Remove From Test Cycle
 2020-07-13 17:51:59,754 - DEBUG - Save Test Cycle
 2020-07-13 17:52:16,380 - DEBUG - Moving to Box
 2020-07-13 17:52:16,381 - DEBUG - Remove From Box
 2020-07-13 17:52:16,390 - DEBUG - Add To Box
 2020-07-13 17:52:16,399 - DEBUG - Remove From Test Cycle
 2020-07-13 17:52:16,408 - DEBUG - Save Test Cycle
 2020-07-13 17:53:12,686 - DEBUG - Moving to Box
 2020-07-13 17:53:12,687 - DEBUG - Remove From Box
 2020-07-13 17:53:12,699 - DEBUG - Add To Box
 2020-07-13 17:53:12,708 - DEBUG - Remove From Test Cycle
 2020-07-13 17:53:12,715 - DEBUG - Save Test Cycle
 2020-07-13 17:53:33,405 - DEBUG - Moving to Box
 2020-07-13 17:53:33,405 - DEBUG - Remove From Box
 2020-07-13 17:53:33,414 - DEBUG - Add To Box
 2020-07-13 17:53:33,427 - DEBUG - Remove From Test Cycle
 2020-07-13 17:53:33,436 - DEBUG - Save Test Cycle
 2020-07-13 18:07:24,702 - DEBUG - Moving to Box
 2020-07-13 18:07:24,702 - DEBUG - Remove From Box
 2020-07-13 18:07:24,712 - DEBUG - Add To Box
 2020-07-13 18:07:24,722 - DEBUG - Remove From Test Cycle
 2020-07-13 18:07:24,731 - DEBUG - Save Test Cycle
 2020-07-13 18:07:54,976 - DEBUG - Moving to Box
 2020-07-13 18:07:54,976 - DEBUG - Remove From Box
 2020-07-13 18:07:54,985 - DEBUG - Add To Box
 2020-07-13 18:07:54,994 - DEBUG - Remove From Test Cycle
 2020-07-13 18:07:55,003 - DEBUG - Save Test Cycle
 2020-07-13 18:08:34,474 - DEBUG - Moving to Box
 2020-07-13 18:08:34,475 - DEBUG - Remove From Box
 2020-07-13 18:08:34,486 - DEBUG - Add To Box
 2020-07-13 18:08:34,495 - DEBUG - Remove From Test Cycle
 2020-07-13 18:08:34,504 - DEBUG - Save Test Cycle
 2020-07-13 18:09:00,554 - DEBUG - Moving to Box
 2020-07-13 18:09:00,555 - DEBUG - Remove From Box
 2020-07-13 18:09:00,564 - DEBUG - Add To Box
 2020-07-13 18:09:00,572 - DEBUG - Remove From Test Cycle
 2020-07-13 18:09:00,580 - DEBUG - Save Test Cycle
 2020-07-13 18:09:42,310 - DEBUG - Moving to Box
 2020-07-13 18:09:42,310 - DEBUG - Remove From Box
 2020-07-13 18:09:42,321 - DEBUG - Add To Box
 2020-07-13 18:09:42,329 - DEBUG - Remove From Test Cycle
 2020-07-13 18:09:42,337 - DEBUG - Save Test Cycle
 2020-07-13 18:10:00,246 - DEBUG - Moving to Box
 2020-07-13 18:10:00,246 - DEBUG - Remove From Box
 2020-07-13 18:10:00,256 - DEBUG - Add To Box
 2020-07-13 18:10:00,264 - DEBUG - Remove From Test Cycle
 2020-07-13 18:10:00,273 - DEBUG - Save Test Cycle
 2020-07-13 18:11:17,128 - DEBUG - Moving to Box
 2020-07-13 18:11:17,128 - DEBUG - Remove From Box
 2020-07-13 18:11:17,140 - DEBUG - Add To Box
 2020-07-13 18:11:17,148 - DEBUG - Remove From Test Cycle
 2020-07-13 18:11:17,156 - DEBUG - Save Test Cycle
 2020-07-14 21:22:06,775 - DEBUG - Start of Logging Leitner Module
 2020-07-14 21:22:06,775 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-14 21:22:06,775 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-14 21:22:06,775 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-14 21:22:06,775 - INFO - on things you get right.
 2020-07-14 21:22:06,853 - DEBUG - c:\dev2\github\python\quiz
 2020-07-14 21:22:06,900 - DEBUG - 15 }
 2020-07-14 21:22:06,900 - DEBUG - 57 }
 2020-07-14 21:22:06,900 - DEBUG - 225 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-1
 2020-07-14 21:22:06,900 - DEBUG -  What is algorithm efficiency?
 2020-07-14 21:22:06,900 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-07-14 21:22:06,900 - DEBUG - 242 }
 2020-07-14 21:22:06,900 - DEBUG - 324 }
 2020-07-14 21:22:06,900 - DEBUG - 403 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-2
 2020-07-14 21:22:06,900 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-07-14 21:22:06,900 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-07-14 21:22:06,900 - DEBUG - 420 }
 2020-07-14 21:22:06,900 - DEBUG - 502 }
 2020-07-14 21:22:06,900 - DEBUG - 531 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-3
 2020-07-14 21:22:06,900 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-07-14 21:22:06,900 - DEBUG -  Little O notation.
 2020-07-14 21:22:06,900 - DEBUG - 554 }
 2020-07-14 21:22:06,900 - DEBUG - 597 }
 2020-07-14 21:22:06,900 - DEBUG - 846 }
 2020-07-14 21:22:06,900 - DEBUG - alogorithm-bigo-1
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(1) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-07-14 21:22:06,900 - DEBUG - 868 }
 2020-07-14 21:22:06,900 - DEBUG - 911 }
 2020-07-14 21:22:06,900 - DEBUG - 1271 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-2
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(n) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-07-14 21:22:06,900 - DEBUG - 1293 }
 2020-07-14 21:22:06,900 - DEBUG - 1338 }
 2020-07-14 21:22:06,900 - DEBUG - 1581 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-3
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(n^2) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-07-14 21:22:06,900 - DEBUG - 1603 }
 2020-07-14 21:22:06,900 - DEBUG - 1650 }
 2020-07-14 21:22:06,900 - DEBUG - 1941 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-4
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(log n) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-07-14 21:22:06,900 - DEBUG - 1963 }
 2020-07-14 21:22:06,900 - DEBUG - 2008 }
 2020-07-14 21:22:06,900 - DEBUG - 2088 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-5
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(n^c) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-07-14 21:22:06,900 - DEBUG - 2110 }
 2020-07-14 21:22:06,900 - DEBUG - 2155 }
 2020-07-14 21:22:06,900 - DEBUG - 2250 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-6
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(c^n) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-07-14 21:22:06,900 - DEBUG - 2272 }
 2020-07-14 21:22:06,900 - DEBUG - 2321 }
 2020-07-14 21:22:06,900 - DEBUG - 2517 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-7
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(n log n) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-07-14 21:22:06,900 - DEBUG - 2539 }
 2020-07-14 21:22:06,900 - DEBUG - 2606 }
 2020-07-14 21:22:06,900 - DEBUG - 2693 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-8
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-07-14 21:22:06,900 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-07-14 21:22:06,900 - DEBUG - 2715 }
 2020-07-14 21:22:06,900 - DEBUG - 2765 }
 2020-07-14 21:22:06,900 - DEBUG - 2893 }
 2020-07-14 21:22:06,900 - DEBUG - algorithm-bigo-9
 2020-07-14 21:22:06,900 - DEBUG -  Describe O(n log* n) time complexity.
 2020-07-14 21:22:06,900 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-07-14 21:22:06,900 - DEBUG - 2915 }
 2020-07-14 21:22:06,900 - DEBUG - 2959 }
 2020-07-14 21:22:06,900 - DEBUG - 3176 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-9
 2020-07-14 21:22:06,915 - DEBUG -  Describe O(n!) time complexity.
 2020-07-14 21:22:06,915 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-07-14 21:22:06,915 - DEBUG - 3199 }
 2020-07-14 21:22:06,915 - DEBUG - 3250 }
 2020-07-14 21:22:06,915 - DEBUG - 3415 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-10
 2020-07-14 21:22:06,915 - DEBUG -  Describe O(log log n) time complexity.
 2020-07-14 21:22:06,915 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-07-14 21:22:06,915 - DEBUG - 3438 }
 2020-07-14 21:22:06,915 - DEBUG - 3493 }
 2020-07-14 21:22:06,915 - DEBUG - 3618 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-11
 2020-07-14 21:22:06,915 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-07-14 21:22:06,915 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-07-14 21:22:06,915 - DEBUG - 3641 }
 2020-07-14 21:22:06,915 - DEBUG - 3686 }
 2020-07-14 21:22:06,915 - DEBUG - 3838 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-12
 2020-07-14 21:22:06,915 - DEBUG -  Describe O(n^3) time complexity.
 2020-07-14 21:22:06,915 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-07-14 21:22:06,915 - DEBUG - 3861 }
 2020-07-14 21:22:06,915 - DEBUG - 3916 }
 2020-07-14 21:22:06,915 - DEBUG - 4018 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-13
 2020-07-14 21:22:06,915 - DEBUG -  What is the rule about constants in Big O?
 2020-07-14 21:22:06,915 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-07-14 21:22:06,915 - DEBUG - 4041 }
 2020-07-14 21:22:06,915 - DEBUG - 4094 }
 2020-07-14 21:22:06,915 - DEBUG - 4229 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-14
 2020-07-14 21:22:06,915 - DEBUG -  What is the transivtivity rule in Big O?
 2020-07-14 21:22:06,915 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-07-14 21:22:06,915 - DEBUG - 4252 }
 2020-07-14 21:22:06,915 - DEBUG - 4299 }
 2020-07-14 21:22:06,915 - DEBUG - 4365 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-15
 2020-07-14 21:22:06,915 - DEBUG -  What is the rule of sums in Big O?
 2020-07-14 21:22:06,915 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-07-14 21:22:06,915 - DEBUG - 4388 }
 2020-07-14 21:22:06,915 - DEBUG - 4439 }
 2020-07-14 21:22:06,915 - DEBUG - 4545 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-16
 2020-07-14 21:22:06,915 - DEBUG -  What is the rule of products in Big O?
 2020-07-14 21:22:06,915 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-07-14 21:22:06,915 - DEBUG - 4568 }
 2020-07-14 21:22:06,915 - DEBUG - 4613 }
 2020-07-14 21:22:06,915 - DEBUG - 4720 }
 2020-07-14 21:22:06,915 - DEBUG - algorithm-bigo-17
 2020-07-14 21:22:06,915 - DEBUG -  What is the limit rule in Big O?
 2020-07-14 21:22:06,915 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-07-14 21:22:06,915 - DEBUG - 4742 }
 2020-07-14 21:22:06,915 - DEBUG - 4806 }
 2020-07-14 21:22:06,915 - DEBUG - 4927 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-1
 2020-07-14 21:22:06,915 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-07-14 21:22:06,915 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-07-14 21:22:06,915 - DEBUG - 4950 }
 2020-07-14 21:22:06,915 - DEBUG - 5021 }
 2020-07-14 21:22:06,915 - DEBUG - 5096 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-2
 2020-07-14 21:22:06,915 - DEBUG -  Name seven common names for main types of data structures.
 2020-07-14 21:22:06,915 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-07-14 21:22:06,915 - DEBUG - 5119 }
 2020-07-14 21:22:06,915 - DEBUG - 5169 }
 2020-07-14 21:22:06,915 - DEBUG - 5250 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-3
 2020-07-14 21:22:06,915 - DEBUG -  List kinds of Linked data structures.
 2020-07-14 21:22:06,915 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-07-14 21:22:06,915 - DEBUG - 5273 }
 2020-07-14 21:22:06,915 - DEBUG - 5344 }
 2020-07-14 21:22:06,915 - DEBUG - 5390 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-4
 2020-07-14 21:22:06,915 - DEBUG -  List alternative language names for Vector dat structures.
 2020-07-14 21:22:06,915 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-07-14 21:22:06,915 - DEBUG - 5413 }
 2020-07-14 21:22:06,915 - DEBUG - 5447 }
 2020-07-14 21:22:06,915 - DEBUG - 5479 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-5
 2020-07-14 21:22:06,915 - DEBUG -  List kinds of Queues.
 2020-07-14 21:22:06,915 - DEBUG -  Queue, Piority Queue.
 2020-07-14 21:22:06,915 - DEBUG - 5502 }
 2020-07-14 21:22:06,915 - DEBUG - 5553 }
 2020-07-14 21:22:06,915 - DEBUG - 5614 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-6
 2020-07-14 21:22:06,915 - DEBUG -  List alternate names for Dictionaries.
 2020-07-14 21:22:06,915 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-07-14 21:22:06,915 - DEBUG - 5637 }
 2020-07-14 21:22:06,915 - DEBUG - 5680 }
 2020-07-14 21:22:06,915 - DEBUG - 5746 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-7
 2020-07-14 21:22:06,915 - DEBUG -  List some main kinds of Trees.
 2020-07-14 21:22:06,915 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-07-14 21:22:06,915 - DEBUG - 5769 }
 2020-07-14 21:22:06,915 - DEBUG - 5829 }
 2020-07-14 21:22:06,915 - DEBUG - 5922 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-8
 2020-07-14 21:22:06,915 - DEBUG -  List types of arrays and array like structures.
 2020-07-14 21:22:06,915 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-07-14 21:22:06,915 - DEBUG - 5945 }
 2020-07-14 21:22:06,915 - DEBUG - 6050 }
 2020-07-14 21:22:06,915 - DEBUG - 6359 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-9
 2020-07-14 21:22:06,915 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-07-14 21:22:06,915 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-07-14 21:22:06,915 - DEBUG - 6383 }
 2020-07-14 21:22:06,915 - DEBUG - 6428 }
 2020-07-14 21:22:06,915 - DEBUG - 6848 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-10
 2020-07-14 21:22:06,915 - DEBUG -  What is a linked data structure?
 2020-07-14 21:22:06,915 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-07-14 21:22:06,915 - DEBUG - 6872 }
 2020-07-14 21:22:06,915 - DEBUG - 6905 }
 2020-07-14 21:22:06,915 - DEBUG - 6937 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-11
 2020-07-14 21:22:06,915 - DEBUG -  List kinds of Graphs
 2020-07-14 21:22:06,915 - DEBUG -  Graph and Scene Graph
 2020-07-14 21:22:06,915 - DEBUG - 6961 }
 2020-07-14 21:22:06,915 - DEBUG - 6988 }
 2020-07-14 21:22:06,915 - DEBUG - 7456 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-12
 2020-07-14 21:22:06,915 - DEBUG -  Describe List.
 2020-07-14 21:22:06,915 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-07-14 21:22:06,915 - DEBUG - 7480 }
 2020-07-14 21:22:06,915 - DEBUG - 7511 }
 2020-07-14 21:22:06,915 - DEBUG - 7625 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-13
 2020-07-14 21:22:06,915 - DEBUG -  Describe a Vector.
 2020-07-14 21:22:06,915 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-07-14 21:22:06,915 - DEBUG - 7649 }
 2020-07-14 21:22:06,915 - DEBUG - 7675 }
 2020-07-14 21:22:06,915 - DEBUG - 7840 }
 2020-07-14 21:22:06,915 - DEBUG - data_structures-14
 2020-07-14 21:22:06,915 - DEBUG -  Describe Set.
 2020-07-14 21:22:06,915 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-07-14 21:22:06,915 - DEBUG - 7864 }
 2020-07-14 21:22:06,915 - DEBUG - 7894 }
 2020-07-14 21:22:06,931 - DEBUG - 8360 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-15
 2020-07-14 21:22:06,931 - DEBUG -  Describe a Stack.
 2020-07-14 21:22:06,931 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-07-14 21:22:06,931 - DEBUG - 8384 }
 2020-07-14 21:22:06,931 - DEBUG - 8414 }
 2020-07-14 21:22:06,931 - DEBUG - 8949 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-16
 2020-07-14 21:22:06,931 - DEBUG -  Describe a queue.
 2020-07-14 21:22:06,931 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-07-14 21:22:06,931 - DEBUG - 8973 }
 2020-07-14 21:22:06,931 - DEBUG - 9008 }
 2020-07-14 21:22:06,931 - DEBUG - 9456 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-17
 2020-07-14 21:22:06,931 - DEBUG -  Describe a Dictionary.
 2020-07-14 21:22:06,931 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-07-14 21:22:06,931 - DEBUG - 9480 }
 2020-07-14 21:22:06,931 - DEBUG - 9525 }
 2020-07-14 21:22:06,931 - DEBUG - 10271 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-18
 2020-07-14 21:22:06,931 - DEBUG -  Describe a Tree data structures.
 2020-07-14 21:22:06,931 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-07-14 21:22:06,931 - DEBUG - 10295 }
 2020-07-14 21:22:06,931 - DEBUG - 10325 }
 2020-07-14 21:22:06,931 - DEBUG - 10932 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-19
 2020-07-14 21:22:06,931 - DEBUG -  Describe a Graph.
 2020-07-14 21:22:06,931 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-07-14 21:22:06,931 - DEBUG - 10960 }
 2020-07-14 21:22:06,931 - DEBUG - 11042 }
 2020-07-14 21:22:06,931 - DEBUG - 11361 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-java-1
 2020-07-14 21:22:06,931 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-07-14 21:22:06,931 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-07-14 21:22:06,931 - DEBUG - 11389 }
 2020-07-14 21:22:06,931 - DEBUG - 11460 }
 2020-07-14 21:22:06,931 - DEBUG - 11641 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-java-2
 2020-07-14 21:22:06,931 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-07-14 21:22:06,931 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-07-14 21:22:06,931 - DEBUG - 11669 }
 2020-07-14 21:22:06,931 - DEBUG - 11714 }
 2020-07-14 21:22:06,931 - DEBUG - 11877 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-java-3
 2020-07-14 21:22:06,931 - DEBUG -  Describe java boolean primitive.
 2020-07-14 21:22:06,931 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-07-14 21:22:06,931 - DEBUG - 11905 }
 2020-07-14 21:22:06,931 - DEBUG - 11943 }
 2020-07-14 21:22:06,931 - DEBUG - 12272 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-java-4
 2020-07-14 21:22:06,931 - DEBUG -  Describe java references.
 2020-07-14 21:22:06,931 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-07-14 21:22:06,931 - DEBUG - 12296 }
 2020-07-14 21:22:06,931 - DEBUG - 12375 }
 2020-07-14 21:22:06,931 - DEBUG - 12458 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-20
 2020-07-14 21:22:06,931 - DEBUG -  What do modern programming languages usually call data structures?
 2020-07-14 21:22:06,931 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-07-14 21:22:06,931 - DEBUG - 12492 }
 2020-07-14 21:22:06,931 - DEBUG - 12532 }
 2020-07-14 21:22:06,931 - DEBUG - 12826 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-javascript-1
 2020-07-14 21:22:06,931 - DEBUG -  Name JavaScript primitives.
 2020-07-14 21:22:06,931 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-07-14 21:22:06,931 - DEBUG - 12850 }
 2020-07-14 21:22:06,931 - DEBUG - 12956 }
 2020-07-14 21:22:06,931 - DEBUG - 13123 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-21
 2020-07-14 21:22:06,931 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-07-14 21:22:06,931 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-07-14 21:22:06,931 - DEBUG - 13153 }
 2020-07-14 21:22:06,931 - DEBUG - 13189 }
 2020-07-14 21:22:06,931 - DEBUG - 13247 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-python-1
 2020-07-14 21:22:06,931 - DEBUG -  List python primitives.
 2020-07-14 21:22:06,931 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-07-14 21:22:06,931 - DEBUG - 13277 }
 2020-07-14 21:22:06,931 - DEBUG - 13309 }
 2020-07-14 21:22:06,931 - DEBUG - 13422 }
 2020-07-14 21:22:06,931 - DEBUG - data_structures-csharp-1
 2020-07-14 21:22:06,931 - DEBUG -  List c# primitives.
 2020-07-14 21:22:06,931 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-07-14 21:22:06,931 - DEBUG - 13434 }
 2020-07-14 21:22:06,931 - DEBUG - 13477 }
 2020-07-14 21:22:06,931 - DEBUG - 13821 }
 2020-07-14 21:22:06,931 - DEBUG - oop-1
 2020-07-14 21:22:06,931 - DEBUG -  What is an OOP Design Pattern?
 2020-07-14 21:22:06,931 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-07-14 21:22:06,931 - DEBUG - 13832 }
 2020-07-14 21:22:06,931 - DEBUG - 13899 }
 2020-07-14 21:22:06,931 - DEBUG - 13965 }
 2020-07-14 21:22:06,947 - DEBUG - oop-2
 2020-07-14 21:22:06,947 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-07-14 21:22:06,947 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-07-14 21:22:06,947 - DEBUG - 13976 }
 2020-07-14 21:22:06,947 - DEBUG - 14039 }
 2020-07-14 21:22:06,947 - DEBUG - 14084 }
 2020-07-14 21:22:06,947 - DEBUG - oop-3
 2020-07-14 21:22:06,947 - DEBUG -  What are the 3 main categories of design patterns?
 2020-07-14 21:22:06,947 - DEBUG -  Creational, Behavioral, Structural
 2020-07-14 21:22:06,947 - DEBUG - 14095 }
 2020-07-14 21:22:06,947 - DEBUG - 14149 }
 2020-07-14 21:22:06,947 - DEBUG - 14406 }
 2020-07-14 21:22:06,947 - DEBUG - oop-4
 2020-07-14 21:22:06,947 - DEBUG -  What is an OOP Creational design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-07-14 21:22:06,947 - DEBUG - 14417 }
 2020-07-14 21:22:06,947 - DEBUG - 14471 }
 2020-07-14 21:22:06,947 - DEBUG - 14834 }
 2020-07-14 21:22:06,947 - DEBUG - oop-5
 2020-07-14 21:22:06,947 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-07-14 21:22:06,947 - DEBUG - 14845 }
 2020-07-14 21:22:06,947 - DEBUG - 14899 }
 2020-07-14 21:22:06,947 - DEBUG - 15220 }
 2020-07-14 21:22:06,947 - DEBUG - oop-6
 2020-07-14 21:22:06,947 - DEBUG -  What is an OOP Structural design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-07-14 21:22:06,947 - DEBUG - 15242 }
 2020-07-14 21:22:06,947 - DEBUG - 15294 }
 2020-07-14 21:22:06,947 - DEBUG - 15369 }
 2020-07-14 21:22:06,947 - DEBUG - oop-creational-1
 2020-07-14 21:22:06,947 - DEBUG -  Name 5 most common creational patterns.
 2020-07-14 21:22:06,947 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-07-14 21:22:06,947 - DEBUG - 15391 }
 2020-07-14 21:22:06,947 - DEBUG - 15444 }
 2020-07-14 21:22:06,947 - DEBUG - 15583 }
 2020-07-14 21:22:06,947 - DEBUG - oop-behavioral-1
 2020-07-14 21:22:06,947 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-07-14 21:22:06,947 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-07-14 21:22:06,947 - DEBUG - 15605 }
 2020-07-14 21:22:06,947 - DEBUG - 15657 }
 2020-07-14 21:22:06,947 - DEBUG - 15733 }
 2020-07-14 21:22:06,947 - DEBUG - oop-structural-1
 2020-07-14 21:22:06,947 - DEBUG -  Name 7 most common structural patterns.
 2020-07-14 21:22:06,947 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-07-14 21:22:06,947 - DEBUG - 15755 }
 2020-07-14 21:22:06,947 - DEBUG - 15842 }
 2020-07-14 21:22:06,947 - DEBUG - 15882 }
 2020-07-14 21:22:06,947 - DEBUG - oop-structural-2
 2020-07-14 21:22:06,947 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-07-14 21:22:06,947 - DEBUG -  Model View Controller or MVC.
 2020-07-14 21:22:06,947 - DEBUG - 15904 }
 2020-07-14 21:22:06,947 - DEBUG - 15938 }
 2020-07-14 21:22:06,947 - DEBUG - 16451 }
 2020-07-14 21:22:06,947 - DEBUG - oop-structural-3
 2020-07-14 21:22:06,947 - DEBUG -  Describe MVC pattern.
 2020-07-14 21:22:06,947 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-07-14 21:22:06,947 - DEBUG - 16473 }
 2020-07-14 21:22:06,947 - DEBUG - 16513 }
 2020-07-14 21:22:06,947 - DEBUG - 16769 }
 2020-07-14 21:22:06,947 - DEBUG - oop-creational-2
 2020-07-14 21:22:06,947 - DEBUG -  What is the Factory Method?
 2020-07-14 21:22:06,947 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-07-14 21:22:06,947 - DEBUG - 16791 }
 2020-07-14 21:22:06,947 - DEBUG - 16822 }
 2020-07-14 21:22:06,947 - DEBUG - 17062 }
 2020-07-14 21:22:06,947 - DEBUG - oop-creational-3
 2020-07-14 21:22:06,947 - DEBUG -  What is Prototype?
 2020-07-14 21:22:06,947 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-07-14 21:22:06,947 - DEBUG - 17084 }
 2020-07-14 21:22:06,947 - DEBUG - 17115 }
 2020-07-14 21:22:06,947 - DEBUG - 17404 }
 2020-07-14 21:22:06,947 - DEBUG - oop-creational-4
 2020-07-14 21:22:06,947 - DEBUG -  What is Singleton?
 2020-07-14 21:22:06,947 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-07-14 21:22:06,947 - DEBUG - 17426 }
 2020-07-14 21:22:06,947 - DEBUG - 17464 }
 2020-07-14 21:22:06,947 - DEBUG - 18097 }
 2020-07-14 21:22:06,947 - DEBUG - oop-creational-5
 2020-07-14 21:22:06,947 - DEBUG -  What is Abstract Factory?
 2020-07-14 21:22:06,947 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-07-14 21:22:06,947 - DEBUG - 18119 }
 2020-07-14 21:22:06,947 - DEBUG - 18174 }
 2020-07-14 21:22:06,947 - DEBUG - 18512 }
 2020-07-14 21:22:06,947 - DEBUG - oop-creational-6
 2020-07-14 21:22:06,947 - DEBUG -  What is Builder creational design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-07-14 21:22:06,947 - DEBUG - 18534 }
 2020-07-14 21:22:06,947 - DEBUG - 18597 }
 2020-07-14 21:22:06,947 - DEBUG - 18869 }
 2020-07-14 21:22:06,947 - DEBUG - oop-behavioral-2
 2020-07-14 21:22:06,947 - DEBUG -  What is Template Method behavioral design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-07-14 21:22:06,947 - DEBUG - 18891 }
 2020-07-14 21:22:06,947 - DEBUG - 18947 }
 2020-07-14 21:22:06,947 - DEBUG - 19298 }
 2020-07-14 21:22:06,947 - DEBUG - oop-behavioral-3
 2020-07-14 21:22:06,947 - DEBUG -  What is Strategy behavioral design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-07-14 21:22:06,947 - DEBUG - 19320 }
 2020-07-14 21:22:06,947 - DEBUG - 19379 }
 2020-07-14 21:22:06,947 - DEBUG - 19657 }
 2020-07-14 21:22:06,947 - DEBUG - oop-behavioral-4
 2020-07-14 21:22:06,947 - DEBUG -  What is the Command behavioral design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-07-14 21:22:06,947 - DEBUG - 19679 }
 2020-07-14 21:22:06,947 - DEBUG - 19734 }
 2020-07-14 21:22:06,947 - DEBUG - 20104 }
 2020-07-14 21:22:06,947 - DEBUG - oop-behavioral-5
 2020-07-14 21:22:06,947 - DEBUG -  What is Memento behavioral design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-07-14 21:22:06,947 - DEBUG - 20126 }
 2020-07-14 21:22:06,947 - DEBUG - 20182 }
 2020-07-14 21:22:06,947 - DEBUG - 20562 }
 2020-07-14 21:22:06,947 - DEBUG - oop-behavioral-6
 2020-07-14 21:22:06,947 - DEBUG -  What is Mediator behavioral design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-07-14 21:22:06,947 - DEBUG - 20584 }
 2020-07-14 21:22:06,947 - DEBUG - 20637 }
 2020-07-14 21:22:06,947 - DEBUG - 20945 }
 2020-07-14 21:22:06,947 - DEBUG - oop-behavioral-7
 2020-07-14 21:22:06,947 - DEBUG -  What is State behavioral design pattern?
 2020-07-14 21:22:06,947 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-07-14 21:22:06,962 - DEBUG - 20967 }
 2020-07-14 21:22:06,962 - DEBUG - 21023 }
 2020-07-14 21:22:06,962 - DEBUG - 21457 }
 2020-07-14 21:22:06,962 - DEBUG - oop-behavioral-8
 2020-07-14 21:22:06,962 - DEBUG -  What is Observer behavioral design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-07-14 21:22:06,962 - DEBUG - 21479 }
 2020-07-14 21:22:06,962 - DEBUG - 21535 }
 2020-07-14 21:22:06,962 - DEBUG - 21801 }
 2020-07-14 21:22:06,962 - DEBUG - oop-behavioral-9
 2020-07-14 21:22:06,962 - DEBUG -  What is Iterator behavioral design pattern.
 2020-07-14 21:22:06,962 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-07-14 21:22:06,962 - DEBUG - 21824 }
 2020-07-14 21:22:06,962 - DEBUG - 21894 }
 2020-07-14 21:22:06,962 - DEBUG - 22311 }
 2020-07-14 21:22:06,962 - DEBUG - oop-behavioral-10
 2020-07-14 21:22:06,962 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-07-14 21:22:06,962 - DEBUG - 22334 }
 2020-07-14 21:22:06,962 - DEBUG - 22393 }
 2020-07-14 21:22:06,962 - DEBUG - 22719 }
 2020-07-14 21:22:06,962 - DEBUG - oop-behavioral-11
 2020-07-14 21:22:06,962 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-07-14 21:22:06,962 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-07-14 21:22:06,962 - DEBUG - 22742 }
 2020-07-14 21:22:06,962 - DEBUG - 22801 }
 2020-07-14 21:22:06,962 - DEBUG - 23266 }
 2020-07-14 21:22:06,962 - DEBUG - oop-behavioral-12
 2020-07-14 21:22:06,962 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-07-14 21:22:06,962 - DEBUG - 23288 }
 2020-07-14 21:22:06,962 - DEBUG - 23343 }
 2020-07-14 21:22:06,962 - DEBUG - 23656 }
 2020-07-14 21:22:06,962 - DEBUG - oop-structural-4
 2020-07-14 21:22:06,962 - DEBUG -  What is Adapter structural design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-07-14 21:22:06,962 - DEBUG - 23678 }
 2020-07-14 21:22:06,962 - DEBUG - 23735 }
 2020-07-14 21:22:06,962 - DEBUG - 24091 }
 2020-07-14 21:22:06,962 - DEBUG - oop-structural-5
 2020-07-14 21:22:06,962 - DEBUG -  What is Composite structural design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-07-14 21:22:06,962 - DEBUG - 24113 }
 2020-07-14 21:22:06,962 - DEBUG - 24170 }
 2020-07-14 21:22:06,962 - DEBUG - 24554 }
 2020-07-14 21:22:06,962 - DEBUG - oop-structural-6
 2020-07-14 21:22:06,962 - DEBUG -  What is Decorator structural design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-07-14 21:22:06,962 - DEBUG - 24576 }
 2020-07-14 21:22:06,962 - DEBUG - 24629 }
 2020-07-14 21:22:06,962 - DEBUG - 24995 }
 2020-07-14 21:22:06,962 - DEBUG - oop-structural-7
 2020-07-14 21:22:06,962 - DEBUG -  What is Proxy structural design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-07-14 21:22:06,962 - DEBUG - 25017 }
 2020-07-14 21:22:06,962 - DEBUG - 25071 }
 2020-07-14 21:22:06,962 - DEBUG - 25501 }
 2020-07-14 21:22:06,962 - DEBUG - oop-structural-8
 2020-07-14 21:22:06,962 - DEBUG -  What is Facade structural design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-07-14 21:22:06,962 - DEBUG - 25523 }
 2020-07-14 21:22:06,962 - DEBUG - 25580 }
 2020-07-14 21:22:06,962 - DEBUG - 26139 }
 2020-07-14 21:22:06,962 - DEBUG - oop-structural-9
 2020-07-14 21:22:06,962 - DEBUG -  What is Flyweight structural design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-07-14 21:22:06,962 - DEBUG - 26162 }
 2020-07-14 21:22:06,962 - DEBUG - 26216 }
 2020-07-14 21:22:06,962 - DEBUG - 26748 }
 2020-07-14 21:22:06,962 - DEBUG - oop-structural-10
 2020-07-14 21:22:06,962 - DEBUG -  What is Bridge structural design pattern?
 2020-07-14 21:22:06,962 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-07-14 21:22:06,962 - DEBUG - 26782 }
 2020-07-14 21:22:06,962 - DEBUG - 26838 }
 2020-07-14 21:22:06,962 - DEBUG - 26980 }
 2020-07-14 21:22:06,962 - DEBUG - python-datatypes-strings-1
 2020-07-14 21:22:06,962 - DEBUG -  Describe a basic python strings definition.
 2020-07-14 21:22:06,962 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-07-14 21:22:06,962 - DEBUG - 27013 }
 2020-07-14 21:22:06,962 - DEBUG - 27073 }
 2020-07-14 21:22:06,962 - DEBUG - 27141 }
 2020-07-14 21:22:06,962 - DEBUG - python-datatypes-strings-2
 2020-07-14 21:22:06,962 - DEBUG -  How can strings be defined over multiple lines?
 2020-07-14 21:22:06,962 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-07-14 21:22:06,962 - DEBUG - 27174 }
 2020-07-14 21:22:06,962 - DEBUG - 27247 }
 2020-07-14 21:22:06,962 - DEBUG - 27409 }
 2020-07-14 21:22:06,962 - DEBUG - python-datatypes-strings-3
 2020-07-14 21:22:06,962 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-07-14 21:22:06,962 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-07-14 21:22:06,962 - DEBUG - 27442 }
 2020-07-14 21:22:06,962 - DEBUG - 27502 }
 2020-07-14 21:22:06,962 - DEBUG - 27600 }
 2020-07-14 21:22:06,962 - DEBUG - python-datatypes-strings-4
 2020-07-14 21:22:06,962 - DEBUG -  How do you iterator over the chars of a string?
 2020-07-14 21:22:06,962 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-07-14 21:22:06,962 - DEBUG - 27634 }
 2020-07-14 21:22:06,962 - DEBUG - 27685 }
 2020-07-14 21:22:06,962 - DEBUG - 27715 }
 2020-07-14 21:22:06,962 - DEBUG - python-datatypes-strings-5
 2020-07-14 21:22:06,962 - DEBUG -  How do you get the lenght of a string?
 2020-07-14 21:22:06,962 - DEBUG -  len(mystring) is 5
 2020-07-14 21:22:06,962 - DEBUG - 27748 }
 2020-07-14 21:22:06,962 - DEBUG - 27790 }
 2020-07-14 21:22:06,962 - DEBUG - 27877 }
 2020-07-14 21:22:06,962 - DEBUG - python-datatypes-strings-6
 2020-07-14 21:22:06,962 - DEBUG -  How do you merge two strings?
 2020-07-14 21:22:06,962 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-07-14 21:22:06,962 - DEBUG - 27912 }
 2020-07-14 21:22:06,962 - DEBUG - 27961 }
 2020-07-14 21:22:06,962 - DEBUG - 28039 }
 2020-07-14 21:22:06,962 - DEBUG - python-datatypes-strings-7
 2020-07-14 21:22:06,962 - DEBUG -  How do you use a number in a string?
 2020-07-14 21:22:06,962 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-07-14 21:22:06,978 - DEBUG - 28074 }
 2020-07-14 21:22:06,978 - DEBUG - 28153 }
 2020-07-14 21:22:06,978 - DEBUG - 28184 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-strings-8
 2020-07-14 21:22:06,978 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-07-14 21:22:06,978 - DEBUG -  mystring.split(',')
 2020-07-14 21:22:06,978 - DEBUG - 28217 }
 2020-07-14 21:22:06,978 - DEBUG - 28272 }
 2020-07-14 21:22:06,978 - DEBUG - 28300 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-strings-9
 2020-07-14 21:22:06,978 - DEBUG -  How do you trim white space from a string?
 2020-07-14 21:22:06,978 - DEBUG -  mystring.strip()
 2020-07-14 21:22:06,978 - DEBUG - 28334 }
 2020-07-14 21:22:06,978 - DEBUG - 28394 }
 2020-07-14 21:22:06,978 - DEBUG - 28446 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-strings-10
 2020-07-14 21:22:06,978 - DEBUG -  How do you convert a string to an int or float?
 2020-07-14 21:22:06,978 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-07-14 21:22:06,978 - DEBUG - 28479 }
 2020-07-14 21:22:06,978 - DEBUG - 28525 }
 2020-07-14 21:22:06,978 - DEBUG - 28640 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-numbers-1
 2020-07-14 21:22:06,978 - DEBUG -  Describe types of python numbers.
 2020-07-14 21:22:06,978 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-07-14 21:22:06,978 - DEBUG - 28673 }
 2020-07-14 21:22:06,978 - DEBUG - 28745 }
 2020-07-14 21:22:06,978 - DEBUG - 28893 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-numbers-2
 2020-07-14 21:22:06,978 - DEBUG -  How do you work with really precise real numbers in python?
 2020-07-14 21:22:06,978 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-07-14 21:22:06,978 - DEBUG - 28926 }
 2020-07-14 21:22:06,978 - DEBUG - 29001 }
 2020-07-14 21:22:06,978 - DEBUG - 29095 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-numbers-3
 2020-07-14 21:22:06,978 - DEBUG -  How can you work with say fractional measurements with python?
 2020-07-14 21:22:06,978 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-07-14 21:22:06,978 - DEBUG - 29128 }
 2020-07-14 21:22:06,978 - DEBUG - 29179 }
 2020-07-14 21:22:06,978 - DEBUG - 29201 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-numbers-4
 2020-07-14 21:22:06,978 - DEBUG -  How do the absolute value of a number?
 2020-07-14 21:22:06,978 - DEBUG -  abs(mynum)
 2020-07-14 21:22:06,978 - DEBUG - 29234 }
 2020-07-14 21:22:06,978 - DEBUG - 29284 }
 2020-07-14 21:22:06,978 - DEBUG - 29313 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-numbers-5
 2020-07-14 21:22:06,978 - DEBUG -  How do you raise a number to a power?
 2020-07-14 21:22:06,978 - DEBUG -  pow(power,number)
 2020-07-14 21:22:06,978 - DEBUG - 29346 }
 2020-07-14 21:22:06,978 - DEBUG - 29390 }
 2020-07-14 21:22:06,978 - DEBUG - 29426 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-numbers-6
 2020-07-14 21:22:06,978 - DEBUG -  How do you round a real number?
 2020-07-14 21:22:06,978 - DEBUG -  round(num,decimalplaces)
 2020-07-14 21:22:06,978 - DEBUG - 29459 }
 2020-07-14 21:22:06,978 - DEBUG - 29513 }
 2020-07-14 21:22:06,978 - DEBUG - 29681 }
 2020-07-14 21:22:06,978 - DEBUG - python-datatypes-numbers-7
 2020-07-14 21:22:06,978 - DEBUG -  Whats involved in getting random numbers?
 2020-07-14 21:22:06,978 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-07-14 21:22:06,978 - DEBUG - 29695 }
 2020-07-14 21:22:06,978 - DEBUG - 29768 }
 2020-07-14 21:22:06,978 - DEBUG - 29837 }
 2020-07-14 21:22:06,978 - DEBUG - uml-1
 2020-07-14 21:22:06,978 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-07-14 21:22:06,978 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-07-14 21:22:06,978 - DEBUG - 29848 }
 2020-07-14 21:22:06,978 - DEBUG - 29892 }
 2020-07-14 21:22:06,978 - DEBUG - 29989 }
 2020-07-14 21:22:06,978 - DEBUG - uml-2
 2020-07-14 21:22:06,978 - DEBUG -  What is an interaction diagram?
 2020-07-14 21:22:06,978 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-07-14 21:22:06,978 - DEBUG - 30000 }
 2020-07-14 21:22:06,978 - DEBUG - 30041 }
 2020-07-14 21:22:06,978 - DEBUG - 30351 }
 2020-07-14 21:22:06,978 - DEBUG - uml-3
 2020-07-14 21:22:06,978 - DEBUG -  What is a structure diagram?
 2020-07-14 21:22:06,978 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-07-14 21:22:06,978 - DEBUG - 30362 }
 2020-07-14 21:22:06,978 - DEBUG - 30402 }
 2020-07-14 21:22:06,978 - DEBUG - 30516 }
 2020-07-14 21:22:06,978 - DEBUG - uml-4
 2020-07-14 21:22:06,978 - DEBUG -  What is a behavior diagram?
 2020-07-14 21:22:06,978 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-07-14 21:22:06,978 - DEBUG - 30537 }
 2020-07-14 21:22:06,978 - DEBUG - 30588 }
 2020-07-14 21:22:06,978 - DEBUG - 30670 }
 2020-07-14 21:22:06,978 - DEBUG - uml-structure-1
 2020-07-14 21:22:06,978 - DEBUG -  Name the seven UML structure diagrams.
 2020-07-14 21:22:06,978 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-07-14 21:22:06,978 - DEBUG - 30690 }
 2020-07-14 21:22:06,978 - DEBUG - 30755 }
 2020-07-14 21:22:06,978 - DEBUG - 30815 }
 2020-07-14 21:22:06,978 - DEBUG - uml-behavior-1
 2020-07-14 21:22:06,978 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-07-14 21:22:06,978 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-07-14 21:22:06,978 - DEBUG - 30838 }
 2020-07-14 21:22:06,978 - DEBUG - 30895 }
 2020-07-14 21:22:06,978 - DEBUG - 30960 }
 2020-07-14 21:22:06,978 - DEBUG - uml-interaction-1
 2020-07-14 21:22:06,978 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-07-14 21:22:06,978 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-07-14 21:22:06,978 - DEBUG - 30971 }
 2020-07-14 21:22:06,978 - DEBUG - 31015 }
 2020-07-14 21:22:06,978 - DEBUG - 31049 }
 2020-07-14 21:22:06,978 - DEBUG - uml-2
 2020-07-14 21:22:06,978 - DEBUG -  How many uml digrams are there?
 2020-07-14 21:22:06,978 - DEBUG -  Around 14 give or take.
 2020-07-14 21:22:06,978 - DEBUG - 31070 }
 2020-07-14 21:22:06,978 - DEBUG - 31121 }
 2020-07-14 21:22:06,978 - DEBUG - 31369 }
 2020-07-14 21:22:06,978 - DEBUG - uml-structure-2
 2020-07-14 21:22:06,978 - DEBUG -  Describe the structure Package diagram
 2020-07-14 21:22:06,978 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-07-14 21:22:06,978 - DEBUG - 31390 }
 2020-07-14 21:22:06,978 - DEBUG - 31440 }
 2020-07-14 21:22:06,978 - DEBUG - 31713 }
 2020-07-14 21:22:06,978 - DEBUG - uml-structure-3
 2020-07-14 21:22:06,978 - DEBUG -  Describe the structure Class diagram.
 2020-07-14 21:22:06,978 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-07-14 21:22:06,978 - DEBUG - 31734 }
 2020-07-14 21:22:06,978 - DEBUG - 31785 }
 2020-07-14 21:22:06,978 - DEBUG - 31919 }
 2020-07-14 21:22:06,978 - DEBUG - uml-structure-4
 2020-07-14 21:22:06,978 - DEBUG -  Describe the structure Object diagram.
 2020-07-14 21:22:06,978 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-07-14 21:22:06,978 - DEBUG - 31940 }
 2020-07-14 21:22:06,978 - DEBUG - 31994 }
 2020-07-14 21:22:06,978 - DEBUG - 32246 }
 2020-07-14 21:22:06,978 - DEBUG - uml-structure-5
 2020-07-14 21:22:06,978 - DEBUG -  Describe the structure Component diagram.
 2020-07-14 21:22:06,978 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-07-14 21:22:06,978 - DEBUG - 32267 }
 2020-07-14 21:22:06,978 - DEBUG - 32321 }
 2020-07-14 21:22:06,978 - DEBUG - 32658 }
 2020-07-14 21:22:06,978 - DEBUG - uml-structure-6
 2020-07-14 21:22:06,978 - DEBUG -  Describe the structure Composite diagram.
 2020-07-14 21:22:06,978 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-07-14 21:22:06,978 - DEBUG - 32679 }
 2020-07-14 21:22:06,978 - DEBUG - 32736 }
 2020-07-14 21:22:06,978 - DEBUG - 32924 }
 2020-07-14 21:22:06,978 - DEBUG - uml-structure-7
 2020-07-14 21:22:06,978 - DEBUG -  Describe the structure Collaboration diagram
 2020-07-14 21:22:06,978 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-07-14 21:22:06,978 - DEBUG - 32945 }
 2020-07-14 21:22:06,978 - DEBUG - 33000 }
 2020-07-14 21:22:06,994 - DEBUG - 33308 }
 2020-07-14 21:22:06,994 - DEBUG - uml-structure-8
 2020-07-14 21:22:06,994 - DEBUG -  Describe the structure Deployment diagram.
 2020-07-14 21:22:06,994 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-07-14 21:22:06,994 - DEBUG - 33328 }
 2020-07-14 21:22:06,994 - DEBUG - 33380 }
 2020-07-14 21:22:06,994 - DEBUG - 33546 }
 2020-07-14 21:22:06,994 - DEBUG - uml-behavior-1
 2020-07-14 21:22:06,994 - DEBUG -  Describe the behavior Activity diagram.
 2020-07-14 21:22:06,994 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-07-14 21:22:06,994 - DEBUG - 33566 }
 2020-07-14 21:22:06,994 - DEBUG - 33618 }
 2020-07-14 21:22:06,994 - DEBUG - 33863 }
 2020-07-14 21:22:06,994 - DEBUG - uml-behavior-2
 2020-07-14 21:22:06,994 - DEBUG -  Describe the behavior Use Case diagram.
 2020-07-14 21:22:06,994 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-07-14 21:22:06,994 - DEBUG - 33883 }
 2020-07-14 21:22:06,994 - DEBUG - 33932 }
 2020-07-14 21:22:06,994 - DEBUG - 34238 }
 2020-07-14 21:22:06,994 - DEBUG - uml-behavior-3
 2020-07-14 21:22:06,994 - DEBUG -  Describe the behavior State diagram.
 2020-07-14 21:22:06,994 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-07-14 21:22:06,994 - DEBUG - 34261 }
 2020-07-14 21:22:06,994 - DEBUG - 34316 }
 2020-07-14 21:22:06,994 - DEBUG - 34474 }
 2020-07-14 21:22:06,994 - DEBUG - uml-interaction-2
 2020-07-14 21:22:06,994 - DEBUG -  Describe the interaction Sequence diagram.
 2020-07-14 21:22:06,994 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-07-14 21:22:06,994 - DEBUG - 34497 }
 2020-07-14 21:22:06,994 - DEBUG - 34550 }
 2020-07-14 21:22:06,994 - DEBUG - 34800 }
 2020-07-14 21:22:06,994 - DEBUG - uml-interaction-3
 2020-07-14 21:22:06,994 - DEBUG -  Describe the interaction Timing diagram.
 2020-07-14 21:22:06,994 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-07-14 21:22:06,994 - DEBUG - 34823 }
 2020-07-14 21:22:06,994 - DEBUG - 34884 }
 2020-07-14 21:22:06,994 - DEBUG - 35155 }
 2020-07-14 21:22:06,994 - DEBUG - uml-interaction-4
 2020-07-14 21:22:06,994 - DEBUG -  Describe the interaction Communications diagram.
 2020-07-14 21:22:06,994 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-07-14 21:22:06,994 - DEBUG - 35178 }
 2020-07-14 21:22:06,994 - DEBUG - 35245 }
 2020-07-14 21:22:06,994 - DEBUG - 35403 }
 2020-07-14 21:22:06,994 - DEBUG - uml-interaction-5
 2020-07-14 21:22:06,994 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-07-14 21:22:06,994 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-07-14 21:22:06,994 - DEBUG - algo_cards
 2020-07-14 21:22:06,994 - DEBUG - box1
 2020-07-14 21:22:06,994 - DEBUG - algo_cards
 2020-07-14 21:22:06,994 - DEBUG - box1
 2020-07-14 21:22:06,994 - DEBUG - box2
 2020-07-14 21:22:07,009 - DEBUG - algo_cards
 2020-07-14 21:22:07,009 - DEBUG - box1
 2020-07-14 21:22:07,009 - DEBUG - box2
 2020-07-14 21:22:07,009 - DEBUG - box3
 2020-07-14 21:22:07,009 - DEBUG - algo_cards
 2020-07-14 21:22:07,025 - DEBUG - box1
 2020-07-14 21:22:07,025 - DEBUG - box2
 2020-07-14 21:22:07,025 - DEBUG - box3
 2020-07-14 21:22:07,025 - DEBUG - box4
 2020-07-14 21:22:07,025 - DEBUG - algo_cards
 2020-07-14 21:22:07,025 - DEBUG - box1
 2020-07-14 21:22:07,025 - DEBUG - box2
 2020-07-14 21:22:07,025 - DEBUG - box3
 2020-07-14 21:22:07,025 - DEBUG - box4
 2020-07-14 21:22:07,025 - DEBUG - box5
 2020-07-14 21:22:07,025 - DEBUG - algo_cards
 2020-07-14 21:22:07,025 - DEBUG - box1
 2020-07-14 21:22:07,025 - DEBUG - box2
 2020-07-14 21:22:07,025 - DEBUG - box3
 2020-07-14 21:22:07,025 - DEBUG - box4
 2020-07-14 21:22:07,025 - DEBUG - box5
 2020-07-14 21:22:07,025 - DEBUG - box6
 2020-07-14 21:22:07,025 - DEBUG - finding test cycle file
 2020-07-14 21:22:07,025 - DEBUG - quizs\
 2020-07-14 21:22:07,040 - DEBUG - algo_cards.txt
 2020-07-14 21:22:07,040 - DEBUG - box1.txt
 2020-07-14 21:22:07,040 - DEBUG - box2.txt
 2020-07-14 21:22:07,040 - DEBUG - box3.txt
 2020-07-14 21:22:07,040 - DEBUG - box4.txt
 2020-07-14 21:22:07,040 - DEBUG - box5.txt
 2020-07-14 21:22:07,040 - DEBUG - box6.txt
 2020-07-14 21:22:07,040 - DEBUG - data_struct_cards.txt
 2020-07-14 21:22:07,040 - DEBUG - oop_cards.txt
 2020-07-14 21:22:07,040 - DEBUG - python_cards.txt
 2020-07-14 21:22:07,040 - DEBUG - testcycle2.txt
 2020-07-14 21:22:07,040 - DEBUG - uml_cards.txt
 2020-07-14 21:22:07,040 - DEBUG - algo_cards
 2020-07-14 21:22:07,040 - DEBUG - box1
 2020-07-14 21:22:07,040 - DEBUG - box2
 2020-07-14 21:22:07,040 - DEBUG - box3
 2020-07-14 21:22:07,040 - DEBUG - box4
 2020-07-14 21:22:07,040 - DEBUG - box5
 2020-07-14 21:22:07,040 - DEBUG - box6
 2020-07-14 21:22:07,040 - DEBUG - data_struct_cards
 2020-07-14 21:22:07,040 - DEBUG - oop_cards
 2020-07-14 21:22:07,040 - DEBUG - python_cards
 2020-07-14 21:22:07,040 - DEBUG - testcycle2
 2020-07-14 21:22:07,040 - DEBUG - found testcycle2.txt
 2020-07-14 21:22:07,040 - DEBUG - testcycle2
 2020-07-14 21:22:07,040 - DEBUG - quizs\
 2020-07-14 21:22:07,040 - DEBUG - Cycle number 2
 2020-07-14 21:25:56,072 - DEBUG - Moving to Box
 2020-07-14 21:25:56,072 - DEBUG - Remove From Box
 2020-07-14 21:25:56,072 - DEBUG - Add To Box
 2020-07-14 21:25:56,072 - DEBUG - Remove From Test Cycle
 2020-07-14 21:25:56,072 - DEBUG - Save Test Cycle
 2020-07-14 21:26:33,586 - DEBUG - Moving to Box
 2020-07-14 21:26:33,586 - DEBUG - Remove From Box
 2020-07-14 21:26:33,586 - DEBUG - Add To Box
 2020-07-14 21:26:33,586 - DEBUG - Remove From Test Cycle
 2020-07-14 21:26:33,601 - DEBUG - Save Test Cycle
 2020-07-14 21:30:07,554 - DEBUG - Moving to Box
 2020-07-14 21:30:07,554 - DEBUG - Remove From Box
 2020-07-14 21:30:07,554 - DEBUG - Add To Box
 2020-07-14 21:30:07,570 - DEBUG - Remove From Test Cycle
 2020-07-14 21:30:07,570 - DEBUG - Save Test Cycle
 2020-07-14 21:30:49,771 - DEBUG - Moving to Box
 2020-07-14 21:30:49,771 - DEBUG - Remove From Box
 2020-07-14 21:30:49,771 - DEBUG - Add To Box
 2020-07-14 21:30:49,786 - DEBUG - Remove From Test Cycle
 2020-07-14 21:30:49,786 - DEBUG - Save Test Cycle
 2020-07-14 21:31:45,751 - DEBUG - Moving to Box
 2020-07-14 21:31:45,751 - DEBUG - Remove From Box
 2020-07-14 21:31:45,751 - DEBUG - Add To Box
 2020-07-14 21:31:45,767 - DEBUG - Remove From Test Cycle
 2020-07-14 21:31:45,767 - DEBUG - Save Test Cycle
 2020-07-14 21:36:21,623 - DEBUG - Remove From Test Cycle
 2020-07-14 21:36:21,623 - DEBUG - Save Test Cycle
 2020-07-14 21:36:56,918 - DEBUG - Moving to Box
 2020-07-14 21:36:56,918 - DEBUG - Remove From Box
 2020-07-14 21:36:56,918 - DEBUG - Add To Box
 2020-07-14 21:36:56,933 - DEBUG - Remove From Test Cycle
 2020-07-14 21:36:56,933 - DEBUG - Save Test Cycle
 2020-07-14 21:41:49,739 - DEBUG - Moving to Box
 2020-07-14 21:41:49,739 - DEBUG - Remove From Box
 2020-07-14 21:41:49,739 - DEBUG - Add To Box
 2020-07-14 21:41:49,755 - DEBUG - Remove From Test Cycle
 2020-07-14 21:41:49,755 - DEBUG - Save Test Cycle
 2020-07-14 21:43:34,797 - DEBUG - Moving to Box
 2020-07-14 21:43:34,797 - DEBUG - Remove From Box
 2020-07-14 21:43:34,797 - DEBUG - Add To Box
 2020-07-14 21:43:34,812 - DEBUG - Remove From Test Cycle
 2020-07-14 21:43:34,812 - DEBUG - Save Test Cycle
 2020-07-14 21:44:07,499 - DEBUG - Moving to Box
 2020-07-14 21:44:07,499 - DEBUG - Remove From Box
 2020-07-14 21:44:07,499 - DEBUG - Add To Box
 2020-07-14 21:44:07,514 - DEBUG - Remove From Test Cycle
 2020-07-14 21:44:07,514 - DEBUG - Save Test Cycle
 2020-07-14 21:45:26,322 - DEBUG - Moving to Box
 2020-07-14 21:45:26,322 - DEBUG - Remove From Box
 2020-07-14 21:45:26,322 - DEBUG - Add To Box
 2020-07-14 21:45:26,338 - DEBUG - Remove From Test Cycle
 2020-07-14 21:45:26,338 - DEBUG - Save Test Cycle
 2020-07-14 21:45:43,947 - DEBUG - Moving to Box
 2020-07-14 21:45:43,947 - DEBUG - Remove From Box
 2020-07-14 21:45:43,947 - DEBUG - Add To Box
 2020-07-14 21:45:43,962 - DEBUG - Remove From Test Cycle
 2020-07-14 21:45:43,962 - DEBUG - Save Test Cycle
 2020-07-14 21:47:20,222 - DEBUG - Moving to Box
 2020-07-14 21:47:20,222 - DEBUG - Remove From Box
 2020-07-14 21:47:20,222 - DEBUG - Add To Box
 2020-07-14 21:47:20,238 - DEBUG - Remove From Test Cycle
 2020-07-14 21:47:20,238 - DEBUG - Save Test Cycle
 2020-07-14 21:47:48,236 - DEBUG - Moving to Box
 2020-07-14 21:47:48,236 - DEBUG - Remove From Box
 2020-07-14 21:47:48,236 - DEBUG - Add To Box
 2020-07-14 21:47:48,251 - DEBUG - Remove From Test Cycle
 2020-07-14 21:47:48,251 - DEBUG - Save Test Cycle
 2020-07-14 21:48:54,388 - DEBUG - Moving to Box
 2020-07-14 21:48:54,388 - DEBUG - Remove From Box
 2020-07-14 21:48:54,388 - DEBUG - Add To Box
 2020-07-14 21:48:54,404 - DEBUG - Remove From Test Cycle
 2020-07-14 21:48:54,404 - DEBUG - Save Test Cycle
 2020-07-14 21:49:35,418 - DEBUG - Moving to Box
 2020-07-14 21:49:35,418 - DEBUG - Remove From Box
 2020-07-14 21:49:35,418 - DEBUG - Add To Box
 2020-07-14 21:49:35,433 - DEBUG - Remove From Test Cycle
 2020-07-14 21:49:35,433 - DEBUG - Save Test Cycle
 2020-07-14 21:50:41,366 - DEBUG - Moving to Box
 2020-07-14 21:50:41,366 - DEBUG - Remove From Box
 2020-07-14 21:50:41,366 - DEBUG - Add To Box
 2020-07-14 21:50:41,382 - DEBUG - Remove From Test Cycle
 2020-07-14 21:50:41,382 - DEBUG - Save Test Cycle
 2020-07-14 21:54:41,588 - DEBUG - Moving to Box
 2020-07-14 21:54:41,588 - DEBUG - Remove From Box
 2020-07-14 21:54:41,588 - DEBUG - Add To Box
 2020-07-14 21:54:41,603 - DEBUG - Remove From Test Cycle
 2020-07-14 21:54:41,603 - DEBUG - Save Test Cycle
 2020-07-14 21:55:41,271 - DEBUG - Remove From Test Cycle
 2020-07-14 21:55:41,271 - DEBUG - Save Test Cycle
 2020-07-14 21:56:34,206 - DEBUG - Moving to Box
 2020-07-14 21:56:34,206 - DEBUG - Remove From Box
 2020-07-14 21:56:34,206 - DEBUG - Add To Box
 2020-07-14 21:56:34,221 - DEBUG - Remove From Test Cycle
 2020-07-14 21:56:34,221 - DEBUG - Save Test Cycle
 2020-07-14 21:57:03,564 - DEBUG - Moving to Box
 2020-07-14 21:57:03,564 - DEBUG - Remove From Box
 2020-07-14 21:57:03,564 - DEBUG - Add To Box
 2020-07-14 21:57:03,579 - DEBUG - Remove From Test Cycle
 2020-07-14 21:57:03,579 - DEBUG - Save Test Cycle
 2020-07-14 21:59:09,718 - DEBUG - Moving to Box
 2020-07-14 21:59:09,718 - DEBUG - Remove From Box
 2020-07-14 21:59:09,718 - DEBUG - Add To Box
 2020-07-14 21:59:09,733 - DEBUG - Remove From Test Cycle
 2020-07-14 21:59:09,733 - DEBUG - Save Test Cycle
 2020-07-14 22:00:46,569 - DEBUG - Moving to Box
 2020-07-14 22:00:46,569 - DEBUG - Remove From Box
 2020-07-14 22:00:46,569 - DEBUG - Add To Box
 2020-07-14 22:00:46,585 - DEBUG - Remove From Test Cycle
 2020-07-14 22:00:46,585 - DEBUG - Save Test Cycle
 2020-07-14 22:01:07,850 - DEBUG - Moving to Box
 2020-07-14 22:01:07,850 - DEBUG - Remove From Box
 2020-07-14 22:01:07,850 - DEBUG - Add To Box
 2020-07-14 22:01:07,865 - DEBUG - Remove From Test Cycle
 2020-07-14 22:01:07,865 - DEBUG - Save Test Cycle
 2020-07-14 22:04:09,746 - DEBUG - Moving to Box
 2020-07-14 22:04:09,746 - DEBUG - Remove From Box
 2020-07-14 22:04:09,746 - DEBUG - Add To Box
 2020-07-14 22:04:09,761 - DEBUG - Remove From Test Cycle
 2020-07-14 22:04:09,761 - DEBUG - Save Test Cycle
 2020-07-14 22:05:04,352 - DEBUG - Moving to Box
 2020-07-14 22:05:04,352 - DEBUG - Remove From Box
 2020-07-14 22:05:04,352 - DEBUG - Add To Box
 2020-07-14 22:05:04,368 - DEBUG - Remove From Test Cycle
 2020-07-14 22:05:04,368 - DEBUG - Save Test Cycle
 2020-07-14 22:06:03,255 - DEBUG - Moving to Box
 2020-07-14 22:06:03,255 - DEBUG - Remove From Box
 2020-07-14 22:06:03,255 - DEBUG - Add To Box
 2020-07-14 22:06:03,270 - DEBUG - Remove From Test Cycle
 2020-07-14 22:06:03,270 - DEBUG - Save Test Cycle
 2020-07-14 22:07:04,581 - DEBUG - Moving to Box
 2020-07-14 22:07:04,581 - DEBUG - Remove From Box
 2020-07-14 22:07:04,581 - DEBUG - Add To Box
 2020-07-14 22:07:04,596 - DEBUG - Remove From Test Cycle
 2020-07-14 22:07:04,596 - DEBUG - Save Test Cycle
 2020-07-14 22:07:20,861 - DEBUG - Moving to Box
 2020-07-14 22:07:20,861 - DEBUG - Remove From Box
 2020-07-14 22:07:20,861 - DEBUG - Add To Box
 2020-07-14 22:07:20,877 - DEBUG - Remove From Test Cycle
 2020-07-14 22:07:20,877 - DEBUG - Save Test Cycle
 2020-07-14 22:08:11,077 - DEBUG - Moving to Box
 2020-07-14 22:08:11,077 - DEBUG - Remove From Box
 2020-07-14 22:08:11,077 - DEBUG - Add To Box
 2020-07-14 22:08:11,092 - DEBUG - Remove From Test Cycle
 2020-07-14 22:08:11,092 - DEBUG - Save Test Cycle
 2020-07-14 22:09:45,854 - DEBUG - Moving to Box
 2020-07-14 22:09:45,854 - DEBUG - Remove From Box
 2020-07-14 22:09:45,854 - DEBUG - Add To Box
 2020-07-14 22:09:45,870 - DEBUG - Remove From Test Cycle
 2020-07-14 22:09:45,870 - DEBUG - Save Test Cycle
 2020-07-14 22:10:31,930 - DEBUG - Remove From Test Cycle
 2020-07-14 22:10:31,930 - DEBUG - Save Test Cycle
 2020-07-14 22:10:52,554 - DEBUG - Moving to Box
 2020-07-14 22:10:52,554 - DEBUG - Remove From Box
 2020-07-14 22:10:52,554 - DEBUG - Add To Box
 2020-07-14 22:10:52,569 - DEBUG - Remove From Test Cycle
 2020-07-14 22:10:52,569 - DEBUG - Save Test Cycle
 2020-07-14 22:11:02,038 - DEBUG - Moving to Box
 2020-07-14 22:11:02,038 - DEBUG - Remove From Box
 2020-07-14 22:11:02,038 - DEBUG - Add To Box
 2020-07-14 22:11:02,053 - DEBUG - Remove From Test Cycle
 2020-07-14 22:11:02,053 - DEBUG - Save Test Cycle
 2020-07-14 22:11:30,942 - DEBUG - Moving to Box
 2020-07-14 22:11:30,942 - DEBUG - Remove From Box
 2020-07-14 22:11:30,942 - DEBUG - Add To Box
 2020-07-14 22:11:30,958 - DEBUG - Remove From Test Cycle
 2020-07-14 22:11:30,958 - DEBUG - Save Test Cycle
 2020-07-14 22:12:11,596 - DEBUG - Moving to Box
 2020-07-14 22:12:11,596 - DEBUG - Remove From Box
 2020-07-14 22:12:11,596 - DEBUG - Add To Box
 2020-07-14 22:12:11,611 - DEBUG - Remove From Test Cycle
 2020-07-14 22:12:11,611 - DEBUG - Save Test Cycle
 2020-07-14 22:15:04,883 - DEBUG - Moving to Box
 2020-07-14 22:15:04,883 - DEBUG - Remove From Box
 2020-07-14 22:15:04,883 - DEBUG - Add To Box
 2020-07-14 22:15:04,899 - DEBUG - Remove From Test Cycle
 2020-07-14 22:15:04,899 - DEBUG - Save Test Cycle
 2020-07-14 22:15:42,600 - DEBUG - Remove From Test Cycle
 2020-07-14 22:15:42,600 - DEBUG - Save Test Cycle
 2020-07-14 22:24:53,261 - DEBUG - Moving to Box
 2020-07-14 22:24:53,261 - DEBUG - Remove From Box
 2020-07-14 22:24:53,261 - DEBUG - Add To Box
 2020-07-14 22:24:53,277 - DEBUG - Remove From Test Cycle
 2020-07-14 22:24:53,277 - DEBUG - Save Test Cycle
 2020-07-14 22:32:24,970 - DEBUG - Moving to Box
 2020-07-14 22:32:24,970 - DEBUG - Remove From Box
 2020-07-14 22:32:24,970 - DEBUG - Add To Box
 2020-07-14 22:32:24,985 - DEBUG - Remove From Test Cycle
 2020-07-14 22:32:24,985 - DEBUG - Save Test Cycle
 2020-07-14 22:33:54,606 - DEBUG - Remove From Test Cycle
 2020-07-14 22:33:54,606 - DEBUG - Save Test Cycle
 2020-07-14 22:35:25,694 - DEBUG - Moving to Box
 2020-07-14 22:35:25,694 - DEBUG - Remove From Box
 2020-07-14 22:35:25,694 - DEBUG - Add To Box
 2020-07-14 22:35:25,710 - DEBUG - Remove From Test Cycle
 2020-07-14 22:35:25,710 - DEBUG - Save Test Cycle
 2020-07-14 22:36:16,332 - DEBUG - Remove From Test Cycle
 2020-07-14 22:36:16,332 - DEBUG - Save Test Cycle
 2020-07-14 22:45:37,005 - DEBUG - Moving to Box
 2020-07-14 22:45:37,005 - DEBUG - Remove From Box
 2020-07-14 22:45:37,005 - DEBUG - Add To Box
 2020-07-14 22:45:37,020 - DEBUG - Remove From Test Cycle
 2020-07-14 22:45:37,020 - DEBUG - Save Test Cycle
 2020-07-14 22:52:22,296 - DEBUG - Moving to Box
 2020-07-14 22:52:22,296 - DEBUG - Remove From Box
 2020-07-14 22:52:22,296 - DEBUG - Add To Box
 2020-07-14 22:52:22,312 - DEBUG - Remove From Test Cycle
 2020-07-14 22:52:22,312 - DEBUG - Save Test Cycle
 2020-07-14 22:53:36,057 - DEBUG - Moving to Box
 2020-07-14 22:53:36,057 - DEBUG - Remove From Box
 2020-07-14 22:53:36,057 - DEBUG - Add To Box
 2020-07-14 22:53:36,073 - DEBUG - Remove From Test Cycle
 2020-07-14 22:53:36,073 - DEBUG - Save Test Cycle
 2020-07-14 22:54:13,352 - DEBUG - Moving to Box
 2020-07-14 22:54:13,352 - DEBUG - Remove From Box
 2020-07-14 22:54:13,352 - DEBUG - Add To Box
 2020-07-14 22:54:13,367 - DEBUG - Remove From Test Cycle
 2020-07-14 22:54:13,367 - DEBUG - Save Test Cycle
 2020-07-14 22:56:30,530 - DEBUG - Moving to Box
 2020-07-14 22:56:30,530 - DEBUG - Remove From Box
 2020-07-14 22:56:30,530 - DEBUG - Add To Box
 2020-07-14 22:56:30,546 - DEBUG - Remove From Test Cycle
 2020-07-14 22:56:30,546 - DEBUG - Save Test Cycle
 2020-07-14 22:57:20,683 - DEBUG - Moving to Box
 2020-07-14 22:57:20,683 - DEBUG - Remove From Box
 2020-07-14 22:57:20,683 - DEBUG - Add To Box
 2020-07-14 22:57:20,699 - DEBUG - Remove From Test Cycle
 2020-07-14 22:57:20,699 - DEBUG - Save Test Cycle
 2020-07-14 22:58:03,852 - DEBUG - Moving to Box
 2020-07-14 22:58:03,852 - DEBUG - Remove From Box
 2020-07-14 22:58:03,852 - DEBUG - Add To Box
 2020-07-14 22:58:03,868 - DEBUG - Remove From Test Cycle
 2020-07-14 22:58:03,868 - DEBUG - Save Test Cycle
 2020-07-14 22:58:54,943 - DEBUG - Moving to Box
 2020-07-14 22:58:54,943 - DEBUG - Remove From Box
 2020-07-14 22:58:54,943 - DEBUG - Add To Box
 2020-07-14 22:58:54,958 - DEBUG - Remove From Test Cycle
 2020-07-14 22:58:54,958 - DEBUG - Save Test Cycle
 2020-07-14 22:59:07,692 - DEBUG - Moving to Box
 2020-07-14 22:59:07,692 - DEBUG - Remove From Box
 2020-07-14 22:59:07,692 - DEBUG - Add To Box
 2020-07-14 22:59:07,707 - DEBUG - Remove From Test Cycle
 2020-07-14 22:59:07,707 - DEBUG - Save Test Cycle
 2020-07-14 23:00:00,057 - DEBUG - Moving to Box
 2020-07-14 23:00:00,057 - DEBUG - Remove From Box
 2020-07-14 23:00:00,057 - DEBUG - Add To Box
 2020-07-14 23:00:00,072 - DEBUG - Remove From Test Cycle
 2020-07-14 23:00:00,072 - DEBUG - Save Test Cycle
 2020-07-14 23:00:11,587 - DEBUG - Moving to Box
 2020-07-14 23:00:11,587 - DEBUG - Remove From Box
 2020-07-14 23:00:11,587 - DEBUG - Add To Box
 2020-07-14 23:00:11,603 - DEBUG - Remove From Test Cycle
 2020-07-14 23:00:11,603 - DEBUG - Save Test Cycle
 2020-07-14 23:00:20,633 - DEBUG - Moving to Box
 2020-07-14 23:00:20,633 - DEBUG - Remove From Box
 2020-07-14 23:00:20,633 - DEBUG - Add To Box
 2020-07-14 23:00:20,649 - DEBUG - Remove From Test Cycle
 2020-07-14 23:00:20,649 - DEBUG - Save Test Cycle
 2020-07-14 23:01:02,787 - DEBUG - Moving to Box
 2020-07-14 23:01:02,787 - DEBUG - Remove From Box
 2020-07-14 23:01:02,787 - DEBUG - Add To Box
 2020-07-14 23:01:02,802 - DEBUG - Remove From Test Cycle
 2020-07-14 23:01:02,802 - DEBUG - Save Test Cycle
 2020-07-14 23:01:46,940 - DEBUG - Moving to Box
 2020-07-14 23:01:46,940 - DEBUG - Remove From Box
 2020-07-14 23:01:46,940 - DEBUG - Add To Box
 2020-07-14 23:01:46,956 - DEBUG - Remove From Test Cycle
 2020-07-14 23:01:46,956 - DEBUG - Save Test Cycle
 2020-07-14 23:02:07,752 - DEBUG - Moving to Box
 2020-07-14 23:02:07,752 - DEBUG - Remove From Box
 2020-07-14 23:02:07,752 - DEBUG - Add To Box
 2020-07-14 23:02:07,767 - DEBUG - Remove From Test Cycle
 2020-07-14 23:02:07,767 - DEBUG - Save Test Cycle
 2020-07-14 23:02:44,921 - DEBUG - Moving to Box
 2020-07-14 23:02:44,921 - DEBUG - Remove From Box
 2020-07-14 23:02:44,921 - DEBUG - Add To Box
 2020-07-14 23:02:44,937 - DEBUG - Remove From Test Cycle
 2020-07-14 23:02:44,937 - DEBUG - Save Test Cycle
 2020-07-14 23:04:53,600 - DEBUG - Moving to Box
 2020-07-14 23:04:53,600 - DEBUG - Remove From Box
 2020-07-14 23:04:53,600 - DEBUG - Add To Box
 2020-07-14 23:04:53,616 - DEBUG - Remove From Test Cycle
 2020-07-14 23:04:53,616 - DEBUG - Save Test Cycle
 2020-07-14 23:05:45,409 - DEBUG - Remove From Test Cycle
 2020-07-14 23:05:45,409 - DEBUG - Save Test Cycle
 2020-07-14 23:07:08,763 - DEBUG - Moving to Box
 2020-07-14 23:07:08,763 - DEBUG - Remove From Box
 2020-07-14 23:07:08,763 - DEBUG - Add To Box
 2020-07-14 23:07:08,779 - DEBUG - Remove From Test Cycle
 2020-07-14 23:07:08,779 - DEBUG - Save Test Cycle
 2020-07-14 23:08:51,225 - DEBUG - Moving to Box
 2020-07-14 23:08:51,225 - DEBUG - Remove From Box
 2020-07-14 23:08:51,225 - DEBUG - Add To Box
 2020-07-14 23:08:51,241 - DEBUG - Remove From Test Cycle
 2020-07-14 23:08:51,241 - DEBUG - Save Test Cycle
 2020-07-14 23:09:51,510 - DEBUG - Moving to Box
 2020-07-14 23:09:51,510 - DEBUG - Remove From Box
 2020-07-14 23:09:51,510 - DEBUG - Add To Box
 2020-07-14 23:09:51,525 - DEBUG - Remove From Test Cycle
 2020-07-14 23:09:51,525 - DEBUG - Save Test Cycle
 2020-07-14 23:11:03,864 - DEBUG - Moving to Box
 2020-07-14 23:11:03,864 - DEBUG - Remove From Box
 2020-07-14 23:11:03,864 - DEBUG - Add To Box
 2020-07-14 23:11:03,880 - DEBUG - Remove From Test Cycle
 2020-07-14 23:11:03,880 - DEBUG - Save Test Cycle
 2020-07-14 23:12:14,141 - DEBUG - Remove From Test Cycle
 2020-07-14 23:12:14,141 - DEBUG - Save Test Cycle
 2020-07-14 23:14:17,477 - DEBUG - Remove From Test Cycle
 2020-07-14 23:14:17,477 - DEBUG - Save Test Cycle
 2020-07-14 23:16:07,204 - DEBUG - Moving to Box
 2020-07-14 23:16:07,204 - DEBUG - Remove From Box
 2020-07-14 23:16:07,204 - DEBUG - Add To Box
 2020-07-14 23:16:07,220 - DEBUG - Remove From Test Cycle
 2020-07-14 23:16:07,220 - DEBUG - Save Test Cycle
 2020-07-14 23:17:42,370 - DEBUG - Moving to Box
 2020-07-14 23:17:42,370 - DEBUG - Remove From Box
 2020-07-14 23:17:42,370 - DEBUG - Add To Box
 2020-07-14 23:17:42,385 - DEBUG - Remove From Test Cycle
 2020-07-14 23:17:42,385 - DEBUG - Save Test Cycle
 2020-07-14 23:18:11,227 - DEBUG - Moving to Box
 2020-07-14 23:18:11,227 - DEBUG - Remove From Box
 2020-07-14 23:18:11,227 - DEBUG - Add To Box
 2020-07-14 23:18:11,243 - DEBUG - Remove From Test Cycle
 2020-07-14 23:18:11,243 - DEBUG - Save Test Cycle
 2020-07-14 23:18:37,350 - DEBUG - Moving to Box
 2020-07-14 23:18:37,350 - DEBUG - Remove From Box
 2020-07-14 23:18:37,350 - DEBUG - Add To Box
 2020-07-14 23:18:37,366 - DEBUG - Remove From Test Cycle
 2020-07-14 23:18:37,366 - DEBUG - Save Test Cycle
 2020-07-14 23:19:01,052 - DEBUG - Moving to Box
 2020-07-14 23:19:01,052 - DEBUG - Remove From Box
 2020-07-14 23:19:01,052 - DEBUG - Add To Box
 2020-07-14 23:19:01,067 - DEBUG - Remove From Test Cycle
 2020-07-14 23:19:01,067 - DEBUG - Save Test Cycle
 2020-07-14 23:19:28,090 - DEBUG - Moving to Box
 2020-07-14 23:19:28,090 - DEBUG - Remove From Box
 2020-07-14 23:19:28,090 - DEBUG - Add To Box
 2020-07-14 23:19:28,105 - DEBUG - Remove From Test Cycle
 2020-07-14 23:19:28,105 - DEBUG - Save Test Cycle
 2020-07-14 23:19:50,963 - DEBUG - Remove From Test Cycle
 2020-07-14 23:19:50,963 - DEBUG - Save Test Cycle
 2020-07-14 23:20:41,147 - DEBUG - Remove From Test Cycle
 2020-07-14 23:20:41,147 - DEBUG - Save Test Cycle
 2020-07-14 23:22:11,048 - DEBUG - Remove From Test Cycle
 2020-07-14 23:22:11,048 - DEBUG - Save Test Cycle
 2020-07-14 23:24:06,241 - DEBUG - Moving to Box
 2020-07-14 23:24:06,241 - DEBUG - Remove From Box
 2020-07-14 23:24:06,241 - DEBUG - Add To Box
 2020-07-14 23:24:06,257 - DEBUG - Remove From Test Cycle
 2020-07-14 23:24:06,257 - DEBUG - Save Test Cycle
 2020-07-14 23:26:00,140 - DEBUG - Remove From Test Cycle
 2020-07-14 23:26:00,140 - DEBUG - Save Test Cycle
 2020-07-14 23:26:42,418 - DEBUG - Moving to Box
 2020-07-14 23:26:42,418 - DEBUG - Remove From Box
 2020-07-14 23:26:42,418 - DEBUG - Add To Box
 2020-07-14 23:26:42,434 - DEBUG - Remove From Test Cycle
 2020-07-14 23:26:42,434 - DEBUG - Save Test Cycle
 2020-07-14 23:27:25,556 - DEBUG - Moving to Box
 2020-07-14 23:27:25,556 - DEBUG - Remove From Box
 2020-07-14 23:27:25,556 - DEBUG - Add To Box
 2020-07-14 23:27:25,572 - DEBUG - Remove From Test Cycle
 2020-07-14 23:27:25,572 - DEBUG - Save Test Cycle
 2020-07-14 23:28:37,473 - DEBUG - Moving to Box
 2020-07-14 23:28:37,473 - DEBUG - Remove From Box
 2020-07-14 23:28:37,473 - DEBUG - Add To Box
 2020-07-14 23:28:37,489 - DEBUG - Remove From Test Cycle
 2020-07-14 23:28:37,489 - DEBUG - Save Test Cycle
 2020-07-14 23:28:55,628 - DEBUG - Moving to Box
 2020-07-14 23:28:55,628 - DEBUG - Remove From Box
 2020-07-14 23:28:55,628 - DEBUG - Add To Box
 2020-07-14 23:28:55,644 - DEBUG - Remove From Test Cycle
 2020-07-14 23:28:55,644 - DEBUG - Save Test Cycle
 2020-07-14 23:29:47,166 - DEBUG - Moving to Box
 2020-07-14 23:29:47,166 - DEBUG - Remove From Box
 2020-07-14 23:29:47,166 - DEBUG - Add To Box
 2020-07-14 23:29:47,181 - DEBUG - Remove From Test Cycle
 2020-07-14 23:29:47,181 - DEBUG - Save Test Cycle
 2020-07-14 23:30:59,879 - DEBUG - Moving to Box
 2020-07-14 23:30:59,879 - DEBUG - Remove From Box
 2020-07-14 23:30:59,879 - DEBUG - Add To Box
 2020-07-14 23:30:59,895 - DEBUG - Remove From Test Cycle
 2020-07-14 23:30:59,895 - DEBUG - Save Test Cycle
 2020-07-14 23:32:11,093 - DEBUG - Moving to Box
 2020-07-14 23:32:11,093 - DEBUG - Remove From Box
 2020-07-14 23:32:11,093 - DEBUG - Add To Box
 2020-07-14 23:32:11,109 - DEBUG - Remove From Test Cycle
 2020-07-14 23:32:11,109 - DEBUG - Save Test Cycle
 2020-07-14 23:32:38,826 - DEBUG - Moving to Box
 2020-07-14 23:32:38,826 - DEBUG - Remove From Box
 2020-07-14 23:32:38,826 - DEBUG - Add To Box
 2020-07-14 23:32:38,841 - DEBUG - Remove From Test Cycle
 2020-07-14 23:32:38,841 - DEBUG - Save Test Cycle
 2020-07-14 23:33:19,229 - DEBUG - Moving to Box
 2020-07-14 23:33:19,229 - DEBUG - Remove From Box
 2020-07-14 23:33:19,229 - DEBUG - Add To Box
 2020-07-14 23:33:19,245 - DEBUG - Remove From Test Cycle
 2020-07-14 23:33:19,245 - DEBUG - Save Test Cycle
 2020-07-14 23:33:36,900 - DEBUG - Remove From Test Cycle
 2020-07-14 23:33:36,900 - DEBUG - Save Test Cycle
 2020-07-14 23:33:59,555 - DEBUG - Remove From Test Cycle
 2020-07-14 23:33:59,555 - DEBUG - Save Test Cycle
 2020-07-14 23:34:47,489 - DEBUG - Remove From Test Cycle
 2020-07-14 23:34:47,489 - DEBUG - Save Test Cycle
 2020-07-14 23:35:02,160 - DEBUG - Moving to Box
 2020-07-14 23:35:02,160 - DEBUG - Remove From Box
 2020-07-14 23:35:02,160 - DEBUG - Add To Box
 2020-07-14 23:35:02,175 - DEBUG - Remove From Test Cycle
 2020-07-14 23:35:02,175 - DEBUG - Save Test Cycle
 2020-07-14 23:36:13,108 - DEBUG - Moving to Box
 2020-07-14 23:36:13,108 - DEBUG - Remove From Box
 2020-07-14 23:36:13,108 - DEBUG - Add To Box
 2020-07-14 23:36:13,124 - DEBUG - Remove From Test Cycle
 2020-07-14 23:36:13,124 - DEBUG - Save Test Cycle
 2020-07-14 23:36:13,421 - DEBUG - Save Test Cycle
 2020-07-24 15:32:38,303 - DEBUG - Start of Logging Leitner Module
 2020-07-24 15:32:38,304 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-24 15:32:38,304 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-24 15:32:38,304 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-24 15:32:38,304 - INFO - on things you get right.
 2020-07-24 15:32:38,396 - DEBUG - c:\dev2\github\python\quiz
 2020-07-24 17:28:11,779 - DEBUG - Start of Logging Leitner Module
 2020-07-24 17:28:11,779 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-24 17:28:11,780 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-24 17:28:11,780 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-24 17:28:11,780 - INFO - on things you get right.
 2020-07-24 17:28:11,829 - DEBUG - c:\dev2\github\python\quiz
 2020-07-24 17:28:45,789 - DEBUG - Start of Logging Leitner Module
 2020-07-24 17:28:45,789 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-24 17:28:45,789 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-24 17:28:45,789 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-24 17:28:45,789 - INFO - on things you get right.
 2020-07-24 17:28:45,834 - DEBUG - c:\dev2\github\python\quiz
 2020-07-24 18:36:25,368 - DEBUG - Start of Logging Leitner Module
 2020-07-24 18:36:25,368 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-24 18:36:25,368 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-24 18:36:25,368 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-24 18:36:25,369 - INFO - on things you get right.
 2020-07-24 18:36:25,415 - DEBUG - c:\dev2\github\python\quiz
 2020-07-24 18:36:25,415 - DEBUG - 15 }
 2020-07-24 18:36:25,416 - DEBUG - 67 }
 2020-07-24 18:36:25,416 - DEBUG - 146 }
 2020-07-24 18:36:25,416 - DEBUG - interview-1
 2020-07-24 18:36:25,416 - DEBUG - What is the worst mistake you ever made?
 2020-07-24 18:36:25,416 - DEBUG - Drove on ice when I should have been parked. Drove through Nashville.
 2020-07-24 18:36:25,416 - DEBUG - 163 }
 2020-07-24 18:36:25,416 - DEBUG - 205 }
 2020-07-24 18:36:25,416 - DEBUG - 479 }
 2020-07-24 18:36:25,417 - DEBUG - interview-2
 2020-07-24 18:36:25,417 - DEBUG - What is your biggest weakness?
 2020-07-24 18:36:25,417 - DEBUG - Documentation habits. I know how to document and when to document. I do document but somewhat inconsistently.I write articles as documentation for others for the web. I could make documenting more important, form better habits andfind or learn new tools to help.
 2020-07-24 18:36:25,417 - DEBUG - 496 }
 2020-07-24 18:36:25,417 - DEBUG - 539 }
 2020-07-24 18:36:25,417 - DEBUG - 844 }
 2020-07-24 18:36:25,417 - DEBUG - interview-3
 2020-07-24 18:36:25,417 - DEBUG - What is your greatest strength?
 2020-07-24 18:36:25,417 - DEBUG - Helping others to learn computer concepts. Explaining in simple terms with analogy or metaphor. I teach myselffirst complex systems or concepts. I share my knowledge freely and welcome opportunity. Writing articles andpossibly documentation or training material. My web site is a good example.
 2020-07-24 18:36:25,418 - DEBUG - 861 }
 2020-07-24 18:36:25,418 - DEBUG - 919 }
 2020-07-24 18:36:25,418 - DEBUG - 1360 }
 2020-07-24 18:36:25,418 - DEBUG - interview-4
 2020-07-24 18:36:25,418 - DEBUG - Give some examples for when you taught others.
 2020-07-24 18:36:25,418 - DEBUG - In Army Reserve taught task and task steps and standards. In restaurant taught cooking, cleaning, preparing, stocking, scheduling, standards and techniques.In office work I shared my computer knowledge with anyone if needed. In trucking, safety, rules, operating equipment. Situational awareness (smith system). Interaction with police, shippers, dock workers, other truckers, motorist, dispatch. Other standards and techniques.
 2020-07-24 18:36:25,418 - DEBUG - 1377 }
 2020-07-24 18:36:25,418 - DEBUG - 1414 }
 2020-07-24 18:36:25,418 - DEBUG - 1549 }
 2020-07-24 18:36:25,418 - DEBUG - interview-5
 2020-07-24 18:36:25,418 - DEBUG - What makes you effective?
 2020-07-24 18:36:25,418 - DEBUG - Stubborn persistence in problem solving. Know problem solving steps. Know trouble shooting steps. Know Debugging techniques.
 2020-07-24 18:36:25,418 - DEBUG - 1579 }
 2020-07-24 18:36:25,420 - DEBUG - 1627 }
 2020-07-24 18:36:25,420 - DEBUG - 2232 }
 2020-07-24 18:36:25,420 - DEBUG - interview-problemsolve-1
 2020-07-24 18:36:25,420 - DEBUG - What are your problem solving steps?
 2020-07-24 18:36:25,420 - DEBUG - 1. Identify the problem. 2. Gather facts and assumptions. Understand what final outcome will be. 3. Form a theory as to probably cause of issue. do some preliminary trouble shooting or debugging to eliminate possibilities. 4. Develop possible solutions and choose the best one then try it. 5.  Test functionality and Analyze the results. 6 Worked or failed? 6a If it worked Verify System functionality. Document process in implementing solution which  may require repeating the process. 6b If it failed go back to prior step or maybe even the beginning and try again with alternate solution.
 2020-07-24 18:36:25,421 - DEBUG - 2262 }
 2020-07-24 18:36:25,421 - DEBUG - 2318 }
 2020-07-24 18:36:25,421 - DEBUG - 2564 }
 2020-07-24 18:36:25,421 - DEBUG - interview-problemsolve-2
 2020-07-24 18:36:25,421 - DEBUG - What trouble shooting techniques do you use?
 2020-07-24 18:36:25,421 - DEBUG - Process of elimination, to find out what is not working you often have to verify what is working. Change one thing at a time, make notes, go backto original state. Narrow down the problem from many possible things to one or two things.
 2020-07-24 18:36:25,421 - DEBUG - 2594 }
 2020-07-24 18:36:25,421 - DEBUG - 2643 }
 2020-07-24 18:36:25,422 - DEBUG - 3123 }
 2020-07-24 18:36:25,422 - DEBUG - interview-problemsolve-3
 2020-07-24 18:36:25,422 - DEBUG - What debugging techniques do you use?
 2020-07-24 18:36:25,422 - DEBUG - Logging to console and or files or databases. Watching state and variables. Asserting conditions with basic if/else or language assertionsor unit testing. Find and filter log files. Locate and read/edit config files. Use tools like debuggers, breakpoints. Get insight with DOM inspectors Element inspectors or UML modeling. Search forums and web articles. Ask if anyone has had experience with same issues. Look to see if underlying systems have known issues or bugs.
 2020-07-24 18:36:25,422 - DEBUG - 3153 }
 2020-07-24 18:36:25,422 - DEBUG - 3221 }
 2020-07-24 18:36:25,423 - DEBUG - 3476 }
 2020-07-24 18:36:25,423 - DEBUG - interview-problemsolve-4
 2020-07-24 18:36:25,423 - DEBUG - What are the Military problem solving steps you learned?
 2020-07-24 18:36:25,423 - DEBUG - Recognize and define the problem. Gather facts and make assumptions. Define end states and establish criteria. Develop possible solutions.Analyze and compare possible solutions. Select and implement solution. Analyze solution for effectiveness.
 2020-07-24 18:36:25,423 - DEBUG - 3506 }
 2020-07-24 18:36:25,423 - DEBUG - 3571 }
 2020-07-24 18:36:25,423 - DEBUG - 3716 }
 2020-07-24 18:36:25,423 - DEBUG - interview-problemsolve-5
 2020-07-24 18:36:25,423 - DEBUG - What was the scientific method you learned in school?
 2020-07-24 18:36:25,423 - DEBUG - Ask a question. Do background research. Construct a hypothesis. Test hypothesis by doing experiments. Analyze data and draw conclusion.
 2020-07-24 18:36:25,424 - DEBUG - 3746 }
 2020-07-24 18:36:25,424 - DEBUG - 3802 }
 2020-07-24 18:36:25,424 - DEBUG - 3997 }
 2020-07-24 18:36:25,424 - DEBUG - interview-problemsolve-6
 2020-07-24 18:36:25,424 - DEBUG - What are the CompTIA trouble shooting steps?
 2020-07-24 18:36:25,424 - DEBUG - Identify the problem. Establish theory of probably cause. Test theory to determine actual cause. Establish a plan and execute it. Verifyfull system functionality. Document the process.
 2020-07-24 18:36:25,424 - DEBUG - 4028 }
 2020-07-24 18:36:25,425 - DEBUG - 4089 }
 2020-07-24 18:36:25,425 - DEBUG - 4150 }
 2020-07-24 18:36:25,425 - DEBUG - interview-interpersonal-1
 2020-07-24 18:36:25,425 - DEBUG - How would you describe your communication skills?
 2020-07-24 18:36:25,425 - DEBUG - I'm good at written communication and ok at verbal.
 2020-07-24 18:36:25,425 - DEBUG - 4181 }
 2020-07-24 18:36:25,425 - DEBUG - 4216 }
 2020-07-24 18:36:25,425 - DEBUG - 4265 }
 2020-07-24 18:36:25,425 - DEBUG - interview-interpersonal-2
 2020-07-24 18:36:25,425 - DEBUG - What about reliability?
 2020-07-24 18:36:25,425 - DEBUG - I learned to be on time by being early.
 2020-07-24 18:36:25,426 - DEBUG - 4296 }
 2020-07-24 18:36:25,426 - DEBUG - 4354 }
 2020-07-24 18:36:25,426 - DEBUG - 4509 }
 2020-07-24 18:36:25,426 - DEBUG - interview-interpersonal-3
 2020-07-24 18:36:25,426 - DEBUG - How would you describe your leadership skills?
 2020-07-24 18:36:25,426 - DEBUG - I lead by example. I don't expect more fromm others than I expect of myself. I feel this leads to a form ofrespect which increases productivity.
 2020-07-24 18:36:25,426 - DEBUG - 4540 }
 2020-07-24 18:36:25,426 - DEBUG - 4604 }
 2020-07-24 18:36:25,427 - DEBUG - 4729 }
 2020-07-24 18:36:25,427 - DEBUG - interview-interpersonal-4
 2020-07-24 18:36:25,427 - DEBUG - How would you describe your decision making ability?
 2020-07-24 18:36:25,427 - DEBUG - Gather facts and identify assumptions before making decisions. It's all of my problem solving steps and techniques.
 2020-07-24 18:36:25,427 - DEBUG - 4760 }
 2020-07-24 18:36:25,427 - DEBUG - 4803 }
 2020-07-24 18:36:25,427 - DEBUG - 4941 }
 2020-07-24 18:36:25,427 - DEBUG - interview-interpersonal-5
 2020-07-24 18:36:25,427 - DEBUG - How are you with assertiveness?
 2020-07-24 18:36:25,427 - DEBUG - Can be very assertive when baked into a corner. Will always go to the person first, not subordinates, co-workersor supervisors.
 2020-07-24 18:36:25,427 - DEBUG - 4972 }
 2020-07-24 18:36:25,427 - DEBUG - 5007 }
 2020-07-24 18:36:25,427 - DEBUG - 5036 }
 2020-07-24 18:36:25,427 - DEBUG - interview-interpersonal-6
 2020-07-24 18:36:25,427 - DEBUG - Describe your attitude?
 2020-07-24 18:36:25,427 - DEBUG - Generally positive.
 2020-07-24 18:36:25,427 - DEBUG - 5067 }
 2020-07-24 18:36:25,427 - DEBUG - 5106 }
 2020-07-24 18:36:25,428 - DEBUG - 5260 }
 2020-07-24 18:36:25,428 - DEBUG - interview-interpersonal-7
 2020-07-24 18:36:25,428 - DEBUG - How do you handle feedback.
 2020-07-24 18:36:25,428 - DEBUG - As long as it is usually in a positive manner and light I welcome feedback. I don't care much for people thatlike to be quick to anger or yell.
 2020-07-24 18:36:25,428 - DEBUG - 5291 }
 2020-07-24 18:36:25,428 - DEBUG - 5335 }
 2020-07-24 18:36:25,428 - DEBUG - 5483 }
 2020-07-24 18:36:25,429 - DEBUG - interview-interpersonal-6
 2020-07-24 18:36:25,429 - DEBUG - How do you handle confrontation?
 2020-07-24 18:36:25,429 - DEBUG - I show empathy. Diffuse anger. I ask is it justified at all? I stay calm. I avoid character assaults. I know when to disengage.Stay safe.
 2020-07-24 18:36:25,429 - DEBUG - 5500 }
 2020-07-24 18:36:25,429 - DEBUG - 5539 }
 2020-07-24 18:36:25,429 - DEBUG - 5677 }
 2020-07-24 18:36:25,429 - DEBUG - interview-6
 2020-07-24 18:36:25,429 - DEBUG - Describe your ideal career.
 2020-07-24 18:36:25,429 - DEBUG - A career that I am passionate about, love to wake up and go do, that's respectable. One that takes care of meand my dependents.
 2020-07-24 18:36:25,429 - DEBUG - 5694 }
 2020-07-24 18:36:25,430 - DEBUG - 5733 }
 2020-07-24 18:36:25,430 - DEBUG - 5839 }
 2020-07-24 18:36:25,430 - DEBUG - interview-7
 2020-07-24 18:36:25,430 - DEBUG - How do you handle pressure?
 2020-07-24 18:36:25,430 - DEBUG - Become more focused and intent on implementing all techniques and tools. Eliminate distractions.
 2020-07-24 18:36:25,430 - DEBUG - 5856 }
 2020-07-24 18:36:25,430 - DEBUG - 5901 }
 2020-07-24 18:36:25,430 - DEBUG - 5995 }
 2020-07-24 18:36:25,430 - DEBUG - interview-8
 2020-07-24 18:36:25,430 - DEBUG - How do you handle disappointment?
 2020-07-24 18:36:25,430 - DEBUG - With introspection, analyze myself and the situation. Look for improvements to make.
 2020-07-24 18:36:25,431 - DEBUG - 6012 }
 2020-07-24 18:36:25,431 - DEBUG - 6066 }
 2020-07-24 18:36:25,431 - DEBUG - 6161 }
 2020-07-24 18:36:25,431 - DEBUG - interview-9
 2020-07-24 18:36:25,431 - DEBUG - What type of environment do you thrive in?
 2020-07-24 18:36:25,431 - DEBUG - Where I'm skilled, needed, wanted and liked. Where there is a challenge that I enjoy.
 2020-07-24 18:36:25,431 - DEBUG - 6179 }
 2020-07-24 18:36:25,431 - DEBUG - 6236 }
 2020-07-24 18:36:25,431 - DEBUG - 6305 }
 2020-07-24 18:36:25,432 - DEBUG - interview-10
 2020-07-24 18:36:25,432 - DEBUG - Describe your leadership style and abilities.
 2020-07-24 18:36:25,432 - DEBUG - I lead by example, not forceful or dictatorial type at all.
 2020-07-24 18:36:25,432 - DEBUG - 6323 }
 2020-07-24 18:36:25,432 - DEBUG - 6359 }
 2020-07-24 18:36:25,432 - DEBUG - 6529 }
 2020-07-24 18:36:25,432 - DEBUG - interview-11
 2020-07-24 18:36:25,432 - DEBUG - How do you train others?
 2020-07-24 18:36:25,432 - DEBUG - Maintain or enhance self esteem. Show empathy. Ask how they would solve the problem. Explain how I would solve the problem and work out the solution with them.
 2020-07-24 18:36:25,432 - DEBUG - 6547 }
 2020-07-24 18:36:25,432 - DEBUG - 6591 }
 2020-07-24 18:36:25,433 - DEBUG - 6675 }
 2020-07-24 18:36:25,433 - DEBUG - interview-12
 2020-07-24 18:36:25,433 - DEBUG - What can you do for the company?
 2020-07-24 18:36:25,433 - DEBUG - Compose software, troubleshoot problems in systems.Train and coach others.
 2020-07-24 18:36:25,433 - DEBUG - 6693 }
 2020-07-24 18:36:25,433 - DEBUG - 6728 }
 2020-07-24 18:36:25,433 - DEBUG - 6856 }
 2020-07-24 18:36:25,434 - DEBUG - interview-13
 2020-07-24 18:36:25,434 - DEBUG - Why should we hire you?
 2020-07-24 18:36:25,434 - DEBUG - I'm self motiviated. I learn in my spare time for improvement. I welcome opportunity to share what I know with others.
 2020-07-24 18:36:25,434 - DEBUG - 6874 }
 2020-07-24 18:36:25,434 - DEBUG - 6908 }
 2020-07-24 18:36:25,435 - DEBUG - 7448 }
 2020-07-24 18:36:25,435 - DEBUG - interview-14
 2020-07-24 18:36:25,435 - DEBUG - How are you different?
 2020-07-24 18:36:25,435 - DEBUG - I've spent 35 years of my time in self study, which I say is like 7 years on a job. I know am very familiar with hardwareand repair, software of all kinds and tools, multiple operating systems, and tcp/ip networking. I know coding, debugging, developing appssome oop design and engineering. I've studied desktop, client/server, console, web front end and back end, database and mobilesoftware development. 20 years of part time study with Java, which I say is like 5 years on a job. I majored in Java and minored inJavaScript.
 2020-07-24 18:36:25,435 - DEBUG - 7466 }
 2020-07-24 18:36:25,435 - DEBUG - 7491 }
 2020-07-24 18:36:25,435 - DEBUG - 7828 }
 2020-07-24 18:36:25,436 - DEBUG - interview-15
 2020-07-24 18:36:25,436 - DEBUG - What are you?
 2020-07-24 18:36:25,436 - DEBUG - Programmer, Developer, Something of an Architect whether I'm writing a line of code, object, system of objects,API, Application, System of Applications, I'm a Software Engineer. I'm a leader, coach, trainer, mentor. Researcher and writer.Computer technician but not a guru. Coach in forums, groups and chat rooms on internet.
 2020-07-24 18:36:25,436 - DEBUG - 7846 }
 2020-07-24 18:36:25,436 - DEBUG - 7895 }
 2020-07-24 18:36:25,436 - DEBUG - 7934 }
 2020-07-24 18:36:25,436 - DEBUG - interview-16
 2020-07-24 18:36:25,436 - DEBUG - Where do you see yourself in 5 years?
 2020-07-24 18:36:25,436 - DEBUG - Very good software developer.
 2020-07-24 18:36:25,436 - DEBUG - 7952 }
 2020-07-24 18:36:25,437 - DEBUG - 8002 }
 2020-07-24 18:36:25,437 - DEBUG - 8059 }
 2020-07-24 18:36:25,437 - DEBUG - interview-17
 2020-07-24 18:36:25,437 - DEBUG - Where do you see yourself in 10 years?
 2020-07-24 18:36:25,437 - DEBUG - Mentor, teacher, trainer but not a supervisor.
 2020-07-24 18:36:25,437 - DEBUG - interview_cards
 2020-07-24 18:36:25,438 - DEBUG - finding test cycle file
 2020-07-24 18:36:25,438 - DEBUG - quizs\study\
 2020-07-24 18:36:25,438 - DEBUG - interview_cards.txt
 2020-07-24 18:36:25,439 - DEBUG - interview_cards
 2020-07-24 18:36:25,439 - DEBUG - None
 2020-07-24 18:36:25,439 - DEBUG - quizs\study\
 2020-07-24 18:36:25,439 - DEBUG - No Test Cycle File Found. Creating new Cycle 1.
 2020-07-24 18:36:25,440 - DEBUG - Number of cards 30
 2020-07-24 18:36:25,440 - DEBUG - ['interview-1', 'interview-2', 'interview-3', 'interview-4', 'interview-5', 'interview-problemsolve-1', 'interview-problemsolve-2', 'interview-problemsolve-3', 'interview-problemsolve-4', 'interview-problemsolve-5', 'interview-problemsolve-6', 'interview-interpersonal-1', 'interview-interpersonal-2', 'interview-interpersonal-3', 'interview-interpersonal-4', 'interview-interpersonal-5', 'interview-interpersonal-6', 'interview-interpersonal-7', 'interview-6', 'interview-7', 'interview-8', 'interview-9', 'interview-10', 'interview-11', 'interview-12', 'interview-13', 'interview-14', 'interview-15', 'interview-16', 'interview-17']
 2020-07-24 18:36:25,440 - DEBUG - Done making ids
 2020-07-24 18:36:25,441 - DEBUG - Loading cards into Box1
 2020-07-24 18:36:25,441 - DEBUG - Set Cards to Box1
 2020-07-24 18:36:25,441 - DEBUG - Made TestCycle
 2020-07-24 18:36:25,442 - DEBUG - Making box1
 2020-07-24 18:36:25,443 - DEBUG - Making box2
 2020-07-24 18:36:25,444 - DEBUG - Making box3
 2020-07-24 18:36:25,445 - DEBUG - Making box4
 2020-07-24 18:36:25,446 - DEBUG - Making box5
 2020-07-24 18:36:25,447 - DEBUG - Making box6
 2020-07-24 18:36:25,448 - DEBUG - Cycle number 1
 2020-07-24 18:46:53,883 - DEBUG - Moving to Box
 2020-07-24 18:46:53,883 - DEBUG - Remove From Box
 2020-07-24 18:46:53,893 - DEBUG - Add To Box
 2020-07-24 18:46:53,897 - DEBUG - Remove From Test Cycle
 2020-07-24 18:46:53,905 - DEBUG - Save Test Cycle
 2020-07-24 18:47:26,772 - DEBUG - Moving to Box
 2020-07-24 18:47:26,772 - DEBUG - Remove From Box
 2020-07-24 18:47:26,781 - DEBUG - Add To Box
 2020-07-24 18:47:26,788 - DEBUG - Remove From Test Cycle
 2020-07-24 18:47:26,796 - DEBUG - Save Test Cycle
 2020-07-24 18:54:19,112 - DEBUG - Remove From Test Cycle
 2020-07-24 18:54:19,121 - DEBUG - Save Test Cycle
 2020-07-24 18:56:19,958 - DEBUG - Remove From Test Cycle
 2020-07-24 18:56:19,968 - DEBUG - Save Test Cycle
 2020-07-24 18:58:23,242 - DEBUG - Moving to Box
 2020-07-24 18:58:23,242 - DEBUG - Remove From Box
 2020-07-24 18:58:23,254 - DEBUG - Add To Box
 2020-07-24 18:58:23,265 - DEBUG - Remove From Test Cycle
 2020-07-24 18:58:23,276 - DEBUG - Save Test Cycle
 2020-07-24 19:01:59,013 - DEBUG - Moving to Box
 2020-07-24 19:01:59,013 - DEBUG - Remove From Box
 2020-07-24 19:01:59,024 - DEBUG - Add To Box
 2020-07-24 19:01:59,034 - DEBUG - Remove From Test Cycle
 2020-07-24 19:01:59,041 - DEBUG - Save Test Cycle
 2020-07-24 19:02:52,046 - DEBUG - Moving to Box
 2020-07-24 19:02:52,046 - DEBUG - Remove From Box
 2020-07-24 19:02:52,054 - DEBUG - Add To Box
 2020-07-24 19:02:52,063 - DEBUG - Remove From Test Cycle
 2020-07-24 19:02:52,070 - DEBUG - Save Test Cycle
 2020-07-24 19:10:48,732 - DEBUG - Moving to Box
 2020-07-24 19:10:48,733 - DEBUG - Remove From Box
 2020-07-24 19:10:48,741 - DEBUG - Add To Box
 2020-07-24 19:10:48,750 - DEBUG - Remove From Test Cycle
 2020-07-24 19:10:48,758 - DEBUG - Save Test Cycle
 2020-07-24 19:11:39,346 - DEBUG - Moving to Box
 2020-07-24 19:11:39,347 - DEBUG - Remove From Box
 2020-07-24 19:11:39,363 - DEBUG - Add To Box
 2020-07-24 19:11:39,378 - DEBUG - Remove From Test Cycle
 2020-07-24 19:11:39,388 - DEBUG - Save Test Cycle
 2020-07-24 19:14:46,249 - DEBUG - Remove From Test Cycle
 2020-07-24 19:14:46,250 - DEBUG - Save Test Cycle
 2020-07-24 19:15:46,022 - DEBUG - Moving to Box
 2020-07-24 19:15:46,022 - DEBUG - Remove From Box
 2020-07-24 19:15:46,023 - DEBUG - Add To Box
 2020-07-24 19:15:46,024 - DEBUG - Remove From Test Cycle
 2020-07-24 19:15:46,034 - DEBUG - Save Test Cycle
 2020-07-24 19:17:07,881 - DEBUG - Moving to Box
 2020-07-24 19:17:07,881 - DEBUG - Remove From Box
 2020-07-24 19:17:07,891 - DEBUG - Add To Box
 2020-07-24 19:17:07,899 - DEBUG - Remove From Test Cycle
 2020-07-24 19:17:07,906 - DEBUG - Save Test Cycle
 2020-07-24 19:19:36,720 - DEBUG - Remove From Test Cycle
 2020-07-24 19:19:36,729 - DEBUG - Save Test Cycle
 2020-07-24 19:36:26,649 - DEBUG - Moving to Box
 2020-07-24 19:36:26,650 - DEBUG - Remove From Box
 2020-07-24 19:36:26,660 - DEBUG - Add To Box
 2020-07-24 19:36:26,669 - DEBUG - Remove From Test Cycle
 2020-07-24 19:36:26,677 - DEBUG - Save Test Cycle
 2020-07-24 19:37:00,972 - DEBUG - Moving to Box
 2020-07-24 19:37:00,972 - DEBUG - Remove From Box
 2020-07-24 19:37:00,980 - DEBUG - Add To Box
 2020-07-24 19:37:00,988 - DEBUG - Remove From Test Cycle
 2020-07-24 19:37:00,996 - DEBUG - Save Test Cycle
 2020-07-24 19:38:48,650 - DEBUG - Remove From Test Cycle
 2020-07-24 19:38:48,659 - DEBUG - Save Test Cycle
 2020-07-24 19:39:31,677 - DEBUG - Moving to Box
 2020-07-24 19:39:31,677 - DEBUG - Remove From Box
 2020-07-24 19:39:31,687 - DEBUG - Add To Box
 2020-07-24 19:39:31,695 - DEBUG - Remove From Test Cycle
 2020-07-24 19:39:31,702 - DEBUG - Save Test Cycle
 2020-07-24 19:41:25,625 - DEBUG - Moving to Box
 2020-07-24 19:41:25,625 - DEBUG - Remove From Box
 2020-07-24 19:41:25,636 - DEBUG - Add To Box
 2020-07-24 19:41:25,644 - DEBUG - Remove From Test Cycle
 2020-07-24 19:41:25,651 - DEBUG - Save Test Cycle
 2020-07-24 19:41:46,391 - DEBUG - Moving to Box
 2020-07-24 19:41:46,391 - DEBUG - Remove From Box
 2020-07-24 19:41:46,399 - DEBUG - Add To Box
 2020-07-24 19:41:46,408 - DEBUG - Remove From Test Cycle
 2020-07-24 19:41:46,415 - DEBUG - Save Test Cycle
 2020-07-24 19:43:11,282 - DEBUG - Moving to Box
 2020-07-24 19:43:11,283 - DEBUG - Remove From Box
 2020-07-24 19:43:11,292 - DEBUG - Add To Box
 2020-07-24 19:43:11,300 - DEBUG - Remove From Test Cycle
 2020-07-24 19:43:11,308 - DEBUG - Save Test Cycle
 2020-07-24 19:43:43,313 - DEBUG - Moving to Box
 2020-07-24 19:43:43,313 - DEBUG - Remove From Box
 2020-07-24 19:43:43,323 - DEBUG - Add To Box
 2020-07-24 19:43:43,332 - DEBUG - Remove From Test Cycle
 2020-07-24 19:43:43,340 - DEBUG - Save Test Cycle
 2020-07-24 19:44:41,035 - DEBUG - Moving to Box
 2020-07-24 19:44:41,035 - DEBUG - Remove From Box
 2020-07-24 19:44:41,045 - DEBUG - Add To Box
 2020-07-24 19:44:41,054 - DEBUG - Remove From Test Cycle
 2020-07-24 19:44:41,061 - DEBUG - Save Test Cycle
 2020-07-24 19:45:50,399 - DEBUG - Moving to Box
 2020-07-24 19:45:50,399 - DEBUG - Remove From Box
 2020-07-24 19:45:50,409 - DEBUG - Add To Box
 2020-07-24 19:45:50,418 - DEBUG - Remove From Test Cycle
 2020-07-24 19:45:50,425 - DEBUG - Save Test Cycle
 2020-07-24 19:49:21,345 - DEBUG - Moving to Box
 2020-07-24 19:49:21,345 - DEBUG - Remove From Box
 2020-07-24 19:49:21,354 - DEBUG - Add To Box
 2020-07-24 19:49:21,362 - DEBUG - Remove From Test Cycle
 2020-07-24 19:49:21,370 - DEBUG - Save Test Cycle
 2020-07-24 19:55:14,824 - DEBUG - Remove From Test Cycle
 2020-07-24 19:55:14,833 - DEBUG - Save Test Cycle
 2020-07-24 19:55:50,721 - DEBUG - Moving to Box
 2020-07-24 19:55:50,721 - DEBUG - Remove From Box
 2020-07-24 19:55:50,729 - DEBUG - Add To Box
 2020-07-24 19:55:50,738 - DEBUG - Remove From Test Cycle
 2020-07-24 19:55:50,745 - DEBUG - Save Test Cycle
 2020-07-24 19:57:04,882 - DEBUG - Remove From Test Cycle
 2020-07-24 19:57:04,891 - DEBUG - Save Test Cycle
 2020-07-24 19:57:33,140 - DEBUG - Moving to Box
 2020-07-24 19:57:33,141 - DEBUG - Remove From Box
 2020-07-24 19:57:33,151 - DEBUG - Add To Box
 2020-07-24 19:57:33,159 - DEBUG - Remove From Test Cycle
 2020-07-24 19:57:33,166 - DEBUG - Save Test Cycle
 2020-07-24 19:57:46,658 - DEBUG - Moving to Box
 2020-07-24 19:57:46,658 - DEBUG - Remove From Box
 2020-07-24 19:57:46,671 - DEBUG - Add To Box
 2020-07-24 19:57:46,682 - DEBUG - Remove From Test Cycle
 2020-07-24 19:57:46,690 - DEBUG - Save Test Cycle
 2020-07-24 22:08:01,446 - DEBUG - Moving to Box
 2020-07-24 22:08:01,446 - DEBUG - Remove From Box
 2020-07-24 22:08:01,456 - DEBUG - Add To Box
 2020-07-24 22:08:01,465 - DEBUG - Remove From Test Cycle
 2020-07-24 22:08:01,472 - DEBUG - Save Test Cycle
 2020-07-24 22:08:03,094 - DEBUG - Save Test Cycle
 2020-07-24 22:08:05,673 - DEBUG - Start of Logging Leitner Module
 2020-07-24 22:08:05,674 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-24 22:08:05,674 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-24 22:08:05,674 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-24 22:08:05,674 - INFO - on things you get right.
 2020-07-24 22:08:05,720 - DEBUG - c:\dev2\github\python\quiz
 2020-07-24 22:08:05,730 - DEBUG - 15 }
 2020-07-24 22:08:05,730 - DEBUG - 67 }
 2020-07-24 22:08:05,730 - DEBUG - 146 }
 2020-07-24 22:08:05,730 - DEBUG - interview-1
 2020-07-24 22:08:05,730 - DEBUG - What is the worst mistake you ever made?
 2020-07-24 22:08:05,731 - DEBUG - Drove on ice when I should have been parked. Drove through Nashville.
 2020-07-24 22:08:05,731 - DEBUG - 163 }
 2020-07-24 22:08:05,731 - DEBUG - 205 }
 2020-07-24 22:08:05,731 - DEBUG - 479 }
 2020-07-24 22:08:05,731 - DEBUG - interview-2
 2020-07-24 22:08:05,731 - DEBUG - What is your biggest weakness?
 2020-07-24 22:08:05,731 - DEBUG - Documentation habits. I know how to document and when to document. I do document but somewhat inconsistently.I write articles as documentation for others for the web. I could make documenting more important, form better habits andfind or learn new tools to help.
 2020-07-24 22:08:05,732 - DEBUG - 496 }
 2020-07-24 22:08:05,732 - DEBUG - 539 }
 2020-07-24 22:08:05,732 - DEBUG - 844 }
 2020-07-24 22:08:05,732 - DEBUG - interview-3
 2020-07-24 22:08:05,732 - DEBUG - What is your greatest strength?
 2020-07-24 22:08:05,732 - DEBUG - Helping others to learn computer concepts. Explaining in simple terms with analogy or metaphor. I teach myselffirst complex systems or concepts. I share my knowledge freely and welcome opportunity. Writing articles andpossibly documentation or training material. My web site is a good example.
 2020-07-24 22:08:05,732 - DEBUG - 861 }
 2020-07-24 22:08:05,733 - DEBUG - 919 }
 2020-07-24 22:08:05,733 - DEBUG - 1360 }
 2020-07-24 22:08:05,733 - DEBUG - interview-4
 2020-07-24 22:08:05,733 - DEBUG - Give some examples for when you taught others.
 2020-07-24 22:08:05,733 - DEBUG - In Army Reserve taught task and task steps and standards. In restaurant taught cooking, cleaning, preparing, stocking, scheduling, standards and techniques.In office work I shared my computer knowledge with anyone if needed. In trucking, safety, rules, operating equipment. Situational awareness (smith system). Interaction with police, shippers, dock workers, other truckers, motorist, dispatch. Other standards and techniques.
 2020-07-24 22:08:05,733 - DEBUG - 1377 }
 2020-07-24 22:08:05,733 - DEBUG - 1414 }
 2020-07-24 22:08:05,734 - DEBUG - 1549 }
 2020-07-24 22:08:05,734 - DEBUG - interview-5
 2020-07-24 22:08:05,734 - DEBUG - What makes you effective?
 2020-07-24 22:08:05,734 - DEBUG - Stubborn persistence in problem solving. Know problem solving steps. Know trouble shooting steps. Know Debugging techniques.
 2020-07-24 22:08:05,734 - DEBUG - 1579 }
 2020-07-24 22:08:05,734 - DEBUG - 1627 }
 2020-07-24 22:08:05,735 - DEBUG - 2232 }
 2020-07-24 22:08:05,735 - DEBUG - interview-problemsolve-1
 2020-07-24 22:08:05,735 - DEBUG - What are your problem solving steps?
 2020-07-24 22:08:05,735 - DEBUG - 1. Identify the problem. 2. Gather facts and assumptions. Understand what final outcome will be. 3. Form a theory as to probably cause of issue. do some preliminary trouble shooting or debugging to eliminate possibilities. 4. Develop possible solutions and choose the best one then try it. 5.  Test functionality and Analyze the results. 6 Worked or failed? 6a If it worked Verify System functionality. Document process in implementing solution which  may require repeating the process. 6b If it failed go back to prior step or maybe even the beginning and try again with alternate solution.
 2020-07-24 22:08:05,735 - DEBUG - 2262 }
 2020-07-24 22:08:05,735 - DEBUG - 2318 }
 2020-07-24 22:08:05,735 - DEBUG - 2564 }
 2020-07-24 22:08:05,736 - DEBUG - interview-problemsolve-2
 2020-07-24 22:08:05,736 - DEBUG - What trouble shooting techniques do you use?
 2020-07-24 22:08:05,736 - DEBUG - Process of elimination, to find out what is not working you often have to verify what is working. Change one thing at a time, make notes, go backto original state. Narrow down the problem from many possible things to one or two things.
 2020-07-24 22:08:05,736 - DEBUG - 2594 }
 2020-07-24 22:08:05,736 - DEBUG - 2643 }
 2020-07-24 22:08:05,737 - DEBUG - 3123 }
 2020-07-24 22:08:05,737 - DEBUG - interview-problemsolve-3
 2020-07-24 22:08:05,737 - DEBUG - What debugging techniques do you use?
 2020-07-24 22:08:05,737 - DEBUG - Logging to console and or files or databases. Watching state and variables. Asserting conditions with basic if/else or language assertionsor unit testing. Find and filter log files. Locate and read/edit config files. Use tools like debuggers, breakpoints. Get insight with DOM inspectors Element inspectors or UML modeling. Search forums and web articles. Ask if anyone has had experience with same issues. Look to see if underlying systems have known issues or bugs.
 2020-07-24 22:08:05,737 - DEBUG - 3153 }
 2020-07-24 22:08:05,737 - DEBUG - 3221 }
 2020-07-24 22:08:05,737 - DEBUG - 3476 }
 2020-07-24 22:08:05,737 - DEBUG - interview-problemsolve-4
 2020-07-24 22:08:05,738 - DEBUG - What are the Military problem solving steps you learned?
 2020-07-24 22:08:05,738 - DEBUG - Recognize and define the problem. Gather facts and make assumptions. Define end states and establish criteria. Develop possible solutions.Analyze and compare possible solutions. Select and implement solution. Analyze solution for effectiveness.
 2020-07-24 22:08:05,738 - DEBUG - 3506 }
 2020-07-24 22:08:05,738 - DEBUG - 3571 }
 2020-07-24 22:08:05,738 - DEBUG - 3716 }
 2020-07-24 22:08:05,738 - DEBUG - interview-problemsolve-5
 2020-07-24 22:08:05,738 - DEBUG - What was the scientific method you learned in school?
 2020-07-24 22:08:05,738 - DEBUG - Ask a question. Do background research. Construct a hypothesis. Test hypothesis by doing experiments. Analyze data and draw conclusion.
 2020-07-24 22:08:05,738 - DEBUG - 3746 }
 2020-07-24 22:08:05,738 - DEBUG - 3802 }
 2020-07-24 22:08:05,739 - DEBUG - 3997 }
 2020-07-24 22:08:05,739 - DEBUG - interview-problemsolve-6
 2020-07-24 22:08:05,739 - DEBUG - What are the CompTIA trouble shooting steps?
 2020-07-24 22:08:05,739 - DEBUG - Identify the problem. Establish theory of probably cause. Test theory to determine actual cause. Establish a plan and execute it. Verifyfull system functionality. Document the process.
 2020-07-24 22:08:05,739 - DEBUG - 4028 }
 2020-07-24 22:08:05,739 - DEBUG - 4089 }
 2020-07-24 22:08:05,739 - DEBUG - 4150 }
 2020-07-24 22:08:05,739 - DEBUG - interview-interpersonal-1
 2020-07-24 22:08:05,740 - DEBUG - How would you describe your communication skills?
 2020-07-24 22:08:05,740 - DEBUG - I'm good at written communication and ok at verbal.
 2020-07-24 22:08:05,740 - DEBUG - 4181 }
 2020-07-24 22:08:05,740 - DEBUG - 4216 }
 2020-07-24 22:08:05,740 - DEBUG - 4265 }
 2020-07-24 22:08:05,740 - DEBUG - interview-interpersonal-2
 2020-07-24 22:08:05,740 - DEBUG - What about reliability?
 2020-07-24 22:08:05,740 - DEBUG - I learned to be on time by being early.
 2020-07-24 22:08:05,740 - DEBUG - 4296 }
 2020-07-24 22:08:05,740 - DEBUG - 4354 }
 2020-07-24 22:08:05,741 - DEBUG - 4509 }
 2020-07-24 22:08:05,741 - DEBUG - interview-interpersonal-3
 2020-07-24 22:08:05,741 - DEBUG - How would you describe your leadership skills?
 2020-07-24 22:08:05,741 - DEBUG - I lead by example. I don't expect more fromm others than I expect of myself. I feel this leads to a form ofrespect which increases productivity.
 2020-07-24 22:08:05,741 - DEBUG - 4540 }
 2020-07-24 22:08:05,741 - DEBUG - 4604 }
 2020-07-24 22:08:05,741 - DEBUG - 4729 }
 2020-07-24 22:08:05,741 - DEBUG - interview-interpersonal-4
 2020-07-24 22:08:05,741 - DEBUG - How would you describe your decision making ability?
 2020-07-24 22:08:05,741 - DEBUG - Gather facts and identify assumptions before making decisions. It's all of my problem solving steps and techniques.
 2020-07-24 22:08:05,742 - DEBUG - 4760 }
 2020-07-24 22:08:05,742 - DEBUG - 4803 }
 2020-07-24 22:08:05,742 - DEBUG - 4941 }
 2020-07-24 22:08:05,742 - DEBUG - interview-interpersonal-5
 2020-07-24 22:08:05,742 - DEBUG - How are you with assertiveness?
 2020-07-24 22:08:05,742 - DEBUG - Can be very assertive when baked into a corner. Will always go to the person first, not subordinates, co-workersor supervisors.
 2020-07-24 22:08:05,742 - DEBUG - 4972 }
 2020-07-24 22:08:05,742 - DEBUG - 5007 }
 2020-07-24 22:08:05,743 - DEBUG - 5036 }
 2020-07-24 22:08:05,743 - DEBUG - interview-interpersonal-6
 2020-07-24 22:08:05,743 - DEBUG - Describe your attitude?
 2020-07-24 22:08:05,743 - DEBUG - Generally positive.
 2020-07-24 22:08:05,743 - DEBUG - 5067 }
 2020-07-24 22:08:05,743 - DEBUG - 5106 }
 2020-07-24 22:08:05,744 - DEBUG - 5260 }
 2020-07-24 22:08:05,744 - DEBUG - interview-interpersonal-7
 2020-07-24 22:08:05,744 - DEBUG - How do you handle feedback.
 2020-07-24 22:08:05,744 - DEBUG - As long as it is usually in a positive manner and light I welcome feedback. I don't care much for people thatlike to be quick to anger or yell.
 2020-07-24 22:08:05,744 - DEBUG - 5291 }
 2020-07-24 22:08:05,745 - DEBUG - 5335 }
 2020-07-24 22:08:05,745 - DEBUG - 5483 }
 2020-07-24 22:08:05,745 - DEBUG - interview-interpersonal-6
 2020-07-24 22:08:05,745 - DEBUG - How do you handle confrontation?
 2020-07-24 22:08:05,745 - DEBUG - I show empathy. Diffuse anger. I ask is it justified at all? I stay calm. I avoid character assaults. I know when to disengage.Stay safe.
 2020-07-24 22:08:05,745 - DEBUG - 5500 }
 2020-07-24 22:08:05,746 - DEBUG - 5539 }
 2020-07-24 22:08:05,746 - DEBUG - 5677 }
 2020-07-24 22:08:05,746 - DEBUG - interview-6
 2020-07-24 22:08:05,746 - DEBUG - Describe your ideal career.
 2020-07-24 22:08:05,746 - DEBUG - A career that I am passionate about, love to wake up and go do, that's respectable. One that takes care of meand my dependents.
 2020-07-24 22:08:05,746 - DEBUG - 5694 }
 2020-07-24 22:08:05,746 - DEBUG - 5733 }
 2020-07-24 22:08:05,746 - DEBUG - 5839 }
 2020-07-24 22:08:05,746 - DEBUG - interview-7
 2020-07-24 22:08:05,747 - DEBUG - How do you handle pressure?
 2020-07-24 22:08:05,747 - DEBUG - Become more focused and intent on implementing all techniques and tools. Eliminate distractions.
 2020-07-24 22:08:05,747 - DEBUG - 5856 }
 2020-07-24 22:08:05,747 - DEBUG - 5901 }
 2020-07-24 22:08:05,747 - DEBUG - 5995 }
 2020-07-24 22:08:05,747 - DEBUG - interview-8
 2020-07-24 22:08:05,747 - DEBUG - How do you handle disappointment?
 2020-07-24 22:08:05,747 - DEBUG - With introspection, analyze myself and the situation. Look for improvements to make.
 2020-07-24 22:08:05,747 - DEBUG - 6012 }
 2020-07-24 22:08:05,747 - DEBUG - 6066 }
 2020-07-24 22:08:05,748 - DEBUG - 6161 }
 2020-07-24 22:08:05,748 - DEBUG - interview-9
 2020-07-24 22:08:05,748 - DEBUG - What type of environment do you thrive in?
 2020-07-24 22:08:05,748 - DEBUG - Where I'm skilled, needed, wanted and liked. Where there is a challenge that I enjoy.
 2020-07-24 22:08:05,748 - DEBUG - 6179 }
 2020-07-24 22:08:05,748 - DEBUG - 6236 }
 2020-07-24 22:08:05,748 - DEBUG - 6305 }
 2020-07-24 22:08:05,748 - DEBUG - interview-10
 2020-07-24 22:08:05,749 - DEBUG - Describe your leadership style and abilities.
 2020-07-24 22:08:05,749 - DEBUG - I lead by example, not forceful or dictatorial type at all.
 2020-07-24 22:08:05,749 - DEBUG - 6323 }
 2020-07-24 22:08:05,749 - DEBUG - 6359 }
 2020-07-24 22:08:05,749 - DEBUG - 6529 }
 2020-07-24 22:08:05,749 - DEBUG - interview-11
 2020-07-24 22:08:05,749 - DEBUG - How do you train others?
 2020-07-24 22:08:05,749 - DEBUG - Maintain or enhance self esteem. Show empathy. Ask how they would solve the problem. Explain how I would solve the problem and work out the solution with them.
 2020-07-24 22:08:05,749 - DEBUG - 6547 }
 2020-07-24 22:08:05,749 - DEBUG - 6591 }
 2020-07-24 22:08:05,750 - DEBUG - 6675 }
 2020-07-24 22:08:05,750 - DEBUG - interview-12
 2020-07-24 22:08:05,750 - DEBUG - What can you do for the company?
 2020-07-24 22:08:05,750 - DEBUG - Compose software, troubleshoot problems in systems.Train and coach others.
 2020-07-24 22:08:05,750 - DEBUG - 6693 }
 2020-07-24 22:08:05,750 - DEBUG - 6728 }
 2020-07-24 22:08:05,751 - DEBUG - 6856 }
 2020-07-24 22:08:05,751 - DEBUG - interview-13
 2020-07-24 22:08:05,751 - DEBUG - Why should we hire you?
 2020-07-24 22:08:05,751 - DEBUG - I'm self motiviated. I learn in my spare time for improvement. I welcome opportunity to share what I know with others.
 2020-07-24 22:08:05,751 - DEBUG - 6874 }
 2020-07-24 22:08:05,751 - DEBUG - 6908 }
 2020-07-24 22:08:05,752 - DEBUG - 7448 }
 2020-07-24 22:08:05,752 - DEBUG - interview-14
 2020-07-24 22:08:05,752 - DEBUG - How are you different?
 2020-07-24 22:08:05,752 - DEBUG - I've spent 35 years of my time in self study, which I say is like 7 years on a job. I know am very familiar with hardwareand repair, software of all kinds and tools, multiple operating systems, and tcp/ip networking. I know coding, debugging, developing appssome oop design and engineering. I've studied desktop, client/server, console, web front end and back end, database and mobilesoftware development. 20 years of part time study with Java, which I say is like 5 years on a job. I majored in Java and minored inJavaScript.
 2020-07-24 22:08:05,752 - DEBUG - 7466 }
 2020-07-24 22:08:05,752 - DEBUG - 7491 }
 2020-07-24 22:08:05,752 - DEBUG - 7828 }
 2020-07-24 22:08:05,752 - DEBUG - interview-15
 2020-07-24 22:08:05,753 - DEBUG - What are you?
 2020-07-24 22:08:05,753 - DEBUG - Programmer, Developer, Something of an Architect whether I'm writing a line of code, object, system of objects,API, Application, System of Applications, I'm a Software Engineer. I'm a leader, coach, trainer, mentor. Researcher and writer.Computer technician but not a guru. Coach in forums, groups and chat rooms on internet.
 2020-07-24 22:08:05,753 - DEBUG - 7846 }
 2020-07-24 22:08:05,753 - DEBUG - 7895 }
 2020-07-24 22:08:05,753 - DEBUG - 7934 }
 2020-07-24 22:08:05,753 - DEBUG - interview-16
 2020-07-24 22:08:05,753 - DEBUG - Where do you see yourself in 5 years?
 2020-07-24 22:08:05,753 - DEBUG - Very good software developer.
 2020-07-24 22:08:05,753 - DEBUG - 7952 }
 2020-07-24 22:08:05,753 - DEBUG - 8002 }
 2020-07-24 22:08:05,754 - DEBUG - 8059 }
 2020-07-24 22:08:05,754 - DEBUG - interview-17
 2020-07-24 22:08:05,754 - DEBUG - Where do you see yourself in 10 years?
 2020-07-24 22:08:05,754 - DEBUG - Mentor, teacher, trainer but not a supervisor.
 2020-07-24 22:08:05,754 - DEBUG - box1
 2020-07-24 22:08:05,762 - DEBUG - box1
 2020-07-24 22:08:05,762 - DEBUG - box2
 2020-07-24 22:08:05,771 - DEBUG - box1
 2020-07-24 22:08:05,771 - DEBUG - box2
 2020-07-24 22:08:05,771 - DEBUG - box3
 2020-07-24 22:08:05,778 - DEBUG - box1
 2020-07-24 22:08:05,778 - DEBUG - box2
 2020-07-24 22:08:05,778 - DEBUG - box3
 2020-07-24 22:08:05,778 - DEBUG - box4
 2020-07-24 22:08:05,780 - DEBUG - box1
 2020-07-24 22:08:05,781 - DEBUG - box2
 2020-07-24 22:08:05,781 - DEBUG - box3
 2020-07-24 22:08:05,781 - DEBUG - box4
 2020-07-24 22:08:05,781 - DEBUG - box5
 2020-07-24 22:08:05,783 - DEBUG - box1
 2020-07-24 22:08:05,783 - DEBUG - box2
 2020-07-24 22:08:05,783 - DEBUG - box3
 2020-07-24 22:08:05,783 - DEBUG - box4
 2020-07-24 22:08:05,784 - DEBUG - box5
 2020-07-24 22:08:05,784 - DEBUG - box6
 2020-07-24 22:08:05,785 - DEBUG - finding test cycle file
 2020-07-24 22:08:05,785 - DEBUG - quizs\study\
 2020-07-24 22:08:05,786 - DEBUG - box1.txt
 2020-07-24 22:08:05,786 - DEBUG - box2.txt
 2020-07-24 22:08:05,786 - DEBUG - box3.txt
 2020-07-24 22:08:05,786 - DEBUG - box4.txt
 2020-07-24 22:08:05,786 - DEBUG - box5.txt
 2020-07-24 22:08:05,786 - DEBUG - box6.txt
 2020-07-24 22:08:05,786 - DEBUG - interview_cards.txt
 2020-07-24 22:08:05,786 - DEBUG - testcycle1.txt
 2020-07-24 22:08:05,787 - DEBUG - box1
 2020-07-24 22:08:05,787 - DEBUG - box2
 2020-07-24 22:08:05,787 - DEBUG - box3
 2020-07-24 22:08:05,787 - DEBUG - box4
 2020-07-24 22:08:05,787 - DEBUG - box5
 2020-07-24 22:08:05,787 - DEBUG - box6
 2020-07-24 22:08:05,787 - DEBUG - interview_cards
 2020-07-24 22:08:05,788 - DEBUG - testcycle1
 2020-07-24 22:08:05,788 - DEBUG - found testcycle1.txt
 2020-07-24 22:08:05,788 - DEBUG - testcycle1
 2020-07-24 22:08:05,788 - DEBUG - quizs\study\
 2020-07-24 22:08:05,794 - DEBUG - Starting new cycle number 1
 2020-07-24 22:08:05,795 - DEBUG - highestbox 2
 2020-07-24 22:08:05,795 - DEBUG - Loading box1 to box2
 2020-07-24 22:08:05,870 - DEBUG - Cycle number 2
 2020-07-24 22:08:57,027 - DEBUG - Moving to Box
 2020-07-24 22:08:57,027 - DEBUG - Remove From Box
 2020-07-24 22:08:57,029 - DEBUG - Add To Box
 2020-07-24 22:08:57,030 - DEBUG - Remove From Test Cycle
 2020-07-24 22:08:57,039 - DEBUG - Save Test Cycle
 2020-07-24 22:11:33,001 - DEBUG - Moving to Box
 2020-07-24 22:11:33,001 - DEBUG - Remove From Box
 2020-07-24 22:11:33,011 - DEBUG - Add To Box
 2020-07-24 22:11:33,020 - DEBUG - Remove From Test Cycle
 2020-07-24 22:11:33,027 - DEBUG - Save Test Cycle
 2020-07-24 22:11:42,200 - DEBUG - Moving to Box
 2020-07-24 22:11:42,200 - DEBUG - Remove From Box
 2020-07-24 22:11:42,210 - DEBUG - Add To Box
 2020-07-24 22:11:42,219 - DEBUG - Remove From Test Cycle
 2020-07-24 22:11:42,226 - DEBUG - Save Test Cycle
 2020-07-24 22:13:00,290 - DEBUG - Moving to Box
 2020-07-24 22:13:00,290 - DEBUG - Remove From Box
 2020-07-24 22:13:00,293 - DEBUG - Add To Box
 2020-07-24 22:13:00,306 - DEBUG - Remove From Test Cycle
 2020-07-24 22:13:00,316 - DEBUG - Save Test Cycle
 2020-07-24 22:13:15,274 - DEBUG - Moving to Box
 2020-07-24 22:13:15,275 - DEBUG - Remove From Box
 2020-07-24 22:13:15,283 - DEBUG - Add To Box
 2020-07-24 22:13:15,291 - DEBUG - Remove From Test Cycle
 2020-07-24 22:13:15,298 - DEBUG - Save Test Cycle
 2020-07-24 22:13:43,466 - DEBUG - Moving to Box
 2020-07-24 22:13:43,467 - DEBUG - Remove From Box
 2020-07-24 22:13:43,477 - DEBUG - Add To Box
 2020-07-24 22:13:43,484 - DEBUG - Remove From Test Cycle
 2020-07-24 22:13:43,492 - DEBUG - Save Test Cycle
 2020-07-24 22:15:42,570 - DEBUG - Moving to Box
 2020-07-24 22:15:42,570 - DEBUG - Remove From Box
 2020-07-24 22:15:42,578 - DEBUG - Add To Box
 2020-07-24 22:15:42,586 - DEBUG - Remove From Test Cycle
 2020-07-24 22:15:42,593 - DEBUG - Save Test Cycle
 2020-07-24 22:16:22,225 - DEBUG - Moving to Box
 2020-07-24 22:16:22,225 - DEBUG - Remove From Box
 2020-07-24 22:16:22,235 - DEBUG - Add To Box
 2020-07-24 22:16:22,242 - DEBUG - Remove From Test Cycle
 2020-07-24 22:16:22,250 - DEBUG - Save Test Cycle
 2020-07-24 22:17:32,533 - DEBUG - Moving to Box
 2020-07-24 22:17:32,533 - DEBUG - Remove From Box
 2020-07-24 22:17:32,541 - DEBUG - Add To Box
 2020-07-24 22:17:32,549 - DEBUG - Remove From Test Cycle
 2020-07-24 22:17:32,557 - DEBUG - Save Test Cycle
 2020-07-24 22:18:25,232 - DEBUG - Moving to Box
 2020-07-24 22:18:25,232 - DEBUG - Remove From Box
 2020-07-24 22:18:25,241 - DEBUG - Add To Box
 2020-07-24 22:18:25,250 - DEBUG - Remove From Test Cycle
 2020-07-24 22:18:25,257 - DEBUG - Save Test Cycle
 2020-07-24 22:22:08,406 - DEBUG - Moving to Box
 2020-07-24 22:22:08,406 - DEBUG - Remove From Box
 2020-07-24 22:22:08,416 - DEBUG - Add To Box
 2020-07-24 22:22:08,425 - DEBUG - Remove From Test Cycle
 2020-07-24 22:22:08,435 - DEBUG - Save Test Cycle
 2020-07-24 22:22:43,601 - DEBUG - Moving to Box
 2020-07-24 22:22:43,601 - DEBUG - Remove From Box
 2020-07-24 22:22:43,611 - DEBUG - Add To Box
 2020-07-24 22:22:43,622 - DEBUG - Remove From Test Cycle
 2020-07-24 22:22:43,629 - DEBUG - Save Test Cycle
 2020-07-24 22:28:23,853 - DEBUG - Moving to Box
 2020-07-24 22:28:23,854 - DEBUG - Remove From Box
 2020-07-24 22:28:23,864 - DEBUG - Add To Box
 2020-07-24 22:28:23,875 - DEBUG - Remove From Test Cycle
 2020-07-24 22:28:23,883 - DEBUG - Save Test Cycle
 2020-07-24 22:29:34,015 - DEBUG - Moving to Box
 2020-07-24 22:29:34,015 - DEBUG - Remove From Box
 2020-07-24 22:29:34,024 - DEBUG - Add To Box
 2020-07-24 22:29:34,032 - DEBUG - Remove From Test Cycle
 2020-07-24 22:29:34,040 - DEBUG - Save Test Cycle
 2020-07-24 22:30:15,976 - DEBUG - Moving to Box
 2020-07-24 22:30:15,977 - DEBUG - Remove From Box
 2020-07-24 22:30:15,986 - DEBUG - Add To Box
 2020-07-24 22:30:15,994 - DEBUG - Remove From Test Cycle
 2020-07-24 22:30:16,001 - DEBUG - Save Test Cycle
 2020-07-24 22:31:29,312 - DEBUG - Moving to Box
 2020-07-24 22:31:29,313 - DEBUG - Remove From Box
 2020-07-24 22:31:29,322 - DEBUG - Add To Box
 2020-07-24 22:31:29,330 - DEBUG - Remove From Test Cycle
 2020-07-24 22:31:29,337 - DEBUG - Save Test Cycle
 2020-07-24 22:32:24,932 - DEBUG - Moving to Box
 2020-07-24 22:32:24,932 - DEBUG - Remove From Box
 2020-07-24 22:32:24,941 - DEBUG - Add To Box
 2020-07-24 22:32:24,948 - DEBUG - Remove From Test Cycle
 2020-07-24 22:32:24,956 - DEBUG - Save Test Cycle
 2020-07-24 22:33:33,552 - DEBUG - Moving to Box
 2020-07-24 22:33:33,552 - DEBUG - Remove From Box
 2020-07-24 22:33:33,560 - DEBUG - Add To Box
 2020-07-24 22:33:33,568 - DEBUG - Remove From Test Cycle
 2020-07-24 22:33:33,575 - DEBUG - Save Test Cycle
 2020-07-24 22:35:04,808 - DEBUG - Moving to Box
 2020-07-24 22:35:04,808 - DEBUG - Remove From Box
 2020-07-24 22:35:04,818 - DEBUG - Add To Box
 2020-07-24 22:35:04,826 - DEBUG - Remove From Test Cycle
 2020-07-24 22:35:04,833 - DEBUG - Save Test Cycle
 2020-07-24 22:35:55,481 - DEBUG - Moving to Box
 2020-07-24 22:35:55,481 - DEBUG - Remove From Box
 2020-07-24 22:35:55,492 - DEBUG - Add To Box
 2020-07-24 22:35:55,500 - DEBUG - Remove From Test Cycle
 2020-07-24 22:35:55,507 - DEBUG - Save Test Cycle
 2020-07-24 22:37:34,121 - DEBUG - Moving to Box
 2020-07-24 22:37:34,121 - DEBUG - Remove From Box
 2020-07-24 22:37:34,129 - DEBUG - Add To Box
 2020-07-24 22:37:34,139 - DEBUG - Remove From Test Cycle
 2020-07-24 22:37:34,146 - DEBUG - Save Test Cycle
 2020-07-24 22:38:11,144 - DEBUG - Moving to Box
 2020-07-24 22:38:11,145 - DEBUG - Remove From Box
 2020-07-24 22:38:11,155 - DEBUG - Add To Box
 2020-07-24 22:38:11,162 - DEBUG - Remove From Test Cycle
 2020-07-24 22:38:11,170 - DEBUG - Save Test Cycle
 2020-07-24 22:40:13,669 - DEBUG - Remove From Test Cycle
 2020-07-24 22:40:13,679 - DEBUG - Save Test Cycle
 2020-07-24 22:41:28,444 - DEBUG - Moving to Box
 2020-07-24 22:41:28,445 - DEBUG - Remove From Box
 2020-07-24 22:41:28,453 - DEBUG - Add To Box
 2020-07-24 22:41:28,461 - DEBUG - Remove From Test Cycle
 2020-07-24 22:41:28,468 - DEBUG - Save Test Cycle
 2020-07-24 22:43:33,299 - DEBUG - Moving to Box
 2020-07-24 22:43:33,299 - DEBUG - Remove From Box
 2020-07-24 22:43:33,309 - DEBUG - Add To Box
 2020-07-24 22:43:33,317 - DEBUG - Remove From Test Cycle
 2020-07-24 22:43:33,325 - DEBUG - Save Test Cycle
 2020-07-24 22:44:20,694 - DEBUG - Moving to Box
 2020-07-24 22:44:20,695 - DEBUG - Remove From Box
 2020-07-24 22:44:20,705 - DEBUG - Add To Box
 2020-07-24 22:44:20,713 - DEBUG - Remove From Test Cycle
 2020-07-24 22:44:20,720 - DEBUG - Save Test Cycle
 2020-07-24 22:45:12,792 - DEBUG - Moving to Box
 2020-07-24 22:45:12,792 - DEBUG - Remove From Box
 2020-07-24 22:45:12,801 - DEBUG - Add To Box
 2020-07-24 22:45:12,809 - DEBUG - Remove From Test Cycle
 2020-07-24 22:45:12,816 - DEBUG - Save Test Cycle
 2020-07-24 22:46:16,611 - DEBUG - Moving to Box
 2020-07-24 22:46:16,611 - DEBUG - Remove From Box
 2020-07-24 22:46:16,620 - DEBUG - Add To Box
 2020-07-24 22:46:16,628 - DEBUG - Remove From Test Cycle
 2020-07-24 22:46:16,634 - DEBUG - Save Test Cycle
 2020-07-24 22:47:00,984 - DEBUG - Moving to Box
 2020-07-24 22:47:00,984 - DEBUG - Remove From Box
 2020-07-24 22:47:00,992 - DEBUG - Add To Box
 2020-07-24 22:47:01,001 - DEBUG - Remove From Test Cycle
 2020-07-24 22:47:01,008 - DEBUG - Save Test Cycle
 2020-07-24 22:49:33,232 - DEBUG - Moving to Box
 2020-07-24 22:49:33,232 - DEBUG - Remove From Box
 2020-07-24 22:49:33,241 - DEBUG - Add To Box
 2020-07-24 22:49:33,249 - DEBUG - Remove From Test Cycle
 2020-07-24 22:49:33,256 - DEBUG - Save Test Cycle
 2020-07-24 22:49:34,245 - DEBUG - Save Test Cycle
 2020-07-24 23:11:19,308 - DEBUG - Start of Logging Leitner Module
 2020-07-24 23:11:19,309 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-24 23:11:19,309 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-24 23:11:19,309 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-24 23:11:19,309 - INFO - on things you get right.
 2020-07-24 23:11:19,356 - DEBUG - c:\dev2\github\python\quiz
 2020-07-24 23:11:19,405 - DEBUG - 15 }
 2020-07-24 23:11:19,405 - DEBUG - 57 }
 2020-07-24 23:11:19,406 - DEBUG - 225 }
 2020-07-24 23:11:19,406 - DEBUG - algorithm-1
 2020-07-24 23:11:19,406 - DEBUG -  What is algorithm efficiency?
 2020-07-24 23:11:19,406 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-07-24 23:11:19,406 - DEBUG - 242 }
 2020-07-24 23:11:19,406 - DEBUG - 324 }
 2020-07-24 23:11:19,406 - DEBUG - 403 }
 2020-07-24 23:11:19,406 - DEBUG - algorithm-2
 2020-07-24 23:11:19,406 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-07-24 23:11:19,406 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-07-24 23:11:19,407 - DEBUG - 420 }
 2020-07-24 23:11:19,407 - DEBUG - 502 }
 2020-07-24 23:11:19,407 - DEBUG - 531 }
 2020-07-24 23:11:19,407 - DEBUG - algorithm-3
 2020-07-24 23:11:19,407 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-07-24 23:11:19,407 - DEBUG -  Little O notation.
 2020-07-24 23:11:19,407 - DEBUG - 554 }
 2020-07-24 23:11:19,407 - DEBUG - 597 }
 2020-07-24 23:11:19,408 - DEBUG - 846 }
 2020-07-24 23:11:19,408 - DEBUG - alogorithm-bigo-1
 2020-07-24 23:11:19,408 - DEBUG -  Describe O(1) time complexity.
 2020-07-24 23:11:19,408 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-07-24 23:11:19,408 - DEBUG - 868 }
 2020-07-24 23:11:19,408 - DEBUG - 911 }
 2020-07-24 23:11:19,408 - DEBUG - 1271 }
 2020-07-24 23:11:19,408 - DEBUG - algorithm-bigo-2
 2020-07-24 23:11:19,409 - DEBUG -  Describe O(n) time complexity.
 2020-07-24 23:11:19,409 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-07-24 23:11:19,409 - DEBUG - 1293 }
 2020-07-24 23:11:19,409 - DEBUG - 1338 }
 2020-07-24 23:11:19,409 - DEBUG - 1581 }
 2020-07-24 23:11:19,409 - DEBUG - algorithm-bigo-3
 2020-07-24 23:11:19,409 - DEBUG -  Describe O(n^2) time complexity.
 2020-07-24 23:11:19,409 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-07-24 23:11:19,410 - DEBUG - 1603 }
 2020-07-24 23:11:19,410 - DEBUG - 1650 }
 2020-07-24 23:11:19,410 - DEBUG - 1941 }
 2020-07-24 23:11:19,410 - DEBUG - algorithm-bigo-4
 2020-07-24 23:11:19,410 - DEBUG -  Describe O(log n) time complexity.
 2020-07-24 23:11:19,410 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-07-24 23:11:19,410 - DEBUG - 1963 }
 2020-07-24 23:11:19,411 - DEBUG - 2008 }
 2020-07-24 23:11:19,411 - DEBUG - 2088 }
 2020-07-24 23:11:19,411 - DEBUG - algorithm-bigo-5
 2020-07-24 23:11:19,411 - DEBUG -  Describe O(n^c) time complexity.
 2020-07-24 23:11:19,411 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-07-24 23:11:19,411 - DEBUG - 2110 }
 2020-07-24 23:11:19,411 - DEBUG - 2155 }
 2020-07-24 23:11:19,411 - DEBUG - 2250 }
 2020-07-24 23:11:19,411 - DEBUG - algorithm-bigo-6
 2020-07-24 23:11:19,412 - DEBUG -  Describe O(c^n) time complexity.
 2020-07-24 23:11:19,412 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-07-24 23:11:19,412 - DEBUG - 2272 }
 2020-07-24 23:11:19,412 - DEBUG - 2321 }
 2020-07-24 23:11:19,412 - DEBUG - 2517 }
 2020-07-24 23:11:19,412 - DEBUG - algorithm-bigo-7
 2020-07-24 23:11:19,412 - DEBUG -  Describe O(n log n) time complexity.
 2020-07-24 23:11:19,412 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-07-24 23:11:19,413 - DEBUG - 2539 }
 2020-07-24 23:11:19,413 - DEBUG - 2606 }
 2020-07-24 23:11:19,413 - DEBUG - 2693 }
 2020-07-24 23:11:19,413 - DEBUG - algorithm-bigo-8
 2020-07-24 23:11:19,413 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-07-24 23:11:19,413 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-07-24 23:11:19,413 - DEBUG - 2715 }
 2020-07-24 23:11:19,413 - DEBUG - 2765 }
 2020-07-24 23:11:19,413 - DEBUG - 2893 }
 2020-07-24 23:11:19,414 - DEBUG - algorithm-bigo-9
 2020-07-24 23:11:19,414 - DEBUG -  Describe O(n log* n) time complexity.
 2020-07-24 23:11:19,414 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-07-24 23:11:19,414 - DEBUG - 2915 }
 2020-07-24 23:11:19,414 - DEBUG - 2959 }
 2020-07-24 23:11:19,414 - DEBUG - 3176 }
 2020-07-24 23:11:19,414 - DEBUG - algorithm-bigo-9
 2020-07-24 23:11:19,414 - DEBUG -  Describe O(n!) time complexity.
 2020-07-24 23:11:19,414 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-07-24 23:11:19,415 - DEBUG - 3199 }
 2020-07-24 23:11:19,415 - DEBUG - 3250 }
 2020-07-24 23:11:19,415 - DEBUG - 3415 }
 2020-07-24 23:11:19,415 - DEBUG - algorithm-bigo-10
 2020-07-24 23:11:19,415 - DEBUG -  Describe O(log log n) time complexity.
 2020-07-24 23:11:19,415 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-07-24 23:11:19,415 - DEBUG - 3438 }
 2020-07-24 23:11:19,415 - DEBUG - 3493 }
 2020-07-24 23:11:19,416 - DEBUG - 3618 }
 2020-07-24 23:11:19,416 - DEBUG - algorithm-bigo-11
 2020-07-24 23:11:19,416 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-07-24 23:11:19,416 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-07-24 23:11:19,416 - DEBUG - 3641 }
 2020-07-24 23:11:19,416 - DEBUG - 3686 }
 2020-07-24 23:11:19,416 - DEBUG - 3838 }
 2020-07-24 23:11:19,416 - DEBUG - algorithm-bigo-12
 2020-07-24 23:11:19,416 - DEBUG -  Describe O(n^3) time complexity.
 2020-07-24 23:11:19,416 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-07-24 23:11:19,417 - DEBUG - 3861 }
 2020-07-24 23:11:19,417 - DEBUG - 3916 }
 2020-07-24 23:11:19,417 - DEBUG - 4018 }
 2020-07-24 23:11:19,417 - DEBUG - algorithm-bigo-13
 2020-07-24 23:11:19,417 - DEBUG -  What is the rule about constants in Big O?
 2020-07-24 23:11:19,417 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-07-24 23:11:19,417 - DEBUG - 4041 }
 2020-07-24 23:11:19,417 - DEBUG - 4094 }
 2020-07-24 23:11:19,418 - DEBUG - 4229 }
 2020-07-24 23:11:19,418 - DEBUG - algorithm-bigo-14
 2020-07-24 23:11:19,418 - DEBUG -  What is the transivtivity rule in Big O?
 2020-07-24 23:11:19,418 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-07-24 23:11:19,418 - DEBUG - 4252 }
 2020-07-24 23:11:19,418 - DEBUG - 4299 }
 2020-07-24 23:11:19,418 - DEBUG - 4365 }
 2020-07-24 23:11:19,418 - DEBUG - algorithm-bigo-15
 2020-07-24 23:11:19,418 - DEBUG -  What is the rule of sums in Big O?
 2020-07-24 23:11:19,418 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-07-24 23:11:19,418 - DEBUG - 4388 }
 2020-07-24 23:11:19,419 - DEBUG - 4439 }
 2020-07-24 23:11:19,419 - DEBUG - 4545 }
 2020-07-24 23:11:19,419 - DEBUG - algorithm-bigo-16
 2020-07-24 23:11:19,419 - DEBUG -  What is the rule of products in Big O?
 2020-07-24 23:11:19,419 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-07-24 23:11:19,419 - DEBUG - 4568 }
 2020-07-24 23:11:19,420 - DEBUG - 4613 }
 2020-07-24 23:11:19,420 - DEBUG - 4720 }
 2020-07-24 23:11:19,420 - DEBUG - algorithm-bigo-17
 2020-07-24 23:11:19,420 - DEBUG -  What is the limit rule in Big O?
 2020-07-24 23:11:19,420 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-07-24 23:11:19,420 - DEBUG - 4742 }
 2020-07-24 23:11:19,420 - DEBUG - 4806 }
 2020-07-24 23:11:19,420 - DEBUG - 4927 }
 2020-07-24 23:11:19,420 - DEBUG - data_structures-1
 2020-07-24 23:11:19,421 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-07-24 23:11:19,421 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-07-24 23:11:19,421 - DEBUG - 4950 }
 2020-07-24 23:11:19,421 - DEBUG - 5021 }
 2020-07-24 23:11:19,421 - DEBUG - 5096 }
 2020-07-24 23:11:19,421 - DEBUG - data_structures-2
 2020-07-24 23:11:19,421 - DEBUG -  Name seven common names for main types of data structures.
 2020-07-24 23:11:19,421 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-07-24 23:11:19,421 - DEBUG - 5119 }
 2020-07-24 23:11:19,422 - DEBUG - 5169 }
 2020-07-24 23:11:19,422 - DEBUG - 5250 }
 2020-07-24 23:11:19,422 - DEBUG - data_structures-3
 2020-07-24 23:11:19,422 - DEBUG -  List kinds of Linked data structures.
 2020-07-24 23:11:19,422 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-07-24 23:11:19,422 - DEBUG - 5273 }
 2020-07-24 23:11:19,422 - DEBUG - 5344 }
 2020-07-24 23:11:19,423 - DEBUG - 5390 }
 2020-07-24 23:11:19,423 - DEBUG - data_structures-4
 2020-07-24 23:11:19,423 - DEBUG -  List alternative language names for Vector dat structures.
 2020-07-24 23:11:19,423 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-07-24 23:11:19,423 - DEBUG - 5413 }
 2020-07-24 23:11:19,423 - DEBUG - 5447 }
 2020-07-24 23:11:19,423 - DEBUG - 5479 }
 2020-07-24 23:11:19,423 - DEBUG - data_structures-5
 2020-07-24 23:11:19,423 - DEBUG -  List kinds of Queues.
 2020-07-24 23:11:19,423 - DEBUG -  Queue, Piority Queue.
 2020-07-24 23:11:19,424 - DEBUG - 5502 }
 2020-07-24 23:11:19,424 - DEBUG - 5553 }
 2020-07-24 23:11:19,424 - DEBUG - 5614 }
 2020-07-24 23:11:19,424 - DEBUG - data_structures-6
 2020-07-24 23:11:19,424 - DEBUG -  List alternate names for Dictionaries.
 2020-07-24 23:11:19,424 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-07-24 23:11:19,424 - DEBUG - 5637 }
 2020-07-24 23:11:19,424 - DEBUG - 5680 }
 2020-07-24 23:11:19,424 - DEBUG - 5746 }
 2020-07-24 23:11:19,424 - DEBUG - data_structures-7
 2020-07-24 23:11:19,425 - DEBUG -  List some main kinds of Trees.
 2020-07-24 23:11:19,425 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-07-24 23:11:19,425 - DEBUG - 5769 }
 2020-07-24 23:11:19,425 - DEBUG - 5829 }
 2020-07-24 23:11:19,425 - DEBUG - 5922 }
 2020-07-24 23:11:19,425 - DEBUG - data_structures-8
 2020-07-24 23:11:19,425 - DEBUG -  List types of arrays and array like structures.
 2020-07-24 23:11:19,425 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-07-24 23:11:19,425 - DEBUG - 5945 }
 2020-07-24 23:11:19,426 - DEBUG - 6050 }
 2020-07-24 23:11:19,426 - DEBUG - 6359 }
 2020-07-24 23:11:19,426 - DEBUG - data_structures-9
 2020-07-24 23:11:19,426 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-07-24 23:11:19,426 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-07-24 23:11:19,427 - DEBUG - 6383 }
 2020-07-24 23:11:19,427 - DEBUG - 6428 }
 2020-07-24 23:11:19,428 - DEBUG - 6848 }
 2020-07-24 23:11:19,428 - DEBUG - data_structures-10
 2020-07-24 23:11:19,428 - DEBUG -  What is a linked data structure?
 2020-07-24 23:11:19,428 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-07-24 23:11:19,428 - DEBUG - 6872 }
 2020-07-24 23:11:19,428 - DEBUG - 6905 }
 2020-07-24 23:11:19,429 - DEBUG - 6937 }
 2020-07-24 23:11:19,429 - DEBUG - data_structures-11
 2020-07-24 23:11:19,429 - DEBUG -  List kinds of Graphs
 2020-07-24 23:11:19,429 - DEBUG -  Graph and Scene Graph
 2020-07-24 23:11:19,429 - DEBUG - 6961 }
 2020-07-24 23:11:19,429 - DEBUG - 6988 }
 2020-07-24 23:11:19,430 - DEBUG - 7456 }
 2020-07-24 23:11:19,430 - DEBUG - data_structures-12
 2020-07-24 23:11:19,430 - DEBUG -  Describe List.
 2020-07-24 23:11:19,430 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-07-24 23:11:19,430 - DEBUG - 7480 }
 2020-07-24 23:11:19,430 - DEBUG - 7511 }
 2020-07-24 23:11:19,430 - DEBUG - 7625 }
 2020-07-24 23:11:19,430 - DEBUG - data_structures-13
 2020-07-24 23:11:19,430 - DEBUG -  Describe a Vector.
 2020-07-24 23:11:19,430 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-07-24 23:11:19,431 - DEBUG - 7649 }
 2020-07-24 23:11:19,431 - DEBUG - 7675 }
 2020-07-24 23:11:19,431 - DEBUG - 7840 }
 2020-07-24 23:11:19,431 - DEBUG - data_structures-14
 2020-07-24 23:11:19,431 - DEBUG -  Describe Set.
 2020-07-24 23:11:19,431 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-07-24 23:11:19,431 - DEBUG - 7864 }
 2020-07-24 23:11:19,432 - DEBUG - 7894 }
 2020-07-24 23:11:19,432 - DEBUG - 8360 }
 2020-07-24 23:11:19,432 - DEBUG - data_structures-15
 2020-07-24 23:11:19,432 - DEBUG -  Describe a Stack.
 2020-07-24 23:11:19,432 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-07-24 23:11:19,432 - DEBUG - 8384 }
 2020-07-24 23:11:19,433 - DEBUG - 8414 }
 2020-07-24 23:11:19,433 - DEBUG - 8949 }
 2020-07-24 23:11:19,433 - DEBUG - data_structures-16
 2020-07-24 23:11:19,433 - DEBUG -  Describe a queue.
 2020-07-24 23:11:19,433 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-07-24 23:11:19,433 - DEBUG - 8973 }
 2020-07-24 23:11:19,434 - DEBUG - 9008 }
 2020-07-24 23:11:19,434 - DEBUG - 9456 }
 2020-07-24 23:11:19,434 - DEBUG - data_structures-17
 2020-07-24 23:11:19,434 - DEBUG -  Describe a Dictionary.
 2020-07-24 23:11:19,434 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-07-24 23:11:19,434 - DEBUG - 9480 }
 2020-07-24 23:11:19,435 - DEBUG - 9525 }
 2020-07-24 23:11:19,436 - DEBUG - 10271 }
 2020-07-24 23:11:19,436 - DEBUG - data_structures-18
 2020-07-24 23:11:19,436 - DEBUG -  Describe a Tree data structures.
 2020-07-24 23:11:19,436 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-07-24 23:11:19,437 - DEBUG - 10295 }
 2020-07-24 23:11:19,437 - DEBUG - 10325 }
 2020-07-24 23:11:19,437 - DEBUG - 10932 }
 2020-07-24 23:11:19,437 - DEBUG - data_structures-19
 2020-07-24 23:11:19,437 - DEBUG -  Describe a Graph.
 2020-07-24 23:11:19,438 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-07-24 23:11:19,438 - DEBUG - 10960 }
 2020-07-24 23:11:19,438 - DEBUG - 11042 }
 2020-07-24 23:11:19,438 - DEBUG - 11361 }
 2020-07-24 23:11:19,438 - DEBUG - data_structures-java-1
 2020-07-24 23:11:19,438 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-07-24 23:11:19,438 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-07-24 23:11:19,439 - DEBUG - 11389 }
 2020-07-24 23:11:19,439 - DEBUG - 11460 }
 2020-07-24 23:11:19,439 - DEBUG - 11641 }
 2020-07-24 23:11:19,439 - DEBUG - data_structures-java-2
 2020-07-24 23:11:19,439 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-07-24 23:11:19,439 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-07-24 23:11:19,439 - DEBUG - 11669 }
 2020-07-24 23:11:19,439 - DEBUG - 11714 }
 2020-07-24 23:11:19,440 - DEBUG - 11877 }
 2020-07-24 23:11:19,440 - DEBUG - data_structures-java-3
 2020-07-24 23:11:19,440 - DEBUG -  Describe java boolean primitive.
 2020-07-24 23:11:19,440 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-07-24 23:11:19,440 - DEBUG - 11905 }
 2020-07-24 23:11:19,440 - DEBUG - 11943 }
 2020-07-24 23:11:19,440 - DEBUG - 12272 }
 2020-07-24 23:11:19,441 - DEBUG - data_structures-java-4
 2020-07-24 23:11:19,441 - DEBUG -  Describe java references.
 2020-07-24 23:11:19,441 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-07-24 23:11:19,441 - DEBUG - 12296 }
 2020-07-24 23:11:19,441 - DEBUG - 12375 }
 2020-07-24 23:11:19,441 - DEBUG - 12458 }
 2020-07-24 23:11:19,441 - DEBUG - data_structures-20
 2020-07-24 23:11:19,441 - DEBUG -  What do modern programming languages usually call data structures?
 2020-07-24 23:11:19,441 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-07-24 23:11:19,441 - DEBUG - 12492 }
 2020-07-24 23:11:19,442 - DEBUG - 12532 }
 2020-07-24 23:11:19,442 - DEBUG - 12826 }
 2020-07-24 23:11:19,442 - DEBUG - data_structures-javascript-1
 2020-07-24 23:11:19,442 - DEBUG -  Name JavaScript primitives.
 2020-07-24 23:11:19,442 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-07-24 23:11:19,443 - DEBUG - 12850 }
 2020-07-24 23:11:19,443 - DEBUG - 12956 }
 2020-07-24 23:11:19,443 - DEBUG - 13123 }
 2020-07-24 23:11:19,443 - DEBUG - data_structures-21
 2020-07-24 23:11:19,443 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-07-24 23:11:19,443 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-07-24 23:11:19,443 - DEBUG - 13153 }
 2020-07-24 23:11:19,444 - DEBUG - 13189 }
 2020-07-24 23:11:19,444 - DEBUG - 13247 }
 2020-07-24 23:11:19,444 - DEBUG - data_structures-python-1
 2020-07-24 23:11:19,444 - DEBUG -  List python primitives.
 2020-07-24 23:11:19,444 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-07-24 23:11:19,444 - DEBUG - 13277 }
 2020-07-24 23:11:19,444 - DEBUG - 13309 }
 2020-07-24 23:11:19,445 - DEBUG - 13422 }
 2020-07-24 23:11:19,445 - DEBUG - data_structures-csharp-1
 2020-07-24 23:11:19,445 - DEBUG -  List c# primitives.
 2020-07-24 23:11:19,445 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-07-24 23:11:19,445 - DEBUG - 13434 }
 2020-07-24 23:11:19,445 - DEBUG - 13477 }
 2020-07-24 23:11:19,445 - DEBUG - 13821 }
 2020-07-24 23:11:19,445 - DEBUG - oop-1
 2020-07-24 23:11:19,446 - DEBUG -  What is an OOP Design Pattern?
 2020-07-24 23:11:19,446 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-07-24 23:11:19,446 - DEBUG - 13832 }
 2020-07-24 23:11:19,446 - DEBUG - 13899 }
 2020-07-24 23:11:19,446 - DEBUG - 13965 }
 2020-07-24 23:11:19,446 - DEBUG - oop-2
 2020-07-24 23:11:19,446 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-07-24 23:11:19,446 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-07-24 23:11:19,446 - DEBUG - 13976 }
 2020-07-24 23:11:19,446 - DEBUG - 14039 }
 2020-07-24 23:11:19,447 - DEBUG - 14084 }
 2020-07-24 23:11:19,447 - DEBUG - oop-3
 2020-07-24 23:11:19,447 - DEBUG -  What are the 3 main categories of design patterns?
 2020-07-24 23:11:19,447 - DEBUG -  Creational, Behavioral, Structural
 2020-07-24 23:11:19,447 - DEBUG - 14095 }
 2020-07-24 23:11:19,447 - DEBUG - 14149 }
 2020-07-24 23:11:19,447 - DEBUG - 14406 }
 2020-07-24 23:11:19,447 - DEBUG - oop-4
 2020-07-24 23:11:19,447 - DEBUG -  What is an OOP Creational design pattern?
 2020-07-24 23:11:19,448 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-07-24 23:11:19,448 - DEBUG - 14417 }
 2020-07-24 23:11:19,448 - DEBUG - 14471 }
 2020-07-24 23:11:19,448 - DEBUG - 14834 }
 2020-07-24 23:11:19,448 - DEBUG - oop-5
 2020-07-24 23:11:19,448 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-07-24 23:11:19,448 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-07-24 23:11:19,448 - DEBUG - 14845 }
 2020-07-24 23:11:19,449 - DEBUG - 14899 }
 2020-07-24 23:11:19,449 - DEBUG - 15220 }
 2020-07-24 23:11:19,449 - DEBUG - oop-6
 2020-07-24 23:11:19,449 - DEBUG -  What is an OOP Structural design pattern?
 2020-07-24 23:11:19,449 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-07-24 23:11:19,449 - DEBUG - 15242 }
 2020-07-24 23:11:19,449 - DEBUG - 15294 }
 2020-07-24 23:11:19,450 - DEBUG - 15369 }
 2020-07-24 23:11:19,450 - DEBUG - oop-creational-1
 2020-07-24 23:11:19,450 - DEBUG -  Name 5 most common creational patterns.
 2020-07-24 23:11:19,450 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-07-24 23:11:19,450 - DEBUG - 15391 }
 2020-07-24 23:11:19,450 - DEBUG - 15444 }
 2020-07-24 23:11:19,450 - DEBUG - 15583 }
 2020-07-24 23:11:19,450 - DEBUG - oop-behavioral-1
 2020-07-24 23:11:19,450 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-07-24 23:11:19,450 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-07-24 23:11:19,451 - DEBUG - 15605 }
 2020-07-24 23:11:19,451 - DEBUG - 15657 }
 2020-07-24 23:11:19,451 - DEBUG - 15733 }
 2020-07-24 23:11:19,451 - DEBUG - oop-structural-1
 2020-07-24 23:11:19,451 - DEBUG -  Name 7 most common structural patterns.
 2020-07-24 23:11:19,451 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-07-24 23:11:19,451 - DEBUG - 15755 }
 2020-07-24 23:11:19,451 - DEBUG - 15842 }
 2020-07-24 23:11:19,452 - DEBUG - 15882 }
 2020-07-24 23:11:19,452 - DEBUG - oop-structural-2
 2020-07-24 23:11:19,452 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-07-24 23:11:19,452 - DEBUG -  Model View Controller or MVC.
 2020-07-24 23:11:19,452 - DEBUG - 15904 }
 2020-07-24 23:11:19,452 - DEBUG - 15938 }
 2020-07-24 23:11:19,453 - DEBUG - 16451 }
 2020-07-24 23:11:19,453 - DEBUG - oop-structural-3
 2020-07-24 23:11:19,454 - DEBUG -  Describe MVC pattern.
 2020-07-24 23:11:19,454 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-07-24 23:11:19,454 - DEBUG - 16473 }
 2020-07-24 23:11:19,454 - DEBUG - 16513 }
 2020-07-24 23:11:19,455 - DEBUG - 16769 }
 2020-07-24 23:11:19,455 - DEBUG - oop-creational-2
 2020-07-24 23:11:19,455 - DEBUG -  What is the Factory Method?
 2020-07-24 23:11:19,455 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-07-24 23:11:19,455 - DEBUG - 16791 }
 2020-07-24 23:11:19,455 - DEBUG - 16822 }
 2020-07-24 23:11:19,456 - DEBUG - 17062 }
 2020-07-24 23:11:19,456 - DEBUG - oop-creational-3
 2020-07-24 23:11:19,456 - DEBUG -  What is Prototype?
 2020-07-24 23:11:19,456 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-07-24 23:11:19,456 - DEBUG - 17084 }
 2020-07-24 23:11:19,457 - DEBUG - 17115 }
 2020-07-24 23:11:19,457 - DEBUG - 17404 }
 2020-07-24 23:11:19,457 - DEBUG - oop-creational-4
 2020-07-24 23:11:19,457 - DEBUG -  What is Singleton?
 2020-07-24 23:11:19,457 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-07-24 23:11:19,457 - DEBUG - 17426 }
 2020-07-24 23:11:19,458 - DEBUG - 17464 }
 2020-07-24 23:11:19,458 - DEBUG - 18097 }
 2020-07-24 23:11:19,458 - DEBUG - oop-creational-5
 2020-07-24 23:11:19,458 - DEBUG -  What is Abstract Factory?
 2020-07-24 23:11:19,458 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-07-24 23:11:19,459 - DEBUG - 18119 }
 2020-07-24 23:11:19,459 - DEBUG - 18174 }
 2020-07-24 23:11:19,459 - DEBUG - 18512 }
 2020-07-24 23:11:19,459 - DEBUG - oop-creational-6
 2020-07-24 23:11:19,459 - DEBUG -  What is Builder creational design pattern?
 2020-07-24 23:11:19,459 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-07-24 23:11:19,459 - DEBUG - 18534 }
 2020-07-24 23:11:19,460 - DEBUG - 18597 }
 2020-07-24 23:11:19,460 - DEBUG - 18869 }
 2020-07-24 23:11:19,460 - DEBUG - oop-behavioral-2
 2020-07-24 23:11:19,460 - DEBUG -  What is Template Method behavioral design pattern?
 2020-07-24 23:11:19,460 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-07-24 23:11:19,460 - DEBUG - 18891 }
 2020-07-24 23:11:19,460 - DEBUG - 18947 }
 2020-07-24 23:11:19,461 - DEBUG - 19298 }
 2020-07-24 23:11:19,461 - DEBUG - oop-behavioral-3
 2020-07-24 23:11:19,461 - DEBUG -  What is Strategy behavioral design pattern?
 2020-07-24 23:11:19,461 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-07-24 23:11:19,461 - DEBUG - 19320 }
 2020-07-24 23:11:19,461 - DEBUG - 19379 }
 2020-07-24 23:11:19,461 - DEBUG - 19657 }
 2020-07-24 23:11:19,462 - DEBUG - oop-behavioral-4
 2020-07-24 23:11:19,462 - DEBUG -  What is the Command behavioral design pattern?
 2020-07-24 23:11:19,462 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-07-24 23:11:19,462 - DEBUG - 19679 }
 2020-07-24 23:11:19,462 - DEBUG - 19734 }
 2020-07-24 23:11:19,462 - DEBUG - 20104 }
 2020-07-24 23:11:19,463 - DEBUG - oop-behavioral-5
 2020-07-24 23:11:19,463 - DEBUG -  What is Memento behavioral design pattern?
 2020-07-24 23:11:19,463 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-07-24 23:11:19,463 - DEBUG - 20126 }
 2020-07-24 23:11:19,463 - DEBUG - 20182 }
 2020-07-24 23:11:19,463 - DEBUG - 20562 }
 2020-07-24 23:11:19,464 - DEBUG - oop-behavioral-6
 2020-07-24 23:11:19,464 - DEBUG -  What is Mediator behavioral design pattern?
 2020-07-24 23:11:19,464 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-07-24 23:11:19,464 - DEBUG - 20584 }
 2020-07-24 23:11:19,464 - DEBUG - 20637 }
 2020-07-24 23:11:19,464 - DEBUG - 20945 }
 2020-07-24 23:11:19,464 - DEBUG - oop-behavioral-7
 2020-07-24 23:11:19,464 - DEBUG -  What is State behavioral design pattern?
 2020-07-24 23:11:19,465 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-07-24 23:11:19,465 - DEBUG - 20967 }
 2020-07-24 23:11:19,465 - DEBUG - 21023 }
 2020-07-24 23:11:19,465 - DEBUG - 21457 }
 2020-07-24 23:11:19,465 - DEBUG - oop-behavioral-8
 2020-07-24 23:11:19,465 - DEBUG -  What is Observer behavioral design pattern?
 2020-07-24 23:11:19,465 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-07-24 23:11:19,466 - DEBUG - 21479 }
 2020-07-24 23:11:19,466 - DEBUG - 21535 }
 2020-07-24 23:11:19,466 - DEBUG - 21801 }
 2020-07-24 23:11:19,466 - DEBUG - oop-behavioral-9
 2020-07-24 23:11:19,466 - DEBUG -  What is Iterator behavioral design pattern.
 2020-07-24 23:11:19,466 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-07-24 23:11:19,466 - DEBUG - 21824 }
 2020-07-24 23:11:19,467 - DEBUG - 21894 }
 2020-07-24 23:11:19,467 - DEBUG - 22311 }
 2020-07-24 23:11:19,467 - DEBUG - oop-behavioral-10
 2020-07-24 23:11:19,467 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-07-24 23:11:19,467 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-07-24 23:11:19,467 - DEBUG - 22334 }
 2020-07-24 23:11:19,468 - DEBUG - 22393 }
 2020-07-24 23:11:19,468 - DEBUG - 22719 }
 2020-07-24 23:11:19,468 - DEBUG - oop-behavioral-11
 2020-07-24 23:11:19,468 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-07-24 23:11:19,468 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-07-24 23:11:19,468 - DEBUG - 22742 }
 2020-07-24 23:11:19,468 - DEBUG - 22801 }
 2020-07-24 23:11:19,469 - DEBUG - 23266 }
 2020-07-24 23:11:19,469 - DEBUG - oop-behavioral-12
 2020-07-24 23:11:19,469 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-07-24 23:11:19,469 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-07-24 23:11:19,470 - DEBUG - 23288 }
 2020-07-24 23:11:19,470 - DEBUG - 23343 }
 2020-07-24 23:11:19,470 - DEBUG - 23656 }
 2020-07-24 23:11:19,470 - DEBUG - oop-structural-4
 2020-07-24 23:11:19,470 - DEBUG -  What is Adapter structural design pattern?
 2020-07-24 23:11:19,470 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-07-24 23:11:19,470 - DEBUG - 23678 }
 2020-07-24 23:11:19,471 - DEBUG - 23735 }
 2020-07-24 23:11:19,471 - DEBUG - 24091 }
 2020-07-24 23:11:19,471 - DEBUG - oop-structural-5
 2020-07-24 23:11:19,471 - DEBUG -  What is Composite structural design pattern?
 2020-07-24 23:11:19,471 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-07-24 23:11:19,471 - DEBUG - 24113 }
 2020-07-24 23:11:19,471 - DEBUG - 24170 }
 2020-07-24 23:11:19,472 - DEBUG - 24554 }
 2020-07-24 23:11:19,472 - DEBUG - oop-structural-6
 2020-07-24 23:11:19,472 - DEBUG -  What is Decorator structural design pattern?
 2020-07-24 23:11:19,472 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-07-24 23:11:19,473 - DEBUG - 24576 }
 2020-07-24 23:11:19,473 - DEBUG - 24629 }
 2020-07-24 23:11:19,473 - DEBUG - 24995 }
 2020-07-24 23:11:19,473 - DEBUG - oop-structural-7
 2020-07-24 23:11:19,473 - DEBUG -  What is Proxy structural design pattern?
 2020-07-24 23:11:19,473 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-07-24 23:11:19,473 - DEBUG - 25017 }
 2020-07-24 23:11:19,474 - DEBUG - 25071 }
 2020-07-24 23:11:19,474 - DEBUG - 25501 }
 2020-07-24 23:11:19,474 - DEBUG - oop-structural-8
 2020-07-24 23:11:19,474 - DEBUG -  What is Facade structural design pattern?
 2020-07-24 23:11:19,474 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-07-24 23:11:19,474 - DEBUG - 25523 }
 2020-07-24 23:11:19,474 - DEBUG - 25580 }
 2020-07-24 23:11:19,475 - DEBUG - 26139 }
 2020-07-24 23:11:19,475 - DEBUG - oop-structural-9
 2020-07-24 23:11:19,475 - DEBUG -  What is Flyweight structural design pattern?
 2020-07-24 23:11:19,475 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-07-24 23:11:19,475 - DEBUG - 26162 }
 2020-07-24 23:11:19,475 - DEBUG - 26216 }
 2020-07-24 23:11:19,476 - DEBUG - 26748 }
 2020-07-24 23:11:19,476 - DEBUG - oop-structural-10
 2020-07-24 23:11:19,476 - DEBUG -  What is Bridge structural design pattern?
 2020-07-24 23:11:19,476 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-07-24 23:11:19,476 - DEBUG - 26782 }
 2020-07-24 23:11:19,477 - DEBUG - 26838 }
 2020-07-24 23:11:19,477 - DEBUG - 26980 }
 2020-07-24 23:11:19,477 - DEBUG - python-datatypes-strings-1
 2020-07-24 23:11:19,477 - DEBUG -  Describe a basic python strings definition.
 2020-07-24 23:11:19,477 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-07-24 23:11:19,477 - DEBUG - 27013 }
 2020-07-24 23:11:19,477 - DEBUG - 27073 }
 2020-07-24 23:11:19,477 - DEBUG - 27141 }
 2020-07-24 23:11:19,478 - DEBUG - python-datatypes-strings-2
 2020-07-24 23:11:19,478 - DEBUG -  How can strings be defined over multiple lines?
 2020-07-24 23:11:19,478 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-07-24 23:11:19,478 - DEBUG - 27174 }
 2020-07-24 23:11:19,478 - DEBUG - 27247 }
 2020-07-24 23:11:19,478 - DEBUG - 27409 }
 2020-07-24 23:11:19,478 - DEBUG - python-datatypes-strings-3
 2020-07-24 23:11:19,478 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-07-24 23:11:19,478 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-07-24 23:11:19,479 - DEBUG - 27442 }
 2020-07-24 23:11:19,479 - DEBUG - 27502 }
 2020-07-24 23:11:19,479 - DEBUG - 27600 }
 2020-07-24 23:11:19,479 - DEBUG - python-datatypes-strings-4
 2020-07-24 23:11:19,479 - DEBUG -  How do you iterator over the chars of a string?
 2020-07-24 23:11:19,479 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-07-24 23:11:19,479 - DEBUG - 27634 }
 2020-07-24 23:11:19,479 - DEBUG - 27685 }
 2020-07-24 23:11:19,479 - DEBUG - 27715 }
 2020-07-24 23:11:19,480 - DEBUG - python-datatypes-strings-5
 2020-07-24 23:11:19,480 - DEBUG -  How do you get the lenght of a string?
 2020-07-24 23:11:19,480 - DEBUG -  len(mystring) is 5
 2020-07-24 23:11:19,480 - DEBUG - 27748 }
 2020-07-24 23:11:19,480 - DEBUG - 27790 }
 2020-07-24 23:11:19,480 - DEBUG - 27877 }
 2020-07-24 23:11:19,480 - DEBUG - python-datatypes-strings-6
 2020-07-24 23:11:19,480 - DEBUG -  How do you merge two strings?
 2020-07-24 23:11:19,480 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-07-24 23:11:19,480 - DEBUG - 27912 }
 2020-07-24 23:11:19,481 - DEBUG - 27961 }
 2020-07-24 23:11:19,481 - DEBUG - 28039 }
 2020-07-24 23:11:19,481 - DEBUG - python-datatypes-strings-7
 2020-07-24 23:11:19,481 - DEBUG -  How do you use a number in a string?
 2020-07-24 23:11:19,481 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-07-24 23:11:19,481 - DEBUG - 28074 }
 2020-07-24 23:11:19,481 - DEBUG - 28153 }
 2020-07-24 23:11:19,481 - DEBUG - 28184 }
 2020-07-24 23:11:19,481 - DEBUG - python-datatypes-strings-8
 2020-07-24 23:11:19,481 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-07-24 23:11:19,482 - DEBUG -  mystring.split(',')
 2020-07-24 23:11:19,482 - DEBUG - 28217 }
 2020-07-24 23:11:19,482 - DEBUG - 28272 }
 2020-07-24 23:11:19,482 - DEBUG - 28300 }
 2020-07-24 23:11:19,482 - DEBUG - python-datatypes-strings-9
 2020-07-24 23:11:19,482 - DEBUG -  How do you trim white space from a string?
 2020-07-24 23:11:19,482 - DEBUG -  mystring.strip()
 2020-07-24 23:11:19,482 - DEBUG - 28334 }
 2020-07-24 23:11:19,482 - DEBUG - 28394 }
 2020-07-24 23:11:19,482 - DEBUG - 28446 }
 2020-07-24 23:11:19,483 - DEBUG - python-datatypes-strings-10
 2020-07-24 23:11:19,483 - DEBUG -  How do you convert a string to an int or float?
 2020-07-24 23:11:19,483 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-07-24 23:11:19,483 - DEBUG - 28479 }
 2020-07-24 23:11:19,483 - DEBUG - 28525 }
 2020-07-24 23:11:19,483 - DEBUG - 28640 }
 2020-07-24 23:11:19,483 - DEBUG - python-datatypes-numbers-1
 2020-07-24 23:11:19,484 - DEBUG -  Describe types of python numbers.
 2020-07-24 23:11:19,484 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-07-24 23:11:19,484 - DEBUG - 28673 }
 2020-07-24 23:11:19,484 - DEBUG - 28745 }
 2020-07-24 23:11:19,484 - DEBUG - 28893 }
 2020-07-24 23:11:19,484 - DEBUG - python-datatypes-numbers-2
 2020-07-24 23:11:19,484 - DEBUG -  How do you work with really precise real numbers in python?
 2020-07-24 23:11:19,484 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-07-24 23:11:19,484 - DEBUG - 28926 }
 2020-07-24 23:11:19,485 - DEBUG - 29001 }
 2020-07-24 23:11:19,485 - DEBUG - 29095 }
 2020-07-24 23:11:19,485 - DEBUG - python-datatypes-numbers-3
 2020-07-24 23:11:19,485 - DEBUG -  How can you work with say fractional measurements with python?
 2020-07-24 23:11:19,485 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-07-24 23:11:19,485 - DEBUG - 29128 }
 2020-07-24 23:11:19,485 - DEBUG - 29179 }
 2020-07-24 23:11:19,485 - DEBUG - 29201 }
 2020-07-24 23:11:19,485 - DEBUG - python-datatypes-numbers-4
 2020-07-24 23:11:19,485 - DEBUG -  How do the absolute value of a number?
 2020-07-24 23:11:19,486 - DEBUG -  abs(mynum)
 2020-07-24 23:11:19,486 - DEBUG - 29234 }
 2020-07-24 23:11:19,486 - DEBUG - 29284 }
 2020-07-24 23:11:19,486 - DEBUG - 29313 }
 2020-07-24 23:11:19,486 - DEBUG - python-datatypes-numbers-5
 2020-07-24 23:11:19,486 - DEBUG -  How do you raise a number to a power?
 2020-07-24 23:11:19,486 - DEBUG -  pow(power,number)
 2020-07-24 23:11:19,486 - DEBUG - 29346 }
 2020-07-24 23:11:19,487 - DEBUG - 29390 }
 2020-07-24 23:11:19,487 - DEBUG - 29426 }
 2020-07-24 23:11:19,487 - DEBUG - python-datatypes-numbers-6
 2020-07-24 23:11:19,487 - DEBUG -  How do you round a real number?
 2020-07-24 23:11:19,487 - DEBUG -  round(num,decimalplaces)
 2020-07-24 23:11:19,487 - DEBUG - 29459 }
 2020-07-24 23:11:19,487 - DEBUG - 29513 }
 2020-07-24 23:11:19,487 - DEBUG - 29681 }
 2020-07-24 23:11:19,488 - DEBUG - python-datatypes-numbers-7
 2020-07-24 23:11:19,488 - DEBUG -  Whats involved in getting random numbers?
 2020-07-24 23:11:19,488 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-07-24 23:11:19,488 - DEBUG - 29695 }
 2020-07-24 23:11:19,488 - DEBUG - 29768 }
 2020-07-24 23:11:19,488 - DEBUG - 29837 }
 2020-07-24 23:11:19,488 - DEBUG - uml-1
 2020-07-24 23:11:19,488 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-07-24 23:11:19,488 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-07-24 23:11:19,489 - DEBUG - 29848 }
 2020-07-24 23:11:19,489 - DEBUG - 29892 }
 2020-07-24 23:11:19,489 - DEBUG - 29989 }
 2020-07-24 23:11:19,489 - DEBUG - uml-2
 2020-07-24 23:11:19,489 - DEBUG -  What is an interaction diagram?
 2020-07-24 23:11:19,489 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-07-24 23:11:19,489 - DEBUG - 30000 }
 2020-07-24 23:11:19,489 - DEBUG - 30041 }
 2020-07-24 23:11:19,490 - DEBUG - 30351 }
 2020-07-24 23:11:19,490 - DEBUG - uml-3
 2020-07-24 23:11:19,490 - DEBUG -  What is a structure diagram?
 2020-07-24 23:11:19,490 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-07-24 23:11:19,490 - DEBUG - 30362 }
 2020-07-24 23:11:19,490 - DEBUG - 30402 }
 2020-07-24 23:11:19,490 - DEBUG - 30516 }
 2020-07-24 23:11:19,490 - DEBUG - uml-4
 2020-07-24 23:11:19,490 - DEBUG -  What is a behavior diagram?
 2020-07-24 23:11:19,490 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-07-24 23:11:19,491 - DEBUG - 30537 }
 2020-07-24 23:11:19,491 - DEBUG - 30588 }
 2020-07-24 23:11:19,491 - DEBUG - 30670 }
 2020-07-24 23:11:19,491 - DEBUG - uml-structure-1
 2020-07-24 23:11:19,491 - DEBUG -  Name the seven UML structure diagrams.
 2020-07-24 23:11:19,491 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-07-24 23:11:19,491 - DEBUG - 30690 }
 2020-07-24 23:11:19,491 - DEBUG - 30755 }
 2020-07-24 23:11:19,491 - DEBUG - 30815 }
 2020-07-24 23:11:19,492 - DEBUG - uml-behavior-1
 2020-07-24 23:11:19,492 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-07-24 23:11:19,492 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-07-24 23:11:19,492 - DEBUG - 30838 }
 2020-07-24 23:11:19,492 - DEBUG - 30895 }
 2020-07-24 23:11:19,492 - DEBUG - 30960 }
 2020-07-24 23:11:19,492 - DEBUG - uml-interaction-1
 2020-07-24 23:11:19,492 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-07-24 23:11:19,492 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-07-24 23:11:19,492 - DEBUG - 30971 }
 2020-07-24 23:11:19,492 - DEBUG - 31015 }
 2020-07-24 23:11:19,493 - DEBUG - 31049 }
 2020-07-24 23:11:19,493 - DEBUG - uml-2
 2020-07-24 23:11:19,493 - DEBUG -  How many uml digrams are there?
 2020-07-24 23:11:19,493 - DEBUG -  Around 14 give or take.
 2020-07-24 23:11:19,493 - DEBUG - 31070 }
 2020-07-24 23:11:19,493 - DEBUG - 31121 }
 2020-07-24 23:11:19,493 - DEBUG - 31369 }
 2020-07-24 23:11:19,493 - DEBUG - uml-structure-2
 2020-07-24 23:11:19,494 - DEBUG -  Describe the structure Package diagram
 2020-07-24 23:11:19,494 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-07-24 23:11:19,494 - DEBUG - 31390 }
 2020-07-24 23:11:19,494 - DEBUG - 31440 }
 2020-07-24 23:11:19,494 - DEBUG - 31713 }
 2020-07-24 23:11:19,494 - DEBUG - uml-structure-3
 2020-07-24 23:11:19,494 - DEBUG -  Describe the structure Class diagram.
 2020-07-24 23:11:19,494 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-07-24 23:11:19,495 - DEBUG - 31734 }
 2020-07-24 23:11:19,495 - DEBUG - 31785 }
 2020-07-24 23:11:19,495 - DEBUG - 31919 }
 2020-07-24 23:11:19,495 - DEBUG - uml-structure-4
 2020-07-24 23:11:19,495 - DEBUG -  Describe the structure Object diagram.
 2020-07-24 23:11:19,495 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-07-24 23:11:19,495 - DEBUG - 31940 }
 2020-07-24 23:11:19,495 - DEBUG - 31994 }
 2020-07-24 23:11:19,496 - DEBUG - 32246 }
 2020-07-24 23:11:19,496 - DEBUG - uml-structure-5
 2020-07-24 23:11:19,496 - DEBUG -  Describe the structure Component diagram.
 2020-07-24 23:11:19,496 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-07-24 23:11:19,496 - DEBUG - 32267 }
 2020-07-24 23:11:19,496 - DEBUG - 32321 }
 2020-07-24 23:11:19,496 - DEBUG - 32658 }
 2020-07-24 23:11:19,497 - DEBUG - uml-structure-6
 2020-07-24 23:11:19,497 - DEBUG -  Describe the structure Composite diagram.
 2020-07-24 23:11:19,497 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-07-24 23:11:19,497 - DEBUG - 32679 }
 2020-07-24 23:11:19,497 - DEBUG - 32736 }
 2020-07-24 23:11:19,497 - DEBUG - 32924 }
 2020-07-24 23:11:19,497 - DEBUG - uml-structure-7
 2020-07-24 23:11:19,497 - DEBUG -  Describe the structure Collaboration diagram
 2020-07-24 23:11:19,497 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-07-24 23:11:19,498 - DEBUG - 32945 }
 2020-07-24 23:11:19,498 - DEBUG - 33000 }
 2020-07-24 23:11:19,498 - DEBUG - 33308 }
 2020-07-24 23:11:19,498 - DEBUG - uml-structure-8
 2020-07-24 23:11:19,498 - DEBUG -  Describe the structure Deployment diagram.
 2020-07-24 23:11:19,498 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-07-24 23:11:19,498 - DEBUG - 33328 }
 2020-07-24 23:11:19,499 - DEBUG - 33380 }
 2020-07-24 23:11:19,499 - DEBUG - 33546 }
 2020-07-24 23:11:19,499 - DEBUG - uml-behavior-1
 2020-07-24 23:11:19,499 - DEBUG -  Describe the behavior Activity diagram.
 2020-07-24 23:11:19,499 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-07-24 23:11:19,499 - DEBUG - 33566 }
 2020-07-24 23:11:19,499 - DEBUG - 33618 }
 2020-07-24 23:11:19,499 - DEBUG - 33863 }
 2020-07-24 23:11:19,500 - DEBUG - uml-behavior-2
 2020-07-24 23:11:19,500 - DEBUG -  Describe the behavior Use Case diagram.
 2020-07-24 23:11:19,500 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-07-24 23:11:19,500 - DEBUG - 33883 }
 2020-07-24 23:11:19,500 - DEBUG - 33932 }
 2020-07-24 23:11:19,500 - DEBUG - 34238 }
 2020-07-24 23:11:19,500 - DEBUG - uml-behavior-3
 2020-07-24 23:11:19,501 - DEBUG -  Describe the behavior State diagram.
 2020-07-24 23:11:19,501 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-07-24 23:11:19,501 - DEBUG - 34261 }
 2020-07-24 23:11:19,501 - DEBUG - 34316 }
 2020-07-24 23:11:19,501 - DEBUG - 34474 }
 2020-07-24 23:11:19,501 - DEBUG - uml-interaction-2
 2020-07-24 23:11:19,501 - DEBUG -  Describe the interaction Sequence diagram.
 2020-07-24 23:11:19,501 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-07-24 23:11:19,501 - DEBUG - 34497 }
 2020-07-24 23:11:19,502 - DEBUG - 34550 }
 2020-07-24 23:11:19,502 - DEBUG - 34800 }
 2020-07-24 23:11:19,502 - DEBUG - uml-interaction-3
 2020-07-24 23:11:19,502 - DEBUG -  Describe the interaction Timing diagram.
 2020-07-24 23:11:19,502 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-07-24 23:11:19,502 - DEBUG - 34823 }
 2020-07-24 23:11:19,502 - DEBUG - 34884 }
 2020-07-24 23:11:19,503 - DEBUG - 35155 }
 2020-07-24 23:11:19,503 - DEBUG - uml-interaction-4
 2020-07-24 23:11:19,503 - DEBUG -  Describe the interaction Communications diagram.
 2020-07-24 23:11:19,503 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-07-24 23:11:19,503 - DEBUG - 35178 }
 2020-07-24 23:11:19,503 - DEBUG - 35245 }
 2020-07-24 23:11:19,504 - DEBUG - 35403 }
 2020-07-24 23:11:19,504 - DEBUG - uml-interaction-5
 2020-07-24 23:11:19,504 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-07-24 23:11:19,504 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-07-24 23:11:19,505 - DEBUG - algo_cards
 2020-07-24 23:11:19,505 - DEBUG - box1
 2020-07-24 23:11:19,512 - DEBUG - algo_cards
 2020-07-24 23:11:19,513 - DEBUG - box1
 2020-07-24 23:11:19,513 - DEBUG - box2
 2020-07-24 23:11:19,522 - DEBUG - algo_cards
 2020-07-24 23:11:19,522 - DEBUG - box1
 2020-07-24 23:11:19,522 - DEBUG - box2
 2020-07-24 23:11:19,522 - DEBUG - box3
 2020-07-24 23:11:19,530 - DEBUG - algo_cards
 2020-07-24 23:11:19,530 - DEBUG - box1
 2020-07-24 23:11:19,530 - DEBUG - box2
 2020-07-24 23:11:19,530 - DEBUG - box3
 2020-07-24 23:11:19,530 - DEBUG - box4
 2020-07-24 23:11:19,532 - DEBUG - algo_cards
 2020-07-24 23:11:19,533 - DEBUG - box1
 2020-07-24 23:11:19,533 - DEBUG - box2
 2020-07-24 23:11:19,533 - DEBUG - box3
 2020-07-24 23:11:19,533 - DEBUG - box4
 2020-07-24 23:11:19,533 - DEBUG - box5
 2020-07-24 23:11:19,536 - DEBUG - algo_cards
 2020-07-24 23:11:19,536 - DEBUG - box1
 2020-07-24 23:11:19,536 - DEBUG - box2
 2020-07-24 23:11:19,536 - DEBUG - box3
 2020-07-24 23:11:19,536 - DEBUG - box4
 2020-07-24 23:11:19,536 - DEBUG - box5
 2020-07-24 23:11:19,536 - DEBUG - box6
 2020-07-24 23:11:19,538 - DEBUG - finding test cycle file
 2020-07-24 23:11:19,538 - DEBUG - quizs\
 2020-07-24 23:11:19,538 - DEBUG - algo_cards.txt
 2020-07-24 23:11:19,538 - DEBUG - box1.txt
 2020-07-24 23:11:19,539 - DEBUG - box2.txt
 2020-07-24 23:11:19,539 - DEBUG - box3.txt
 2020-07-24 23:11:19,539 - DEBUG - box4.txt
 2020-07-24 23:11:19,539 - DEBUG - box5.txt
 2020-07-24 23:11:19,539 - DEBUG - box6.txt
 2020-07-24 23:11:19,539 - DEBUG - data_struct_cards.txt
 2020-07-24 23:11:19,539 - DEBUG - java
 2020-07-24 23:11:19,539 - DEBUG - javascript
 2020-07-24 23:11:19,539 - DEBUG - oop_cards.txt
 2020-07-24 23:11:19,539 - DEBUG - python_cards.txt
 2020-07-24 23:11:19,539 - DEBUG - quizs.bak
 2020-07-24 23:11:19,539 - DEBUG - study
 2020-07-24 23:11:19,540 - DEBUG - testcycle2.txt
 2020-07-24 23:11:19,540 - DEBUG - uml_cards.txt
 2020-07-24 23:11:19,541 - DEBUG - algo_cards
 2020-07-24 23:11:19,541 - DEBUG - box1
 2020-07-24 23:11:19,541 - DEBUG - box2
 2020-07-24 23:11:19,541 - DEBUG - box3
 2020-07-24 23:11:19,541 - DEBUG - box4
 2020-07-24 23:11:19,541 - DEBUG - box5
 2020-07-24 23:11:19,541 - DEBUG - box6
 2020-07-24 23:11:19,541 - DEBUG - data_struct_cards
 2020-07-24 23:11:19,541 - DEBUG - 
 2020-07-24 23:11:19,541 - DEBUG - javasc
 2020-07-24 23:11:19,541 - DEBUG - oop_cards
 2020-07-24 23:11:19,541 - DEBUG - python_cards
 2020-07-24 23:11:19,542 - DEBUG - quizs
 2020-07-24 23:11:19,542 - DEBUG - s
 2020-07-24 23:11:19,542 - DEBUG - testcycle2
 2020-07-24 23:11:19,542 - DEBUG - found testcycle2.txt
 2020-07-24 23:11:19,542 - DEBUG - testcycle2
 2020-07-24 23:11:19,542 - DEBUG - quizs\
 2020-07-24 23:11:19,544 - DEBUG - Starting new cycle number 2
 2020-07-24 23:11:19,545 - DEBUG - highestbox 1
 2020-07-24 23:11:19,545 - DEBUG - Loading box1 to box1
 2020-07-24 23:11:19,728 - DEBUG - Cycle number 3
 2020-07-24 23:12:48,101 - DEBUG - Remove From Test Cycle
 2020-07-24 23:12:48,109 - DEBUG - Save Test Cycle
 2020-07-24 23:14:26,341 - DEBUG - Remove From Test Cycle
 2020-07-24 23:14:26,349 - DEBUG - Save Test Cycle
 2020-07-24 23:15:09,273 - DEBUG - Moving to Box
 2020-07-24 23:15:09,273 - DEBUG - Remove From Box
 2020-07-24 23:15:09,275 - DEBUG - Add To Box
 2020-07-24 23:15:09,277 - DEBUG - Remove From Test Cycle
 2020-07-24 23:15:09,288 - DEBUG - Save Test Cycle
 2020-07-24 23:17:19,176 - DEBUG - Remove From Test Cycle
 2020-07-24 23:17:19,183 - DEBUG - Save Test Cycle
 2020-07-24 23:17:31,771 - DEBUG - Moving to Box
 2020-07-24 23:17:31,771 - DEBUG - Remove From Box
 2020-07-24 23:17:31,779 - DEBUG - Add To Box
 2020-07-24 23:17:31,788 - DEBUG - Remove From Test Cycle
 2020-07-24 23:17:31,795 - DEBUG - Save Test Cycle
 2020-07-24 23:25:22,162 - DEBUG - Remove From Test Cycle
 2020-07-24 23:25:22,172 - DEBUG - Save Test Cycle
 2020-07-24 23:26:00,321 - DEBUG - Remove From Test Cycle
 2020-07-24 23:26:00,331 - DEBUG - Save Test Cycle
 2020-07-24 23:27:40,210 - DEBUG - Remove From Test Cycle
 2020-07-24 23:27:40,218 - DEBUG - Save Test Cycle
 2020-07-24 23:28:32,301 - DEBUG - Remove From Test Cycle
 2020-07-24 23:28:32,309 - DEBUG - Save Test Cycle
 2020-07-24 23:29:40,156 - DEBUG - Moving to Box
 2020-07-24 23:29:40,156 - DEBUG - Remove From Box
 2020-07-24 23:29:40,165 - DEBUG - Add To Box
 2020-07-24 23:29:40,174 - DEBUG - Remove From Test Cycle
 2020-07-24 23:29:40,181 - DEBUG - Save Test Cycle
 2020-07-24 23:30:45,556 - DEBUG - Moving to Box
 2020-07-24 23:30:45,556 - DEBUG - Remove From Box
 2020-07-24 23:30:45,564 - DEBUG - Add To Box
 2020-07-24 23:30:45,573 - DEBUG - Remove From Test Cycle
 2020-07-24 23:30:45,580 - DEBUG - Save Test Cycle
 2020-07-24 23:32:22,408 - DEBUG - Remove From Test Cycle
 2020-07-24 23:32:22,415 - DEBUG - Save Test Cycle
 2020-07-24 23:37:23,837 - DEBUG - Remove From Test Cycle
 2020-07-24 23:37:23,846 - DEBUG - Save Test Cycle
 2020-07-24 23:41:35,270 - DEBUG - Moving to Box
 2020-07-24 23:41:35,271 - DEBUG - Remove From Box
 2020-07-24 23:41:35,281 - DEBUG - Add To Box
 2020-07-24 23:41:35,294 - DEBUG - Remove From Test Cycle
 2020-07-24 23:41:35,304 - DEBUG - Save Test Cycle
 2020-07-24 23:43:10,528 - DEBUG - Moving to Box
 2020-07-24 23:43:10,528 - DEBUG - Remove From Box
 2020-07-24 23:43:10,536 - DEBUG - Add To Box
 2020-07-24 23:43:10,545 - DEBUG - Remove From Test Cycle
 2020-07-24 23:43:10,551 - DEBUG - Save Test Cycle
 2020-07-24 23:44:28,909 - DEBUG - Remove From Test Cycle
 2020-07-24 23:44:28,916 - DEBUG - Save Test Cycle
 2020-07-24 23:50:17,342 - DEBUG - Remove From Test Cycle
 2020-07-24 23:50:17,352 - DEBUG - Save Test Cycle
 2020-07-24 23:50:40,598 - DEBUG - Moving to Box
 2020-07-24 23:50:40,599 - DEBUG - Remove From Box
 2020-07-24 23:50:40,607 - DEBUG - Add To Box
 2020-07-24 23:50:40,615 - DEBUG - Remove From Test Cycle
 2020-07-24 23:50:40,621 - DEBUG - Save Test Cycle
 2020-07-24 23:50:40,991 - DEBUG - Save Test Cycle
 2020-07-24 23:51:26,257 - DEBUG - Start of Logging Leitner Module
 2020-07-24 23:51:26,257 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-24 23:51:26,257 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-24 23:51:26,257 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-24 23:51:26,258 - INFO - on things you get right.
 2020-07-24 23:51:26,303 - DEBUG - c:\dev2\github\python\quiz
 2020-07-24 23:51:26,304 - DEBUG - 15 }
 2020-07-24 23:51:26,304 - DEBUG - 57 }
 2020-07-24 23:51:26,305 - DEBUG - 225 }
 2020-07-24 23:51:26,305 - DEBUG - algorithm-1
 2020-07-24 23:51:26,305 - DEBUG -  What is algorithm efficiency?
 2020-07-24 23:51:26,305 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-07-24 23:51:26,305 - DEBUG - 242 }
 2020-07-24 23:51:26,305 - DEBUG - 324 }
 2020-07-24 23:51:26,306 - DEBUG - 403 }
 2020-07-24 23:51:26,306 - DEBUG - algorithm-2
 2020-07-24 23:51:26,306 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-07-24 23:51:26,306 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-07-24 23:51:26,306 - DEBUG - 420 }
 2020-07-24 23:51:26,306 - DEBUG - 502 }
 2020-07-24 23:51:26,306 - DEBUG - 531 }
 2020-07-24 23:51:26,307 - DEBUG - algorithm-3
 2020-07-24 23:51:26,307 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-07-24 23:51:26,307 - DEBUG -  Little O notation.
 2020-07-24 23:51:26,307 - DEBUG - 554 }
 2020-07-24 23:51:26,307 - DEBUG - 597 }
 2020-07-24 23:51:26,307 - DEBUG - 846 }
 2020-07-24 23:51:26,307 - DEBUG - alogorithm-bigo-1
 2020-07-24 23:51:26,307 - DEBUG -  Describe O(1) time complexity.
 2020-07-24 23:51:26,307 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-07-24 23:51:26,307 - DEBUG - 868 }
 2020-07-24 23:51:26,308 - DEBUG - 911 }
 2020-07-24 23:51:26,308 - DEBUG - 1271 }
 2020-07-24 23:51:26,308 - DEBUG - algorithm-bigo-2
 2020-07-24 23:51:26,308 - DEBUG -  Describe O(n) time complexity.
 2020-07-24 23:51:26,308 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-07-24 23:51:26,308 - DEBUG - 1293 }
 2020-07-24 23:51:26,309 - DEBUG - 1338 }
 2020-07-24 23:51:26,309 - DEBUG - 1581 }
 2020-07-24 23:51:26,309 - DEBUG - algorithm-bigo-3
 2020-07-24 23:51:26,309 - DEBUG -  Describe O(n^2) time complexity.
 2020-07-24 23:51:26,309 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-07-24 23:51:26,309 - DEBUG - 1603 }
 2020-07-24 23:51:26,309 - DEBUG - 1650 }
 2020-07-24 23:51:26,310 - DEBUG - 1941 }
 2020-07-24 23:51:26,310 - DEBUG - algorithm-bigo-4
 2020-07-24 23:51:26,310 - DEBUG -  Describe O(log n) time complexity.
 2020-07-24 23:51:26,310 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-07-24 23:51:26,310 - DEBUG - 1963 }
 2020-07-24 23:51:26,310 - DEBUG - 2008 }
 2020-07-24 23:51:26,310 - DEBUG - 2088 }
 2020-07-24 23:51:26,310 - DEBUG - algorithm-bigo-5
 2020-07-24 23:51:26,310 - DEBUG -  Describe O(n^c) time complexity.
 2020-07-24 23:51:26,310 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-07-24 23:51:26,311 - DEBUG - 2110 }
 2020-07-24 23:51:26,311 - DEBUG - 2155 }
 2020-07-24 23:51:26,311 - DEBUG - 2250 }
 2020-07-24 23:51:26,311 - DEBUG - algorithm-bigo-6
 2020-07-24 23:51:26,311 - DEBUG -  Describe O(c^n) time complexity.
 2020-07-24 23:51:26,311 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-07-24 23:51:26,311 - DEBUG - 2272 }
 2020-07-24 23:51:26,311 - DEBUG - 2321 }
 2020-07-24 23:51:26,312 - DEBUG - 2517 }
 2020-07-24 23:51:26,312 - DEBUG - algorithm-bigo-7
 2020-07-24 23:51:26,312 - DEBUG -  Describe O(n log n) time complexity.
 2020-07-24 23:51:26,312 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-07-24 23:51:26,312 - DEBUG - 2539 }
 2020-07-24 23:51:26,312 - DEBUG - 2606 }
 2020-07-24 23:51:26,312 - DEBUG - 2693 }
 2020-07-24 23:51:26,312 - DEBUG - algorithm-bigo-8
 2020-07-24 23:51:26,312 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-07-24 23:51:26,312 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-07-24 23:51:26,313 - DEBUG - 2715 }
 2020-07-24 23:51:26,313 - DEBUG - 2765 }
 2020-07-24 23:51:26,313 - DEBUG - 2893 }
 2020-07-24 23:51:26,313 - DEBUG - algorithm-bigo-9
 2020-07-24 23:51:26,313 - DEBUG -  Describe O(n log* n) time complexity.
 2020-07-24 23:51:26,313 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-07-24 23:51:26,313 - DEBUG - 2915 }
 2020-07-24 23:51:26,313 - DEBUG - 2959 }
 2020-07-24 23:51:26,314 - DEBUG - 3176 }
 2020-07-24 23:51:26,314 - DEBUG - algorithm-bigo-9
 2020-07-24 23:51:26,314 - DEBUG -  Describe O(n!) time complexity.
 2020-07-24 23:51:26,314 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-07-24 23:51:26,314 - DEBUG - 3199 }
 2020-07-24 23:51:26,314 - DEBUG - 3250 }
 2020-07-24 23:51:26,314 - DEBUG - 3415 }
 2020-07-24 23:51:26,314 - DEBUG - algorithm-bigo-10
 2020-07-24 23:51:26,314 - DEBUG -  Describe O(log log n) time complexity.
 2020-07-24 23:51:26,315 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-07-24 23:51:26,315 - DEBUG - 3438 }
 2020-07-24 23:51:26,315 - DEBUG - 3493 }
 2020-07-24 23:51:26,315 - DEBUG - 3618 }
 2020-07-24 23:51:26,315 - DEBUG - algorithm-bigo-11
 2020-07-24 23:51:26,315 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-07-24 23:51:26,315 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-07-24 23:51:26,315 - DEBUG - 3641 }
 2020-07-24 23:51:26,315 - DEBUG - 3686 }
 2020-07-24 23:51:26,316 - DEBUG - 3838 }
 2020-07-24 23:51:26,316 - DEBUG - algorithm-bigo-12
 2020-07-24 23:51:26,316 - DEBUG -  Describe O(n^3) time complexity.
 2020-07-24 23:51:26,316 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-07-24 23:51:26,316 - DEBUG - 3861 }
 2020-07-24 23:51:26,316 - DEBUG - 3916 }
 2020-07-24 23:51:26,317 - DEBUG - 4018 }
 2020-07-24 23:51:26,317 - DEBUG - algorithm-bigo-13
 2020-07-24 23:51:26,317 - DEBUG -  What is the rule about constants in Big O?
 2020-07-24 23:51:26,317 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-07-24 23:51:26,317 - DEBUG - 4041 }
 2020-07-24 23:51:26,317 - DEBUG - 4094 }
 2020-07-24 23:51:26,317 - DEBUG - 4229 }
 2020-07-24 23:51:26,317 - DEBUG - algorithm-bigo-14
 2020-07-24 23:51:26,317 - DEBUG -  What is the transivtivity rule in Big O?
 2020-07-24 23:51:26,317 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-07-24 23:51:26,318 - DEBUG - 4252 }
 2020-07-24 23:51:26,318 - DEBUG - 4299 }
 2020-07-24 23:51:26,318 - DEBUG - 4365 }
 2020-07-24 23:51:26,318 - DEBUG - algorithm-bigo-15
 2020-07-24 23:51:26,318 - DEBUG -  What is the rule of sums in Big O?
 2020-07-24 23:51:26,318 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-07-24 23:51:26,318 - DEBUG - 4388 }
 2020-07-24 23:51:26,318 - DEBUG - 4439 }
 2020-07-24 23:51:26,318 - DEBUG - 4545 }
 2020-07-24 23:51:26,319 - DEBUG - algorithm-bigo-16
 2020-07-24 23:51:26,319 - DEBUG -  What is the rule of products in Big O?
 2020-07-24 23:51:26,319 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-07-24 23:51:26,319 - DEBUG - 4568 }
 2020-07-24 23:51:26,319 - DEBUG - 4613 }
 2020-07-24 23:51:26,319 - DEBUG - 4720 }
 2020-07-24 23:51:26,319 - DEBUG - algorithm-bigo-17
 2020-07-24 23:51:26,319 - DEBUG -  What is the limit rule in Big O?
 2020-07-24 23:51:26,319 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-07-24 23:51:26,319 - DEBUG - 4742 }
 2020-07-24 23:51:26,320 - DEBUG - 4806 }
 2020-07-24 23:51:26,320 - DEBUG - 4927 }
 2020-07-24 23:51:26,320 - DEBUG - data_structures-1
 2020-07-24 23:51:26,320 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-07-24 23:51:26,320 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-07-24 23:51:26,320 - DEBUG - 4950 }
 2020-07-24 23:51:26,320 - DEBUG - 5021 }
 2020-07-24 23:51:26,320 - DEBUG - 5096 }
 2020-07-24 23:51:26,320 - DEBUG - data_structures-2
 2020-07-24 23:51:26,321 - DEBUG -  Name seven common names for main types of data structures.
 2020-07-24 23:51:26,321 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-07-24 23:51:26,321 - DEBUG - 5119 }
 2020-07-24 23:51:26,321 - DEBUG - 5169 }
 2020-07-24 23:51:26,321 - DEBUG - 5250 }
 2020-07-24 23:51:26,321 - DEBUG - data_structures-3
 2020-07-24 23:51:26,321 - DEBUG -  List kinds of Linked data structures.
 2020-07-24 23:51:26,321 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-07-24 23:51:26,321 - DEBUG - 5273 }
 2020-07-24 23:51:26,321 - DEBUG - 5344 }
 2020-07-24 23:51:26,322 - DEBUG - 5390 }
 2020-07-24 23:51:26,322 - DEBUG - data_structures-4
 2020-07-24 23:51:26,322 - DEBUG -  List alternative language names for Vector dat structures.
 2020-07-24 23:51:26,322 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-07-24 23:51:26,322 - DEBUG - 5413 }
 2020-07-24 23:51:26,322 - DEBUG - 5447 }
 2020-07-24 23:51:26,322 - DEBUG - 5479 }
 2020-07-24 23:51:26,323 - DEBUG - data_structures-5
 2020-07-24 23:51:26,323 - DEBUG -  List kinds of Queues.
 2020-07-24 23:51:26,323 - DEBUG -  Queue, Piority Queue.
 2020-07-24 23:51:26,323 - DEBUG - 5502 }
 2020-07-24 23:51:26,323 - DEBUG - 5553 }
 2020-07-24 23:51:26,323 - DEBUG - 5614 }
 2020-07-24 23:51:26,323 - DEBUG - data_structures-6
 2020-07-24 23:51:26,323 - DEBUG -  List alternate names for Dictionaries.
 2020-07-24 23:51:26,323 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-07-24 23:51:26,323 - DEBUG - 5637 }
 2020-07-24 23:51:26,323 - DEBUG - 5680 }
 2020-07-24 23:51:26,324 - DEBUG - 5746 }
 2020-07-24 23:51:26,324 - DEBUG - data_structures-7
 2020-07-24 23:51:26,324 - DEBUG -  List some main kinds of Trees.
 2020-07-24 23:51:26,324 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-07-24 23:51:26,324 - DEBUG - 5769 }
 2020-07-24 23:51:26,324 - DEBUG - 5829 }
 2020-07-24 23:51:26,324 - DEBUG - 5922 }
 2020-07-24 23:51:26,324 - DEBUG - data_structures-8
 2020-07-24 23:51:26,324 - DEBUG -  List types of arrays and array like structures.
 2020-07-24 23:51:26,325 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-07-24 23:51:26,325 - DEBUG - 5945 }
 2020-07-24 23:51:26,325 - DEBUG - 6050 }
 2020-07-24 23:51:26,325 - DEBUG - 6359 }
 2020-07-24 23:51:26,325 - DEBUG - data_structures-9
 2020-07-24 23:51:26,325 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-07-24 23:51:26,325 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-07-24 23:51:26,325 - DEBUG - 6383 }
 2020-07-24 23:51:26,326 - DEBUG - 6428 }
 2020-07-24 23:51:26,326 - DEBUG - 6848 }
 2020-07-24 23:51:26,326 - DEBUG - data_structures-10
 2020-07-24 23:51:26,326 - DEBUG -  What is a linked data structure?
 2020-07-24 23:51:26,326 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-07-24 23:51:26,326 - DEBUG - 6872 }
 2020-07-24 23:51:26,326 - DEBUG - 6905 }
 2020-07-24 23:51:26,327 - DEBUG - 6937 }
 2020-07-24 23:51:26,327 - DEBUG - data_structures-11
 2020-07-24 23:51:26,327 - DEBUG -  List kinds of Graphs
 2020-07-24 23:51:26,327 - DEBUG -  Graph and Scene Graph
 2020-07-24 23:51:26,327 - DEBUG - 6961 }
 2020-07-24 23:51:26,327 - DEBUG - 6988 }
 2020-07-24 23:51:26,328 - DEBUG - 7456 }
 2020-07-24 23:51:26,328 - DEBUG - data_structures-12
 2020-07-24 23:51:26,328 - DEBUG -  Describe List.
 2020-07-24 23:51:26,328 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-07-24 23:51:26,328 - DEBUG - 7480 }
 2020-07-24 23:51:26,328 - DEBUG - 7511 }
 2020-07-24 23:51:26,328 - DEBUG - 7625 }
 2020-07-24 23:51:26,328 - DEBUG - data_structures-13
 2020-07-24 23:51:26,328 - DEBUG -  Describe a Vector.
 2020-07-24 23:51:26,328 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-07-24 23:51:26,328 - DEBUG - 7649 }
 2020-07-24 23:51:26,329 - DEBUG - 7675 }
 2020-07-24 23:51:26,329 - DEBUG - 7840 }
 2020-07-24 23:51:26,329 - DEBUG - data_structures-14
 2020-07-24 23:51:26,329 - DEBUG -  Describe Set.
 2020-07-24 23:51:26,329 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-07-24 23:51:26,329 - DEBUG - 7864 }
 2020-07-24 23:51:26,329 - DEBUG - 7894 }
 2020-07-24 23:51:26,330 - DEBUG - 8360 }
 2020-07-24 23:51:26,330 - DEBUG - data_structures-15
 2020-07-24 23:51:26,330 - DEBUG -  Describe a Stack.
 2020-07-24 23:51:26,330 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-07-24 23:51:26,330 - DEBUG - 8384 }
 2020-07-24 23:51:26,330 - DEBUG - 8414 }
 2020-07-24 23:51:26,331 - DEBUG - 8949 }
 2020-07-24 23:51:26,331 - DEBUG - data_structures-16
 2020-07-24 23:51:26,331 - DEBUG -  Describe a queue.
 2020-07-24 23:51:26,331 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-07-24 23:51:26,332 - DEBUG - 8973 }
 2020-07-24 23:51:26,332 - DEBUG - 9008 }
 2020-07-24 23:51:26,332 - DEBUG - 9456 }
 2020-07-24 23:51:26,332 - DEBUG - data_structures-17
 2020-07-24 23:51:26,332 - DEBUG -  Describe a Dictionary.
 2020-07-24 23:51:26,332 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-07-24 23:51:26,332 - DEBUG - 9480 }
 2020-07-24 23:51:26,333 - DEBUG - 9525 }
 2020-07-24 23:51:26,333 - DEBUG - 10271 }
 2020-07-24 23:51:26,333 - DEBUG - data_structures-18
 2020-07-24 23:51:26,333 - DEBUG -  Describe a Tree data structures.
 2020-07-24 23:51:26,333 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-07-24 23:51:26,334 - DEBUG - 10295 }
 2020-07-24 23:51:26,334 - DEBUG - 10325 }
 2020-07-24 23:51:26,334 - DEBUG - 10932 }
 2020-07-24 23:51:26,334 - DEBUG - data_structures-19
 2020-07-24 23:51:26,334 - DEBUG -  Describe a Graph.
 2020-07-24 23:51:26,334 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-07-24 23:51:26,335 - DEBUG - 10960 }
 2020-07-24 23:51:26,335 - DEBUG - 11042 }
 2020-07-24 23:51:26,335 - DEBUG - 11361 }
 2020-07-24 23:51:26,335 - DEBUG - data_structures-java-1
 2020-07-24 23:51:26,335 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-07-24 23:51:26,335 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-07-24 23:51:26,335 - DEBUG - 11389 }
 2020-07-24 23:51:26,336 - DEBUG - 11460 }
 2020-07-24 23:51:26,336 - DEBUG - 11641 }
 2020-07-24 23:51:26,336 - DEBUG - data_structures-java-2
 2020-07-24 23:51:26,336 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-07-24 23:51:26,336 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-07-24 23:51:26,336 - DEBUG - 11669 }
 2020-07-24 23:51:26,336 - DEBUG - 11714 }
 2020-07-24 23:51:26,336 - DEBUG - 11877 }
 2020-07-24 23:51:26,337 - DEBUG - data_structures-java-3
 2020-07-24 23:51:26,337 - DEBUG -  Describe java boolean primitive.
 2020-07-24 23:51:26,337 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-07-24 23:51:26,337 - DEBUG - 11905 }
 2020-07-24 23:51:26,337 - DEBUG - 11943 }
 2020-07-24 23:51:26,337 - DEBUG - 12272 }
 2020-07-24 23:51:26,337 - DEBUG - data_structures-java-4
 2020-07-24 23:51:26,338 - DEBUG -  Describe java references.
 2020-07-24 23:51:26,338 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-07-24 23:51:26,338 - DEBUG - 12296 }
 2020-07-24 23:51:26,338 - DEBUG - 12375 }
 2020-07-24 23:51:26,338 - DEBUG - 12458 }
 2020-07-24 23:51:26,338 - DEBUG - data_structures-20
 2020-07-24 23:51:26,338 - DEBUG -  What do modern programming languages usually call data structures?
 2020-07-24 23:51:26,338 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-07-24 23:51:26,338 - DEBUG - 12492 }
 2020-07-24 23:51:26,338 - DEBUG - 12532 }
 2020-07-24 23:51:26,339 - DEBUG - 12826 }
 2020-07-24 23:51:26,339 - DEBUG - data_structures-javascript-1
 2020-07-24 23:51:26,339 - DEBUG -  Name JavaScript primitives.
 2020-07-24 23:51:26,339 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-07-24 23:51:26,339 - DEBUG - 12850 }
 2020-07-24 23:51:26,339 - DEBUG - 12956 }
 2020-07-24 23:51:26,340 - DEBUG - 13123 }
 2020-07-24 23:51:26,340 - DEBUG - data_structures-21
 2020-07-24 23:51:26,340 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-07-24 23:51:26,340 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-07-24 23:51:26,340 - DEBUG - 13153 }
 2020-07-24 23:51:26,340 - DEBUG - 13189 }
 2020-07-24 23:51:26,340 - DEBUG - 13247 }
 2020-07-24 23:51:26,340 - DEBUG - data_structures-python-1
 2020-07-24 23:51:26,340 - DEBUG -  List python primitives.
 2020-07-24 23:51:26,341 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-07-24 23:51:26,341 - DEBUG - 13277 }
 2020-07-24 23:51:26,341 - DEBUG - 13309 }
 2020-07-24 23:51:26,341 - DEBUG - 13422 }
 2020-07-24 23:51:26,341 - DEBUG - data_structures-csharp-1
 2020-07-24 23:51:26,341 - DEBUG -  List c# primitives.
 2020-07-24 23:51:26,341 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-07-24 23:51:26,341 - DEBUG - 13434 }
 2020-07-24 23:51:26,342 - DEBUG - 13477 }
 2020-07-24 23:51:26,342 - DEBUG - 13821 }
 2020-07-24 23:51:26,342 - DEBUG - oop-1
 2020-07-24 23:51:26,342 - DEBUG -  What is an OOP Design Pattern?
 2020-07-24 23:51:26,342 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-07-24 23:51:26,342 - DEBUG - 13832 }
 2020-07-24 23:51:26,342 - DEBUG - 13899 }
 2020-07-24 23:51:26,343 - DEBUG - 13965 }
 2020-07-24 23:51:26,343 - DEBUG - oop-2
 2020-07-24 23:51:26,343 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-07-24 23:51:26,343 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-07-24 23:51:26,343 - DEBUG - 13976 }
 2020-07-24 23:51:26,343 - DEBUG - 14039 }
 2020-07-24 23:51:26,343 - DEBUG - 14084 }
 2020-07-24 23:51:26,343 - DEBUG - oop-3
 2020-07-24 23:51:26,343 - DEBUG -  What are the 3 main categories of design patterns?
 2020-07-24 23:51:26,343 - DEBUG -  Creational, Behavioral, Structural
 2020-07-24 23:51:26,344 - DEBUG - 14095 }
 2020-07-24 23:51:26,344 - DEBUG - 14149 }
 2020-07-24 23:51:26,344 - DEBUG - 14406 }
 2020-07-24 23:51:26,344 - DEBUG - oop-4
 2020-07-24 23:51:26,344 - DEBUG -  What is an OOP Creational design pattern?
 2020-07-24 23:51:26,344 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-07-24 23:51:26,344 - DEBUG - 14417 }
 2020-07-24 23:51:26,344 - DEBUG - 14471 }
 2020-07-24 23:51:26,345 - DEBUG - 14834 }
 2020-07-24 23:51:26,345 - DEBUG - oop-5
 2020-07-24 23:51:26,345 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-07-24 23:51:26,345 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-07-24 23:51:26,345 - DEBUG - 14845 }
 2020-07-24 23:51:26,345 - DEBUG - 14899 }
 2020-07-24 23:51:26,346 - DEBUG - 15220 }
 2020-07-24 23:51:26,346 - DEBUG - oop-6
 2020-07-24 23:51:26,346 - DEBUG -  What is an OOP Structural design pattern?
 2020-07-24 23:51:26,346 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-07-24 23:51:26,346 - DEBUG - 15242 }
 2020-07-24 23:51:26,346 - DEBUG - 15294 }
 2020-07-24 23:51:26,346 - DEBUG - 15369 }
 2020-07-24 23:51:26,347 - DEBUG - oop-creational-1
 2020-07-24 23:51:26,347 - DEBUG -  Name 5 most common creational patterns.
 2020-07-24 23:51:26,347 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-07-24 23:51:26,347 - DEBUG - 15391 }
 2020-07-24 23:51:26,347 - DEBUG - 15444 }
 2020-07-24 23:51:26,347 - DEBUG - 15583 }
 2020-07-24 23:51:26,347 - DEBUG - oop-behavioral-1
 2020-07-24 23:51:26,347 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-07-24 23:51:26,348 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-07-24 23:51:26,348 - DEBUG - 15605 }
 2020-07-24 23:51:26,348 - DEBUG - 15657 }
 2020-07-24 23:51:26,348 - DEBUG - 15733 }
 2020-07-24 23:51:26,348 - DEBUG - oop-structural-1
 2020-07-24 23:51:26,348 - DEBUG -  Name 7 most common structural patterns.
 2020-07-24 23:51:26,348 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-07-24 23:51:26,348 - DEBUG - 15755 }
 2020-07-24 23:51:26,348 - DEBUG - 15842 }
 2020-07-24 23:51:26,349 - DEBUG - 15882 }
 2020-07-24 23:51:26,349 - DEBUG - oop-structural-2
 2020-07-24 23:51:26,349 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-07-24 23:51:26,349 - DEBUG -  Model View Controller or MVC.
 2020-07-24 23:51:26,349 - DEBUG - 15904 }
 2020-07-24 23:51:26,349 - DEBUG - 15938 }
 2020-07-24 23:51:26,350 - DEBUG - 16451 }
 2020-07-24 23:51:26,350 - DEBUG - oop-structural-3
 2020-07-24 23:51:26,350 - DEBUG -  Describe MVC pattern.
 2020-07-24 23:51:26,350 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-07-24 23:51:26,350 - DEBUG - 16473 }
 2020-07-24 23:51:26,350 - DEBUG - 16513 }
 2020-07-24 23:51:26,350 - DEBUG - 16769 }
 2020-07-24 23:51:26,350 - DEBUG - oop-creational-2
 2020-07-24 23:51:26,351 - DEBUG -  What is the Factory Method?
 2020-07-24 23:51:26,351 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-07-24 23:51:26,351 - DEBUG - 16791 }
 2020-07-24 23:51:26,351 - DEBUG - 16822 }
 2020-07-24 23:51:26,351 - DEBUG - 17062 }
 2020-07-24 23:51:26,351 - DEBUG - oop-creational-3
 2020-07-24 23:51:26,351 - DEBUG -  What is Prototype?
 2020-07-24 23:51:26,351 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-07-24 23:51:26,351 - DEBUG - 17084 }
 2020-07-24 23:51:26,351 - DEBUG - 17115 }
 2020-07-24 23:51:26,352 - DEBUG - 17404 }
 2020-07-24 23:51:26,352 - DEBUG - oop-creational-4
 2020-07-24 23:51:26,352 - DEBUG -  What is Singleton?
 2020-07-24 23:51:26,352 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-07-24 23:51:26,352 - DEBUG - 17426 }
 2020-07-24 23:51:26,352 - DEBUG - 17464 }
 2020-07-24 23:51:26,353 - DEBUG - 18097 }
 2020-07-24 23:51:26,353 - DEBUG - oop-creational-5
 2020-07-24 23:51:26,353 - DEBUG -  What is Abstract Factory?
 2020-07-24 23:51:26,353 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-07-24 23:51:26,353 - DEBUG - 18119 }
 2020-07-24 23:51:26,353 - DEBUG - 18174 }
 2020-07-24 23:51:26,354 - DEBUG - 18512 }
 2020-07-24 23:51:26,354 - DEBUG - oop-creational-6
 2020-07-24 23:51:26,354 - DEBUG -  What is Builder creational design pattern?
 2020-07-24 23:51:26,354 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-07-24 23:51:26,354 - DEBUG - 18534 }
 2020-07-24 23:51:26,354 - DEBUG - 18597 }
 2020-07-24 23:51:26,354 - DEBUG - 18869 }
 2020-07-24 23:51:26,355 - DEBUG - oop-behavioral-2
 2020-07-24 23:51:26,355 - DEBUG -  What is Template Method behavioral design pattern?
 2020-07-24 23:51:26,355 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-07-24 23:51:26,355 - DEBUG - 18891 }
 2020-07-24 23:51:26,355 - DEBUG - 18947 }
 2020-07-24 23:51:26,355 - DEBUG - 19298 }
 2020-07-24 23:51:26,356 - DEBUG - oop-behavioral-3
 2020-07-24 23:51:26,356 - DEBUG -  What is Strategy behavioral design pattern?
 2020-07-24 23:51:26,356 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-07-24 23:51:26,356 - DEBUG - 19320 }
 2020-07-24 23:51:26,356 - DEBUG - 19379 }
 2020-07-24 23:51:26,356 - DEBUG - 19657 }
 2020-07-24 23:51:26,356 - DEBUG - oop-behavioral-4
 2020-07-24 23:51:26,356 - DEBUG -  What is the Command behavioral design pattern?
 2020-07-24 23:51:26,357 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-07-24 23:51:26,357 - DEBUG - 19679 }
 2020-07-24 23:51:26,357 - DEBUG - 19734 }
 2020-07-24 23:51:26,358 - DEBUG - 20104 }
 2020-07-24 23:51:26,358 - DEBUG - oop-behavioral-5
 2020-07-24 23:51:26,358 - DEBUG -  What is Memento behavioral design pattern?
 2020-07-24 23:51:26,358 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-07-24 23:51:26,358 - DEBUG - 20126 }
 2020-07-24 23:51:26,358 - DEBUG - 20182 }
 2020-07-24 23:51:26,359 - DEBUG - 20562 }
 2020-07-24 23:51:26,359 - DEBUG - oop-behavioral-6
 2020-07-24 23:51:26,359 - DEBUG -  What is Mediator behavioral design pattern?
 2020-07-24 23:51:26,359 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-07-24 23:51:26,359 - DEBUG - 20584 }
 2020-07-24 23:51:26,360 - DEBUG - 20637 }
 2020-07-24 23:51:26,360 - DEBUG - 20945 }
 2020-07-24 23:51:26,360 - DEBUG - oop-behavioral-7
 2020-07-24 23:51:26,360 - DEBUG -  What is State behavioral design pattern?
 2020-07-24 23:51:26,360 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-07-24 23:51:26,360 - DEBUG - 20967 }
 2020-07-24 23:51:26,360 - DEBUG - 21023 }
 2020-07-24 23:51:26,361 - DEBUG - 21457 }
 2020-07-24 23:51:26,361 - DEBUG - oop-behavioral-8
 2020-07-24 23:51:26,361 - DEBUG -  What is Observer behavioral design pattern?
 2020-07-24 23:51:26,361 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-07-24 23:51:26,361 - DEBUG - 21479 }
 2020-07-24 23:51:26,361 - DEBUG - 21535 }
 2020-07-24 23:51:26,362 - DEBUG - 21801 }
 2020-07-24 23:51:26,362 - DEBUG - oop-behavioral-9
 2020-07-24 23:51:26,362 - DEBUG -  What is Iterator behavioral design pattern.
 2020-07-24 23:51:26,362 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-07-24 23:51:26,362 - DEBUG - 21824 }
 2020-07-24 23:51:26,362 - DEBUG - 21894 }
 2020-07-24 23:51:26,362 - DEBUG - 22311 }
 2020-07-24 23:51:26,363 - DEBUG - oop-behavioral-10
 2020-07-24 23:51:26,363 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-07-24 23:51:26,363 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-07-24 23:51:26,363 - DEBUG - 22334 }
 2020-07-24 23:51:26,363 - DEBUG - 22393 }
 2020-07-24 23:51:26,363 - DEBUG - 22719 }
 2020-07-24 23:51:26,364 - DEBUG - oop-behavioral-11
 2020-07-24 23:51:26,364 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-07-24 23:51:26,364 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-07-24 23:51:26,364 - DEBUG - 22742 }
 2020-07-24 23:51:26,364 - DEBUG - 22801 }
 2020-07-24 23:51:26,364 - DEBUG - 23266 }
 2020-07-24 23:51:26,364 - DEBUG - oop-behavioral-12
 2020-07-24 23:51:26,365 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-07-24 23:51:26,365 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-07-24 23:51:26,365 - DEBUG - 23288 }
 2020-07-24 23:51:26,365 - DEBUG - 23343 }
 2020-07-24 23:51:26,365 - DEBUG - 23656 }
 2020-07-24 23:51:26,365 - DEBUG - oop-structural-4
 2020-07-24 23:51:26,365 - DEBUG -  What is Adapter structural design pattern?
 2020-07-24 23:51:26,365 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-07-24 23:51:26,365 - DEBUG - 23678 }
 2020-07-24 23:51:26,366 - DEBUG - 23735 }
 2020-07-24 23:51:26,366 - DEBUG - 24091 }
 2020-07-24 23:51:26,366 - DEBUG - oop-structural-5
 2020-07-24 23:51:26,366 - DEBUG -  What is Composite structural design pattern?
 2020-07-24 23:51:26,366 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-07-24 23:51:26,366 - DEBUG - 24113 }
 2020-07-24 23:51:26,366 - DEBUG - 24170 }
 2020-07-24 23:51:26,367 - DEBUG - 24554 }
 2020-07-24 23:51:26,367 - DEBUG - oop-structural-6
 2020-07-24 23:51:26,367 - DEBUG -  What is Decorator structural design pattern?
 2020-07-24 23:51:26,367 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-07-24 23:51:26,367 - DEBUG - 24576 }
 2020-07-24 23:51:26,367 - DEBUG - 24629 }
 2020-07-24 23:51:26,368 - DEBUG - 24995 }
 2020-07-24 23:51:26,368 - DEBUG - oop-structural-7
 2020-07-24 23:51:26,368 - DEBUG -  What is Proxy structural design pattern?
 2020-07-24 23:51:26,368 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-07-24 23:51:26,368 - DEBUG - 25017 }
 2020-07-24 23:51:26,368 - DEBUG - 25071 }
 2020-07-24 23:51:26,369 - DEBUG - 25501 }
 2020-07-24 23:51:26,369 - DEBUG - oop-structural-8
 2020-07-24 23:51:26,369 - DEBUG -  What is Facade structural design pattern?
 2020-07-24 23:51:26,369 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-07-24 23:51:26,369 - DEBUG - 25523 }
 2020-07-24 23:51:26,369 - DEBUG - 25580 }
 2020-07-24 23:51:26,370 - DEBUG - 26139 }
 2020-07-24 23:51:26,370 - DEBUG - oop-structural-9
 2020-07-24 23:51:26,370 - DEBUG -  What is Flyweight structural design pattern?
 2020-07-24 23:51:26,370 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-07-24 23:51:26,370 - DEBUG - 26162 }
 2020-07-24 23:51:26,370 - DEBUG - 26216 }
 2020-07-24 23:51:26,371 - DEBUG - 26748 }
 2020-07-24 23:51:26,371 - DEBUG - oop-structural-10
 2020-07-24 23:51:26,371 - DEBUG -  What is Bridge structural design pattern?
 2020-07-24 23:51:26,371 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-07-24 23:51:26,371 - DEBUG - 26782 }
 2020-07-24 23:51:26,372 - DEBUG - 26838 }
 2020-07-24 23:51:26,372 - DEBUG - 26980 }
 2020-07-24 23:51:26,372 - DEBUG - python-datatypes-strings-1
 2020-07-24 23:51:26,372 - DEBUG -  Describe a basic python strings definition.
 2020-07-24 23:51:26,372 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-07-24 23:51:26,372 - DEBUG - 27013 }
 2020-07-24 23:51:26,372 - DEBUG - 27073 }
 2020-07-24 23:51:26,373 - DEBUG - 27141 }
 2020-07-24 23:51:26,373 - DEBUG - python-datatypes-strings-2
 2020-07-24 23:51:26,373 - DEBUG -  How can strings be defined over multiple lines?
 2020-07-24 23:51:26,373 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-07-24 23:51:26,373 - DEBUG - 27174 }
 2020-07-24 23:51:26,373 - DEBUG - 27247 }
 2020-07-24 23:51:26,373 - DEBUG - 27409 }
 2020-07-24 23:51:26,373 - DEBUG - python-datatypes-strings-3
 2020-07-24 23:51:26,374 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-07-24 23:51:26,374 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-07-24 23:51:26,374 - DEBUG - 27442 }
 2020-07-24 23:51:26,374 - DEBUG - 27502 }
 2020-07-24 23:51:26,374 - DEBUG - 27600 }
 2020-07-24 23:51:26,374 - DEBUG - python-datatypes-strings-4
 2020-07-24 23:51:26,374 - DEBUG -  How do you iterator over the chars of a string?
 2020-07-24 23:51:26,374 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-07-24 23:51:26,374 - DEBUG - 27634 }
 2020-07-24 23:51:26,375 - DEBUG - 27685 }
 2020-07-24 23:51:26,375 - DEBUG - 27715 }
 2020-07-24 23:51:26,375 - DEBUG - python-datatypes-strings-5
 2020-07-24 23:51:26,375 - DEBUG -  How do you get the lenght of a string?
 2020-07-24 23:51:26,375 - DEBUG -  len(mystring) is 5
 2020-07-24 23:51:26,375 - DEBUG - 27748 }
 2020-07-24 23:51:26,375 - DEBUG - 27790 }
 2020-07-24 23:51:26,375 - DEBUG - 27877 }
 2020-07-24 23:51:26,375 - DEBUG - python-datatypes-strings-6
 2020-07-24 23:51:26,375 - DEBUG -  How do you merge two strings?
 2020-07-24 23:51:26,376 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-07-24 23:51:26,376 - DEBUG - 27912 }
 2020-07-24 23:51:26,376 - DEBUG - 27961 }
 2020-07-24 23:51:26,376 - DEBUG - 28039 }
 2020-07-24 23:51:26,376 - DEBUG - python-datatypes-strings-7
 2020-07-24 23:51:26,376 - DEBUG -  How do you use a number in a string?
 2020-07-24 23:51:26,376 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-07-24 23:51:26,376 - DEBUG - 28074 }
 2020-07-24 23:51:26,376 - DEBUG - 28153 }
 2020-07-24 23:51:26,377 - DEBUG - 28184 }
 2020-07-24 23:51:26,377 - DEBUG - python-datatypes-strings-8
 2020-07-24 23:51:26,377 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-07-24 23:51:26,377 - DEBUG -  mystring.split(',')
 2020-07-24 23:51:26,377 - DEBUG - 28217 }
 2020-07-24 23:51:26,377 - DEBUG - 28272 }
 2020-07-24 23:51:26,377 - DEBUG - 28300 }
 2020-07-24 23:51:26,377 - DEBUG - python-datatypes-strings-9
 2020-07-24 23:51:26,377 - DEBUG -  How do you trim white space from a string?
 2020-07-24 23:51:26,377 - DEBUG -  mystring.strip()
 2020-07-24 23:51:26,377 - DEBUG - 28334 }
 2020-07-24 23:51:26,378 - DEBUG - 28394 }
 2020-07-24 23:51:26,378 - DEBUG - 28446 }
 2020-07-24 23:51:26,378 - DEBUG - python-datatypes-strings-10
 2020-07-24 23:51:26,378 - DEBUG -  How do you convert a string to an int or float?
 2020-07-24 23:51:26,378 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-07-24 23:51:26,379 - DEBUG - 28479 }
 2020-07-24 23:51:26,379 - DEBUG - 28525 }
 2020-07-24 23:51:26,379 - DEBUG - 28640 }
 2020-07-24 23:51:26,379 - DEBUG - python-datatypes-numbers-1
 2020-07-24 23:51:26,379 - DEBUG -  Describe types of python numbers.
 2020-07-24 23:51:26,379 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-07-24 23:51:26,380 - DEBUG - 28673 }
 2020-07-24 23:51:26,380 - DEBUG - 28745 }
 2020-07-24 23:51:26,380 - DEBUG - 28893 }
 2020-07-24 23:51:26,380 - DEBUG - python-datatypes-numbers-2
 2020-07-24 23:51:26,380 - DEBUG -  How do you work with really precise real numbers in python?
 2020-07-24 23:51:26,381 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-07-24 23:51:26,381 - DEBUG - 28926 }
 2020-07-24 23:51:26,381 - DEBUG - 29001 }
 2020-07-24 23:51:26,381 - DEBUG - 29095 }
 2020-07-24 23:51:26,381 - DEBUG - python-datatypes-numbers-3
 2020-07-24 23:51:26,382 - DEBUG -  How can you work with say fractional measurements with python?
 2020-07-24 23:51:26,382 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-07-24 23:51:26,382 - DEBUG - 29128 }
 2020-07-24 23:51:26,382 - DEBUG - 29179 }
 2020-07-24 23:51:26,382 - DEBUG - 29201 }
 2020-07-24 23:51:26,382 - DEBUG - python-datatypes-numbers-4
 2020-07-24 23:51:26,383 - DEBUG -  How do the absolute value of a number?
 2020-07-24 23:51:26,383 - DEBUG -  abs(mynum)
 2020-07-24 23:51:26,383 - DEBUG - 29234 }
 2020-07-24 23:51:26,383 - DEBUG - 29284 }
 2020-07-24 23:51:26,383 - DEBUG - 29313 }
 2020-07-24 23:51:26,383 - DEBUG - python-datatypes-numbers-5
 2020-07-24 23:51:26,383 - DEBUG -  How do you raise a number to a power?
 2020-07-24 23:51:26,383 - DEBUG -  pow(power,number)
 2020-07-24 23:51:26,383 - DEBUG - 29346 }
 2020-07-24 23:51:26,383 - DEBUG - 29390 }
 2020-07-24 23:51:26,384 - DEBUG - 29426 }
 2020-07-24 23:51:26,384 - DEBUG - python-datatypes-numbers-6
 2020-07-24 23:51:26,384 - DEBUG -  How do you round a real number?
 2020-07-24 23:51:26,384 - DEBUG -  round(num,decimalplaces)
 2020-07-24 23:51:26,384 - DEBUG - 29459 }
 2020-07-24 23:51:26,384 - DEBUG - 29513 }
 2020-07-24 23:51:26,384 - DEBUG - 29681 }
 2020-07-24 23:51:26,384 - DEBUG - python-datatypes-numbers-7
 2020-07-24 23:51:26,385 - DEBUG -  Whats involved in getting random numbers?
 2020-07-24 23:51:26,385 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-07-24 23:51:26,385 - DEBUG - 29695 }
 2020-07-24 23:51:26,385 - DEBUG - 29768 }
 2020-07-24 23:51:26,385 - DEBUG - 29837 }
 2020-07-24 23:51:26,385 - DEBUG - uml-1
 2020-07-24 23:51:26,385 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-07-24 23:51:26,385 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-07-24 23:51:26,385 - DEBUG - 29848 }
 2020-07-24 23:51:26,385 - DEBUG - 29892 }
 2020-07-24 23:51:26,386 - DEBUG - 29989 }
 2020-07-24 23:51:26,386 - DEBUG - uml-2
 2020-07-24 23:51:26,386 - DEBUG -  What is an interaction diagram?
 2020-07-24 23:51:26,386 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-07-24 23:51:26,386 - DEBUG - 30000 }
 2020-07-24 23:51:26,386 - DEBUG - 30041 }
 2020-07-24 23:51:26,386 - DEBUG - 30351 }
 2020-07-24 23:51:26,386 - DEBUG - uml-3
 2020-07-24 23:51:26,387 - DEBUG -  What is a structure diagram?
 2020-07-24 23:51:26,387 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-07-24 23:51:26,387 - DEBUG - 30362 }
 2020-07-24 23:51:26,387 - DEBUG - 30402 }
 2020-07-24 23:51:26,387 - DEBUG - 30516 }
 2020-07-24 23:51:26,387 - DEBUG - uml-4
 2020-07-24 23:51:26,387 - DEBUG -  What is a behavior diagram?
 2020-07-24 23:51:26,387 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-07-24 23:51:26,387 - DEBUG - 30537 }
 2020-07-24 23:51:26,387 - DEBUG - 30588 }
 2020-07-24 23:51:26,388 - DEBUG - 30670 }
 2020-07-24 23:51:26,388 - DEBUG - uml-structure-1
 2020-07-24 23:51:26,388 - DEBUG -  Name the seven UML structure diagrams.
 2020-07-24 23:51:26,388 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-07-24 23:51:26,388 - DEBUG - 30690 }
 2020-07-24 23:51:26,388 - DEBUG - 30755 }
 2020-07-24 23:51:26,388 - DEBUG - 30815 }
 2020-07-24 23:51:26,388 - DEBUG - uml-behavior-1
 2020-07-24 23:51:26,389 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-07-24 23:51:26,389 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-07-24 23:51:26,389 - DEBUG - 30838 }
 2020-07-24 23:51:26,389 - DEBUG - 30895 }
 2020-07-24 23:51:26,389 - DEBUG - 30960 }
 2020-07-24 23:51:26,389 - DEBUG - uml-interaction-1
 2020-07-24 23:51:26,389 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-07-24 23:51:26,389 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-07-24 23:51:26,390 - DEBUG - 30971 }
 2020-07-24 23:51:26,390 - DEBUG - 31015 }
 2020-07-24 23:51:26,390 - DEBUG - 31049 }
 2020-07-24 23:51:26,390 - DEBUG - uml-2
 2020-07-24 23:51:26,390 - DEBUG -  How many uml digrams are there?
 2020-07-24 23:51:26,390 - DEBUG -  Around 14 give or take.
 2020-07-24 23:51:26,390 - DEBUG - 31070 }
 2020-07-24 23:51:26,390 - DEBUG - 31121 }
 2020-07-24 23:51:26,390 - DEBUG - 31369 }
 2020-07-24 23:51:26,391 - DEBUG - uml-structure-2
 2020-07-24 23:51:26,391 - DEBUG -  Describe the structure Package diagram
 2020-07-24 23:51:26,391 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-07-24 23:51:26,391 - DEBUG - 31390 }
 2020-07-24 23:51:26,391 - DEBUG - 31440 }
 2020-07-24 23:51:26,391 - DEBUG - 31713 }
 2020-07-24 23:51:26,391 - DEBUG - uml-structure-3
 2020-07-24 23:51:26,391 - DEBUG -  Describe the structure Class diagram.
 2020-07-24 23:51:26,391 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-07-24 23:51:26,392 - DEBUG - 31734 }
 2020-07-24 23:51:26,392 - DEBUG - 31785 }
 2020-07-24 23:51:26,392 - DEBUG - 31919 }
 2020-07-24 23:51:26,392 - DEBUG - uml-structure-4
 2020-07-24 23:51:26,392 - DEBUG -  Describe the structure Object diagram.
 2020-07-24 23:51:26,392 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-07-24 23:51:26,392 - DEBUG - 31940 }
 2020-07-24 23:51:26,392 - DEBUG - 31994 }
 2020-07-24 23:51:26,393 - DEBUG - 32246 }
 2020-07-24 23:51:26,393 - DEBUG - uml-structure-5
 2020-07-24 23:51:26,393 - DEBUG -  Describe the structure Component diagram.
 2020-07-24 23:51:26,393 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-07-24 23:51:26,393 - DEBUG - 32267 }
 2020-07-24 23:51:26,393 - DEBUG - 32321 }
 2020-07-24 23:51:26,393 - DEBUG - 32658 }
 2020-07-24 23:51:26,393 - DEBUG - uml-structure-6
 2020-07-24 23:51:26,393 - DEBUG -  Describe the structure Composite diagram.
 2020-07-24 23:51:26,394 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-07-24 23:51:26,394 - DEBUG - 32679 }
 2020-07-24 23:51:26,394 - DEBUG - 32736 }
 2020-07-24 23:51:26,394 - DEBUG - 32924 }
 2020-07-24 23:51:26,394 - DEBUG - uml-structure-7
 2020-07-24 23:51:26,394 - DEBUG -  Describe the structure Collaboration diagram
 2020-07-24 23:51:26,394 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-07-24 23:51:26,395 - DEBUG - 32945 }
 2020-07-24 23:51:26,395 - DEBUG - 33000 }
 2020-07-24 23:51:26,395 - DEBUG - 33308 }
 2020-07-24 23:51:26,395 - DEBUG - uml-structure-8
 2020-07-24 23:51:26,395 - DEBUG -  Describe the structure Deployment diagram.
 2020-07-24 23:51:26,395 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-07-24 23:51:26,395 - DEBUG - 33328 }
 2020-07-24 23:51:26,395 - DEBUG - 33380 }
 2020-07-24 23:51:26,396 - DEBUG - 33546 }
 2020-07-24 23:51:26,396 - DEBUG - uml-behavior-1
 2020-07-24 23:51:26,396 - DEBUG -  Describe the behavior Activity diagram.
 2020-07-24 23:51:26,396 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-07-24 23:51:26,396 - DEBUG - 33566 }
 2020-07-24 23:51:26,396 - DEBUG - 33618 }
 2020-07-24 23:51:26,396 - DEBUG - 33863 }
 2020-07-24 23:51:26,397 - DEBUG - uml-behavior-2
 2020-07-24 23:51:26,397 - DEBUG -  Describe the behavior Use Case diagram.
 2020-07-24 23:51:26,397 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-07-24 23:51:26,397 - DEBUG - 33883 }
 2020-07-24 23:51:26,397 - DEBUG - 33932 }
 2020-07-24 23:51:26,397 - DEBUG - 34238 }
 2020-07-24 23:51:26,397 - DEBUG - uml-behavior-3
 2020-07-24 23:51:26,397 - DEBUG -  Describe the behavior State diagram.
 2020-07-24 23:51:26,397 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-07-24 23:51:26,398 - DEBUG - 34261 }
 2020-07-24 23:51:26,398 - DEBUG - 34316 }
 2020-07-24 23:51:26,398 - DEBUG - 34474 }
 2020-07-24 23:51:26,398 - DEBUG - uml-interaction-2
 2020-07-24 23:51:26,398 - DEBUG -  Describe the interaction Sequence diagram.
 2020-07-24 23:51:26,398 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-07-24 23:51:26,399 - DEBUG - 34497 }
 2020-07-24 23:51:26,399 - DEBUG - 34550 }
 2020-07-24 23:51:26,399 - DEBUG - 34800 }
 2020-07-24 23:51:26,399 - DEBUG - uml-interaction-3
 2020-07-24 23:51:26,399 - DEBUG -  Describe the interaction Timing diagram.
 2020-07-24 23:51:26,399 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-07-24 23:51:26,399 - DEBUG - 34823 }
 2020-07-24 23:51:26,399 - DEBUG - 34884 }
 2020-07-24 23:51:26,400 - DEBUG - 35155 }
 2020-07-24 23:51:26,400 - DEBUG - uml-interaction-4
 2020-07-24 23:51:26,400 - DEBUG -  Describe the interaction Communications diagram.
 2020-07-24 23:51:26,400 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-07-24 23:51:26,400 - DEBUG - 35178 }
 2020-07-24 23:51:26,400 - DEBUG - 35245 }
 2020-07-24 23:51:26,400 - DEBUG - 35403 }
 2020-07-24 23:51:26,401 - DEBUG - uml-interaction-5
 2020-07-24 23:51:26,401 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-07-24 23:51:26,401 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-07-24 23:51:26,402 - DEBUG - algo_cards
 2020-07-24 23:51:26,402 - DEBUG - box1
 2020-07-24 23:51:26,411 - DEBUG - algo_cards
 2020-07-24 23:51:26,411 - DEBUG - box1
 2020-07-24 23:51:26,411 - DEBUG - box2
 2020-07-24 23:51:26,419 - DEBUG - algo_cards
 2020-07-24 23:51:26,419 - DEBUG - box1
 2020-07-24 23:51:26,419 - DEBUG - box2
 2020-07-24 23:51:26,419 - DEBUG - box3
 2020-07-24 23:51:26,421 - DEBUG - algo_cards
 2020-07-24 23:51:26,421 - DEBUG - box1
 2020-07-24 23:51:26,421 - DEBUG - box2
 2020-07-24 23:51:26,421 - DEBUG - box3
 2020-07-24 23:51:26,421 - DEBUG - box4
 2020-07-24 23:51:26,422 - DEBUG - algo_cards
 2020-07-24 23:51:26,422 - DEBUG - box1
 2020-07-24 23:51:26,423 - DEBUG - box2
 2020-07-24 23:51:26,423 - DEBUG - box3
 2020-07-24 23:51:26,423 - DEBUG - box4
 2020-07-24 23:51:26,423 - DEBUG - box5
 2020-07-24 23:51:26,424 - DEBUG - algo_cards
 2020-07-24 23:51:26,424 - DEBUG - box1
 2020-07-24 23:51:26,424 - DEBUG - box2
 2020-07-24 23:51:26,424 - DEBUG - box3
 2020-07-24 23:51:26,424 - DEBUG - box4
 2020-07-24 23:51:26,425 - DEBUG - box5
 2020-07-24 23:51:26,425 - DEBUG - box6
 2020-07-24 23:51:26,425 - DEBUG - finding test cycle file
 2020-07-24 23:51:26,425 - DEBUG - quizs\
 2020-07-24 23:51:26,426 - DEBUG - algo_cards.txt
 2020-07-24 23:51:26,426 - DEBUG - box1.txt
 2020-07-24 23:51:26,426 - DEBUG - box2.txt
 2020-07-24 23:51:26,426 - DEBUG - box3.txt
 2020-07-24 23:51:26,426 - DEBUG - box4.txt
 2020-07-24 23:51:26,426 - DEBUG - box5.txt
 2020-07-24 23:51:26,426 - DEBUG - box6.txt
 2020-07-24 23:51:26,426 - DEBUG - data_struct_cards.txt
 2020-07-24 23:51:26,426 - DEBUG - java
 2020-07-24 23:51:26,426 - DEBUG - javascript
 2020-07-24 23:51:26,426 - DEBUG - oop_cards.txt
 2020-07-24 23:51:26,427 - DEBUG - python_cards.txt
 2020-07-24 23:51:26,427 - DEBUG - quizs.bak
 2020-07-24 23:51:26,427 - DEBUG - study
 2020-07-24 23:51:26,427 - DEBUG - testcycle3.txt
 2020-07-24 23:51:26,427 - DEBUG - uml_cards.txt
 2020-07-24 23:51:26,428 - DEBUG - algo_cards
 2020-07-24 23:51:26,428 - DEBUG - box1
 2020-07-24 23:51:26,428 - DEBUG - box2
 2020-07-24 23:51:26,428 - DEBUG - box3
 2020-07-24 23:51:26,428 - DEBUG - box4
 2020-07-24 23:51:26,429 - DEBUG - box5
 2020-07-24 23:51:26,429 - DEBUG - box6
 2020-07-24 23:51:26,429 - DEBUG - data_struct_cards
 2020-07-24 23:51:26,429 - DEBUG - 
 2020-07-24 23:51:26,429 - DEBUG - javasc
 2020-07-24 23:51:26,429 - DEBUG - oop_cards
 2020-07-24 23:51:26,429 - DEBUG - python_cards
 2020-07-24 23:51:26,429 - DEBUG - quizs
 2020-07-24 23:51:26,429 - DEBUG - s
 2020-07-24 23:51:26,429 - DEBUG - testcycle3
 2020-07-24 23:51:26,429 - DEBUG - found testcycle3.txt
 2020-07-24 23:51:26,429 - DEBUG - testcycle3
 2020-07-24 23:51:26,430 - DEBUG - quizs\
 2020-07-24 23:51:26,432 - DEBUG - Starting new cycle number 3
 2020-07-24 23:51:26,432 - DEBUG - highestbox 3
 2020-07-24 23:51:26,432 - DEBUG - Loading box1 to box3
 2020-07-24 23:51:26,710 - DEBUG - Cycle number 4
 2020-07-24 23:52:35,786 - DEBUG - Remove From Test Cycle
 2020-07-24 23:52:35,795 - DEBUG - Save Test Cycle
 2020-07-24 23:53:38,334 - DEBUG - Moving to Box
 2020-07-24 23:53:38,334 - DEBUG - Remove From Box
 2020-07-24 23:53:38,336 - DEBUG - Add To Box
 2020-07-24 23:53:38,337 - DEBUG - Remove From Test Cycle
 2020-07-24 23:53:38,346 - DEBUG - Save Test Cycle
 2020-07-24 23:54:33,466 - DEBUG - Remove From Test Cycle
 2020-07-24 23:54:33,475 - DEBUG - Save Test Cycle
 2020-07-24 23:57:48,470 - DEBUG - Moving to Box
 2020-07-24 23:57:48,470 - DEBUG - Remove From Box
 2020-07-24 23:57:48,472 - DEBUG - Add To Box
 2020-07-24 23:57:48,482 - DEBUG - Remove From Test Cycle
 2020-07-24 23:57:48,491 - DEBUG - Save Test Cycle
 2020-07-24 23:59:33,138 - DEBUG - Remove From Test Cycle
 2020-07-24 23:59:33,147 - DEBUG - Save Test Cycle
 2020-07-25 00:01:22,339 - DEBUG - Moving to Box
 2020-07-25 00:01:22,339 - DEBUG - Remove From Box
 2020-07-25 00:01:22,350 - DEBUG - Add To Box
 2020-07-25 00:01:22,358 - DEBUG - Remove From Test Cycle
 2020-07-25 00:01:22,366 - DEBUG - Save Test Cycle
 2020-07-25 00:01:45,916 - DEBUG - Moving to Box
 2020-07-25 00:01:45,917 - DEBUG - Remove From Box
 2020-07-25 00:01:45,925 - DEBUG - Add To Box
 2020-07-25 00:01:45,933 - DEBUG - Remove From Test Cycle
 2020-07-25 00:01:45,941 - DEBUG - Save Test Cycle
 2020-07-25 00:06:05,528 - DEBUG - Moving to Box
 2020-07-25 00:06:05,529 - DEBUG - Remove From Box
 2020-07-25 00:06:05,530 - DEBUG - Add To Box
 2020-07-25 00:06:05,540 - DEBUG - Remove From Test Cycle
 2020-07-25 00:06:05,548 - DEBUG - Save Test Cycle
 2020-07-25 00:07:00,462 - DEBUG - Moving to Box
 2020-07-25 00:07:00,462 - DEBUG - Remove From Box
 2020-07-25 00:07:00,472 - DEBUG - Add To Box
 2020-07-25 00:07:00,480 - DEBUG - Remove From Test Cycle
 2020-07-25 00:07:00,488 - DEBUG - Save Test Cycle
 2020-07-25 00:24:46,387 - DEBUG - Remove From Test Cycle
 2020-07-25 00:24:46,398 - DEBUG - Save Test Cycle
 2020-07-25 00:26:25,864 - DEBUG - Moving to Box
 2020-07-25 00:26:25,865 - DEBUG - Remove From Box
 2020-07-25 00:26:25,875 - DEBUG - Add To Box
 2020-07-25 00:26:25,884 - DEBUG - Remove From Test Cycle
 2020-07-25 00:26:25,892 - DEBUG - Save Test Cycle
 2020-07-25 00:26:58,258 - DEBUG - Start of Logging Leitner Module
 2020-07-25 00:26:58,259 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-07-25 00:26:58,259 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-07-25 00:26:58,259 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-07-25 00:26:58,259 - INFO - on things you get right.
 2020-07-25 00:26:58,306 - DEBUG - c:\dev2\github\python\quiz
 2020-07-25 00:26:58,308 - DEBUG - 15 }
 2020-07-25 00:26:58,308 - DEBUG - 57 }
 2020-07-25 00:26:58,309 - DEBUG - 225 }
 2020-07-25 00:26:58,309 - DEBUG - algorithm-1
 2020-07-25 00:26:58,309 - DEBUG -  What is algorithm efficiency?
 2020-07-25 00:26:58,309 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-07-25 00:26:58,309 - DEBUG - 242 }
 2020-07-25 00:26:58,309 - DEBUG - 324 }
 2020-07-25 00:26:58,309 - DEBUG - 403 }
 2020-07-25 00:26:58,309 - DEBUG - algorithm-2
 2020-07-25 00:26:58,309 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-07-25 00:26:58,310 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-07-25 00:26:58,310 - DEBUG - 420 }
 2020-07-25 00:26:58,310 - DEBUG - 502 }
 2020-07-25 00:26:58,310 - DEBUG - 531 }
 2020-07-25 00:26:58,310 - DEBUG - algorithm-3
 2020-07-25 00:26:58,310 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-07-25 00:26:58,310 - DEBUG -  Little O notation.
 2020-07-25 00:26:58,310 - DEBUG - 554 }
 2020-07-25 00:26:58,310 - DEBUG - 597 }
 2020-07-25 00:26:58,311 - DEBUG - 846 }
 2020-07-25 00:26:58,311 - DEBUG - alogorithm-bigo-1
 2020-07-25 00:26:58,311 - DEBUG -  Describe O(1) time complexity.
 2020-07-25 00:26:58,311 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-07-25 00:26:58,311 - DEBUG - 868 }
 2020-07-25 00:26:58,311 - DEBUG - 911 }
 2020-07-25 00:26:58,312 - DEBUG - 1271 }
 2020-07-25 00:26:58,312 - DEBUG - algorithm-bigo-2
 2020-07-25 00:26:58,312 - DEBUG -  Describe O(n) time complexity.
 2020-07-25 00:26:58,312 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-07-25 00:26:58,312 - DEBUG - 1293 }
 2020-07-25 00:26:58,312 - DEBUG - 1338 }
 2020-07-25 00:26:58,312 - DEBUG - 1581 }
 2020-07-25 00:26:58,312 - DEBUG - algorithm-bigo-3
 2020-07-25 00:26:58,312 - DEBUG -  Describe O(n^2) time complexity.
 2020-07-25 00:26:58,312 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-07-25 00:26:58,313 - DEBUG - 1603 }
 2020-07-25 00:26:58,313 - DEBUG - 1650 }
 2020-07-25 00:26:58,313 - DEBUG - 1941 }
 2020-07-25 00:26:58,313 - DEBUG - algorithm-bigo-4
 2020-07-25 00:26:58,313 - DEBUG -  Describe O(log n) time complexity.
 2020-07-25 00:26:58,313 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-07-25 00:26:58,313 - DEBUG - 1963 }
 2020-07-25 00:26:58,314 - DEBUG - 2008 }
 2020-07-25 00:26:58,314 - DEBUG - 2088 }
 2020-07-25 00:26:58,314 - DEBUG - algorithm-bigo-5
 2020-07-25 00:26:58,314 - DEBUG -  Describe O(n^c) time complexity.
 2020-07-25 00:26:58,314 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-07-25 00:26:58,314 - DEBUG - 2110 }
 2020-07-25 00:26:58,314 - DEBUG - 2155 }
 2020-07-25 00:26:58,315 - DEBUG - 2250 }
 2020-07-25 00:26:58,315 - DEBUG - algorithm-bigo-6
 2020-07-25 00:26:58,315 - DEBUG -  Describe O(c^n) time complexity.
 2020-07-25 00:26:58,315 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-07-25 00:26:58,315 - DEBUG - 2272 }
 2020-07-25 00:26:58,315 - DEBUG - 2321 }
 2020-07-25 00:26:58,315 - DEBUG - 2517 }
 2020-07-25 00:26:58,316 - DEBUG - algorithm-bigo-7
 2020-07-25 00:26:58,316 - DEBUG -  Describe O(n log n) time complexity.
 2020-07-25 00:26:58,316 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-07-25 00:26:58,316 - DEBUG - 2539 }
 2020-07-25 00:26:58,316 - DEBUG - 2606 }
 2020-07-25 00:26:58,316 - DEBUG - 2693 }
 2020-07-25 00:26:58,316 - DEBUG - algorithm-bigo-8
 2020-07-25 00:26:58,316 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-07-25 00:26:58,316 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-07-25 00:26:58,317 - DEBUG - 2715 }
 2020-07-25 00:26:58,317 - DEBUG - 2765 }
 2020-07-25 00:26:58,317 - DEBUG - 2893 }
 2020-07-25 00:26:58,317 - DEBUG - algorithm-bigo-9
 2020-07-25 00:26:58,317 - DEBUG -  Describe O(n log* n) time complexity.
 2020-07-25 00:26:58,317 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-07-25 00:26:58,317 - DEBUG - 2915 }
 2020-07-25 00:26:58,317 - DEBUG - 2959 }
 2020-07-25 00:26:58,317 - DEBUG - 3176 }
 2020-07-25 00:26:58,318 - DEBUG - algorithm-bigo-9
 2020-07-25 00:26:58,318 - DEBUG -  Describe O(n!) time complexity.
 2020-07-25 00:26:58,318 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-07-25 00:26:58,318 - DEBUG - 3199 }
 2020-07-25 00:26:58,318 - DEBUG - 3250 }
 2020-07-25 00:26:58,318 - DEBUG - 3415 }
 2020-07-25 00:26:58,318 - DEBUG - algorithm-bigo-10
 2020-07-25 00:26:58,318 - DEBUG -  Describe O(log log n) time complexity.
 2020-07-25 00:26:58,318 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-07-25 00:26:58,318 - DEBUG - 3438 }
 2020-07-25 00:26:58,319 - DEBUG - 3493 }
 2020-07-25 00:26:58,319 - DEBUG - 3618 }
 2020-07-25 00:26:58,319 - DEBUG - algorithm-bigo-11
 2020-07-25 00:26:58,319 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-07-25 00:26:58,319 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-07-25 00:26:58,319 - DEBUG - 3641 }
 2020-07-25 00:26:58,319 - DEBUG - 3686 }
 2020-07-25 00:26:58,319 - DEBUG - 3838 }
 2020-07-25 00:26:58,319 - DEBUG - algorithm-bigo-12
 2020-07-25 00:26:58,320 - DEBUG -  Describe O(n^3) time complexity.
 2020-07-25 00:26:58,320 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-07-25 00:26:58,320 - DEBUG - 3861 }
 2020-07-25 00:26:58,320 - DEBUG - 3916 }
 2020-07-25 00:26:58,320 - DEBUG - 4018 }
 2020-07-25 00:26:58,320 - DEBUG - algorithm-bigo-13
 2020-07-25 00:26:58,320 - DEBUG -  What is the rule about constants in Big O?
 2020-07-25 00:26:58,320 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-07-25 00:26:58,320 - DEBUG - 4041 }
 2020-07-25 00:26:58,321 - DEBUG - 4094 }
 2020-07-25 00:26:58,321 - DEBUG - 4229 }
 2020-07-25 00:26:58,321 - DEBUG - algorithm-bigo-14
 2020-07-25 00:26:58,321 - DEBUG -  What is the transivtivity rule in Big O?
 2020-07-25 00:26:58,321 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-07-25 00:26:58,321 - DEBUG - 4252 }
 2020-07-25 00:26:58,321 - DEBUG - 4299 }
 2020-07-25 00:26:58,321 - DEBUG - 4365 }
 2020-07-25 00:26:58,321 - DEBUG - algorithm-bigo-15
 2020-07-25 00:26:58,321 - DEBUG -  What is the rule of sums in Big O?
 2020-07-25 00:26:58,322 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-07-25 00:26:58,322 - DEBUG - 4388 }
 2020-07-25 00:26:58,322 - DEBUG - 4439 }
 2020-07-25 00:26:58,322 - DEBUG - 4545 }
 2020-07-25 00:26:58,322 - DEBUG - algorithm-bigo-16
 2020-07-25 00:26:58,322 - DEBUG -  What is the rule of products in Big O?
 2020-07-25 00:26:58,322 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-07-25 00:26:58,322 - DEBUG - 4568 }
 2020-07-25 00:26:58,322 - DEBUG - 4613 }
 2020-07-25 00:26:58,323 - DEBUG - 4720 }
 2020-07-25 00:26:58,323 - DEBUG - algorithm-bigo-17
 2020-07-25 00:26:58,323 - DEBUG -  What is the limit rule in Big O?
 2020-07-25 00:26:58,323 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-07-25 00:26:58,323 - DEBUG - 4742 }
 2020-07-25 00:26:58,323 - DEBUG - 4806 }
 2020-07-25 00:26:58,323 - DEBUG - 4927 }
 2020-07-25 00:26:58,323 - DEBUG - data_structures-1
 2020-07-25 00:26:58,323 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-07-25 00:26:58,323 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-07-25 00:26:58,324 - DEBUG - 4950 }
 2020-07-25 00:26:58,324 - DEBUG - 5021 }
 2020-07-25 00:26:58,324 - DEBUG - 5096 }
 2020-07-25 00:26:58,324 - DEBUG - data_structures-2
 2020-07-25 00:26:58,324 - DEBUG -  Name seven common names for main types of data structures.
 2020-07-25 00:26:58,324 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-07-25 00:26:58,325 - DEBUG - 5119 }
 2020-07-25 00:26:58,325 - DEBUG - 5169 }
 2020-07-25 00:26:58,325 - DEBUG - 5250 }
 2020-07-25 00:26:58,325 - DEBUG - data_structures-3
 2020-07-25 00:26:58,325 - DEBUG -  List kinds of Linked data structures.
 2020-07-25 00:26:58,325 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-07-25 00:26:58,325 - DEBUG - 5273 }
 2020-07-25 00:26:58,325 - DEBUG - 5344 }
 2020-07-25 00:26:58,325 - DEBUG - 5390 }
 2020-07-25 00:26:58,325 - DEBUG - data_structures-4
 2020-07-25 00:26:58,326 - DEBUG -  List alternative language names for Vector dat structures.
 2020-07-25 00:26:58,326 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-07-25 00:26:58,326 - DEBUG - 5413 }
 2020-07-25 00:26:58,326 - DEBUG - 5447 }
 2020-07-25 00:26:58,326 - DEBUG - 5479 }
 2020-07-25 00:26:58,326 - DEBUG - data_structures-5
 2020-07-25 00:26:58,326 - DEBUG -  List kinds of Queues.
 2020-07-25 00:26:58,326 - DEBUG -  Queue, Piority Queue.
 2020-07-25 00:26:58,326 - DEBUG - 5502 }
 2020-07-25 00:26:58,326 - DEBUG - 5553 }
 2020-07-25 00:26:58,327 - DEBUG - 5614 }
 2020-07-25 00:26:58,327 - DEBUG - data_structures-6
 2020-07-25 00:26:58,327 - DEBUG -  List alternate names for Dictionaries.
 2020-07-25 00:26:58,327 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-07-25 00:26:58,327 - DEBUG - 5637 }
 2020-07-25 00:26:58,327 - DEBUG - 5680 }
 2020-07-25 00:26:58,327 - DEBUG - 5746 }
 2020-07-25 00:26:58,327 - DEBUG - data_structures-7
 2020-07-25 00:26:58,327 - DEBUG -  List some main kinds of Trees.
 2020-07-25 00:26:58,327 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-07-25 00:26:58,327 - DEBUG - 5769 }
 2020-07-25 00:26:58,328 - DEBUG - 5829 }
 2020-07-25 00:26:58,328 - DEBUG - 5922 }
 2020-07-25 00:26:58,328 - DEBUG - data_structures-8
 2020-07-25 00:26:58,328 - DEBUG -  List types of arrays and array like structures.
 2020-07-25 00:26:58,328 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-07-25 00:26:58,328 - DEBUG - 5945 }
 2020-07-25 00:26:58,328 - DEBUG - 6050 }
 2020-07-25 00:26:58,329 - DEBUG - 6359 }
 2020-07-25 00:26:58,329 - DEBUG - data_structures-9
 2020-07-25 00:26:58,329 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-07-25 00:26:58,329 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-07-25 00:26:58,329 - DEBUG - 6383 }
 2020-07-25 00:26:58,329 - DEBUG - 6428 }
 2020-07-25 00:26:58,329 - DEBUG - 6848 }
 2020-07-25 00:26:58,330 - DEBUG - data_structures-10
 2020-07-25 00:26:58,330 - DEBUG -  What is a linked data structure?
 2020-07-25 00:26:58,330 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-07-25 00:26:58,330 - DEBUG - 6872 }
 2020-07-25 00:26:58,330 - DEBUG - 6905 }
 2020-07-25 00:26:58,330 - DEBUG - 6937 }
 2020-07-25 00:26:58,330 - DEBUG - data_structures-11
 2020-07-25 00:26:58,330 - DEBUG -  List kinds of Graphs
 2020-07-25 00:26:58,330 - DEBUG -  Graph and Scene Graph
 2020-07-25 00:26:58,330 - DEBUG - 6961 }
 2020-07-25 00:26:58,331 - DEBUG - 6988 }
 2020-07-25 00:26:58,331 - DEBUG - 7456 }
 2020-07-25 00:26:58,331 - DEBUG - data_structures-12
 2020-07-25 00:26:58,331 - DEBUG -  Describe List.
 2020-07-25 00:26:58,331 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-07-25 00:26:58,331 - DEBUG - 7480 }
 2020-07-25 00:26:58,331 - DEBUG - 7511 }
 2020-07-25 00:26:58,332 - DEBUG - 7625 }
 2020-07-25 00:26:58,332 - DEBUG - data_structures-13
 2020-07-25 00:26:58,332 - DEBUG -  Describe a Vector.
 2020-07-25 00:26:58,332 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-07-25 00:26:58,332 - DEBUG - 7649 }
 2020-07-25 00:26:58,332 - DEBUG - 7675 }
 2020-07-25 00:26:58,332 - DEBUG - 7840 }
 2020-07-25 00:26:58,332 - DEBUG - data_structures-14
 2020-07-25 00:26:58,332 - DEBUG -  Describe Set.
 2020-07-25 00:26:58,333 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-07-25 00:26:58,333 - DEBUG - 7864 }
 2020-07-25 00:26:58,333 - DEBUG - 7894 }
 2020-07-25 00:26:58,333 - DEBUG - 8360 }
 2020-07-25 00:26:58,333 - DEBUG - data_structures-15
 2020-07-25 00:26:58,333 - DEBUG -  Describe a Stack.
 2020-07-25 00:26:58,333 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-07-25 00:26:58,333 - DEBUG - 8384 }
 2020-07-25 00:26:58,333 - DEBUG - 8414 }
 2020-07-25 00:26:58,333 - DEBUG - 8949 }
 2020-07-25 00:26:58,333 - DEBUG - data_structures-16
 2020-07-25 00:26:58,335 - DEBUG -  Describe a queue.
 2020-07-25 00:26:58,335 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-07-25 00:26:58,335 - DEBUG - 8973 }
 2020-07-25 00:26:58,335 - DEBUG - 9008 }
 2020-07-25 00:26:58,336 - DEBUG - 9456 }
 2020-07-25 00:26:58,336 - DEBUG - data_structures-17
 2020-07-25 00:26:58,336 - DEBUG -  Describe a Dictionary.
 2020-07-25 00:26:58,336 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-07-25 00:26:58,336 - DEBUG - 9480 }
 2020-07-25 00:26:58,336 - DEBUG - 9525 }
 2020-07-25 00:26:58,337 - DEBUG - 10271 }
 2020-07-25 00:26:58,337 - DEBUG - data_structures-18
 2020-07-25 00:26:58,337 - DEBUG -  Describe a Tree data structures.
 2020-07-25 00:26:58,337 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-07-25 00:26:58,337 - DEBUG - 10295 }
 2020-07-25 00:26:58,337 - DEBUG - 10325 }
 2020-07-25 00:26:58,338 - DEBUG - 10932 }
 2020-07-25 00:26:58,338 - DEBUG - data_structures-19
 2020-07-25 00:26:58,338 - DEBUG -  Describe a Graph.
 2020-07-25 00:26:58,338 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-07-25 00:26:58,338 - DEBUG - 10960 }
 2020-07-25 00:26:58,338 - DEBUG - 11042 }
 2020-07-25 00:26:58,339 - DEBUG - 11361 }
 2020-07-25 00:26:58,339 - DEBUG - data_structures-java-1
 2020-07-25 00:26:58,339 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-07-25 00:26:58,339 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-07-25 00:26:58,339 - DEBUG - 11389 }
 2020-07-25 00:26:58,339 - DEBUG - 11460 }
 2020-07-25 00:26:58,339 - DEBUG - 11641 }
 2020-07-25 00:26:58,339 - DEBUG - data_structures-java-2
 2020-07-25 00:26:58,340 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-07-25 00:26:58,340 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-07-25 00:26:58,340 - DEBUG - 11669 }
 2020-07-25 00:26:58,340 - DEBUG - 11714 }
 2020-07-25 00:26:58,340 - DEBUG - 11877 }
 2020-07-25 00:26:58,340 - DEBUG - data_structures-java-3
 2020-07-25 00:26:58,340 - DEBUG -  Describe java boolean primitive.
 2020-07-25 00:26:58,340 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-07-25 00:26:58,340 - DEBUG - 11905 }
 2020-07-25 00:26:58,340 - DEBUG - 11943 }
 2020-07-25 00:26:58,341 - DEBUG - 12272 }
 2020-07-25 00:26:58,341 - DEBUG - data_structures-java-4
 2020-07-25 00:26:58,341 - DEBUG -  Describe java references.
 2020-07-25 00:26:58,341 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-07-25 00:26:58,341 - DEBUG - 12296 }
 2020-07-25 00:26:58,342 - DEBUG - 12375 }
 2020-07-25 00:26:58,342 - DEBUG - 12458 }
 2020-07-25 00:26:58,342 - DEBUG - data_structures-20
 2020-07-25 00:26:58,342 - DEBUG -  What do modern programming languages usually call data structures?
 2020-07-25 00:26:58,342 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-07-25 00:26:58,342 - DEBUG - 12492 }
 2020-07-25 00:26:58,342 - DEBUG - 12532 }
 2020-07-25 00:26:58,342 - DEBUG - 12826 }
 2020-07-25 00:26:58,343 - DEBUG - data_structures-javascript-1
 2020-07-25 00:26:58,343 - DEBUG -  Name JavaScript primitives.
 2020-07-25 00:26:58,343 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-07-25 00:26:58,343 - DEBUG - 12850 }
 2020-07-25 00:26:58,343 - DEBUG - 12956 }
 2020-07-25 00:26:58,343 - DEBUG - 13123 }
 2020-07-25 00:26:58,343 - DEBUG - data_structures-21
 2020-07-25 00:26:58,343 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-07-25 00:26:58,343 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-07-25 00:26:58,344 - DEBUG - 13153 }
 2020-07-25 00:26:58,344 - DEBUG - 13189 }
 2020-07-25 00:26:58,344 - DEBUG - 13247 }
 2020-07-25 00:26:58,344 - DEBUG - data_structures-python-1
 2020-07-25 00:26:58,344 - DEBUG -  List python primitives.
 2020-07-25 00:26:58,344 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-07-25 00:26:58,344 - DEBUG - 13277 }
 2020-07-25 00:26:58,344 - DEBUG - 13309 }
 2020-07-25 00:26:58,345 - DEBUG - 13422 }
 2020-07-25 00:26:58,345 - DEBUG - data_structures-csharp-1
 2020-07-25 00:26:58,345 - DEBUG -  List c# primitives.
 2020-07-25 00:26:58,345 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-07-25 00:26:58,345 - DEBUG - 13434 }
 2020-07-25 00:26:58,345 - DEBUG - 13477 }
 2020-07-25 00:26:58,345 - DEBUG - 13821 }
 2020-07-25 00:26:58,345 - DEBUG - oop-1
 2020-07-25 00:26:58,346 - DEBUG -  What is an OOP Design Pattern?
 2020-07-25 00:26:58,346 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-07-25 00:26:58,346 - DEBUG - 13832 }
 2020-07-25 00:26:58,346 - DEBUG - 13899 }
 2020-07-25 00:26:58,346 - DEBUG - 13965 }
 2020-07-25 00:26:58,346 - DEBUG - oop-2
 2020-07-25 00:26:58,346 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-07-25 00:26:58,346 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-07-25 00:26:58,346 - DEBUG - 13976 }
 2020-07-25 00:26:58,346 - DEBUG - 14039 }
 2020-07-25 00:26:58,346 - DEBUG - 14084 }
 2020-07-25 00:26:58,347 - DEBUG - oop-3
 2020-07-25 00:26:58,347 - DEBUG -  What are the 3 main categories of design patterns?
 2020-07-25 00:26:58,347 - DEBUG -  Creational, Behavioral, Structural
 2020-07-25 00:26:58,347 - DEBUG - 14095 }
 2020-07-25 00:26:58,347 - DEBUG - 14149 }
 2020-07-25 00:26:58,347 - DEBUG - 14406 }
 2020-07-25 00:26:58,347 - DEBUG - oop-4
 2020-07-25 00:26:58,347 - DEBUG -  What is an OOP Creational design pattern?
 2020-07-25 00:26:58,348 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-07-25 00:26:58,348 - DEBUG - 14417 }
 2020-07-25 00:26:58,348 - DEBUG - 14471 }
 2020-07-25 00:26:58,348 - DEBUG - 14834 }
 2020-07-25 00:26:58,348 - DEBUG - oop-5
 2020-07-25 00:26:58,348 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-07-25 00:26:58,348 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-07-25 00:26:58,348 - DEBUG - 14845 }
 2020-07-25 00:26:58,349 - DEBUG - 14899 }
 2020-07-25 00:26:58,349 - DEBUG - 15220 }
 2020-07-25 00:26:58,349 - DEBUG - oop-6
 2020-07-25 00:26:58,349 - DEBUG -  What is an OOP Structural design pattern?
 2020-07-25 00:26:58,349 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-07-25 00:26:58,349 - DEBUG - 15242 }
 2020-07-25 00:26:58,349 - DEBUG - 15294 }
 2020-07-25 00:26:58,349 - DEBUG - 15369 }
 2020-07-25 00:26:58,350 - DEBUG - oop-creational-1
 2020-07-25 00:26:58,350 - DEBUG -  Name 5 most common creational patterns.
 2020-07-25 00:26:58,350 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-07-25 00:26:58,350 - DEBUG - 15391 }
 2020-07-25 00:26:58,350 - DEBUG - 15444 }
 2020-07-25 00:26:58,350 - DEBUG - 15583 }
 2020-07-25 00:26:58,350 - DEBUG - oop-behavioral-1
 2020-07-25 00:26:58,350 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-07-25 00:26:58,350 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-07-25 00:26:58,350 - DEBUG - 15605 }
 2020-07-25 00:26:58,351 - DEBUG - 15657 }
 2020-07-25 00:26:58,351 - DEBUG - 15733 }
 2020-07-25 00:26:58,351 - DEBUG - oop-structural-1
 2020-07-25 00:26:58,351 - DEBUG -  Name 7 most common structural patterns.
 2020-07-25 00:26:58,351 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-07-25 00:26:58,351 - DEBUG - 15755 }
 2020-07-25 00:26:58,351 - DEBUG - 15842 }
 2020-07-25 00:26:58,351 - DEBUG - 15882 }
 2020-07-25 00:26:58,351 - DEBUG - oop-structural-2
 2020-07-25 00:26:58,351 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-07-25 00:26:58,351 - DEBUG -  Model View Controller or MVC.
 2020-07-25 00:26:58,352 - DEBUG - 15904 }
 2020-07-25 00:26:58,352 - DEBUG - 15938 }
 2020-07-25 00:26:58,352 - DEBUG - 16451 }
 2020-07-25 00:26:58,352 - DEBUG - oop-structural-3
 2020-07-25 00:26:58,352 - DEBUG -  Describe MVC pattern.
 2020-07-25 00:26:58,352 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-07-25 00:26:58,353 - DEBUG - 16473 }
 2020-07-25 00:26:58,353 - DEBUG - 16513 }
 2020-07-25 00:26:58,353 - DEBUG - 16769 }
 2020-07-25 00:26:58,353 - DEBUG - oop-creational-2
 2020-07-25 00:26:58,353 - DEBUG -  What is the Factory Method?
 2020-07-25 00:26:58,353 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-07-25 00:26:58,353 - DEBUG - 16791 }
 2020-07-25 00:26:58,353 - DEBUG - 16822 }
 2020-07-25 00:26:58,354 - DEBUG - 17062 }
 2020-07-25 00:26:58,354 - DEBUG - oop-creational-3
 2020-07-25 00:26:58,354 - DEBUG -  What is Prototype?
 2020-07-25 00:26:58,354 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-07-25 00:26:58,354 - DEBUG - 17084 }
 2020-07-25 00:26:58,354 - DEBUG - 17115 }
 2020-07-25 00:26:58,354 - DEBUG - 17404 }
 2020-07-25 00:26:58,355 - DEBUG - oop-creational-4
 2020-07-25 00:26:58,355 - DEBUG -  What is Singleton?
 2020-07-25 00:26:58,355 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-07-25 00:26:58,355 - DEBUG - 17426 }
 2020-07-25 00:26:58,355 - DEBUG - 17464 }
 2020-07-25 00:26:58,356 - DEBUG - 18097 }
 2020-07-25 00:26:58,356 - DEBUG - oop-creational-5
 2020-07-25 00:26:58,356 - DEBUG -  What is Abstract Factory?
 2020-07-25 00:26:58,356 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-07-25 00:26:58,356 - DEBUG - 18119 }
 2020-07-25 00:26:58,357 - DEBUG - 18174 }
 2020-07-25 00:26:58,357 - DEBUG - 18512 }
 2020-07-25 00:26:58,357 - DEBUG - oop-creational-6
 2020-07-25 00:26:58,357 - DEBUG -  What is Builder creational design pattern?
 2020-07-25 00:26:58,357 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-07-25 00:26:58,357 - DEBUG - 18534 }
 2020-07-25 00:26:58,358 - DEBUG - 18597 }
 2020-07-25 00:26:58,358 - DEBUG - 18869 }
 2020-07-25 00:26:58,358 - DEBUG - oop-behavioral-2
 2020-07-25 00:26:58,358 - DEBUG -  What is Template Method behavioral design pattern?
 2020-07-25 00:26:58,358 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-07-25 00:26:58,358 - DEBUG - 18891 }
 2020-07-25 00:26:58,358 - DEBUG - 18947 }
 2020-07-25 00:26:58,359 - DEBUG - 19298 }
 2020-07-25 00:26:58,359 - DEBUG - oop-behavioral-3
 2020-07-25 00:26:58,359 - DEBUG -  What is Strategy behavioral design pattern?
 2020-07-25 00:26:58,359 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-07-25 00:26:58,359 - DEBUG - 19320 }
 2020-07-25 00:26:58,359 - DEBUG - 19379 }
 2020-07-25 00:26:58,360 - DEBUG - 19657 }
 2020-07-25 00:26:58,360 - DEBUG - oop-behavioral-4
 2020-07-25 00:26:58,360 - DEBUG -  What is the Command behavioral design pattern?
 2020-07-25 00:26:58,360 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-07-25 00:26:58,360 - DEBUG - 19679 }
 2020-07-25 00:26:58,360 - DEBUG - 19734 }
 2020-07-25 00:26:58,360 - DEBUG - 20104 }
 2020-07-25 00:26:58,361 - DEBUG - oop-behavioral-5
 2020-07-25 00:26:58,361 - DEBUG -  What is Memento behavioral design pattern?
 2020-07-25 00:26:58,361 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-07-25 00:26:58,361 - DEBUG - 20126 }
 2020-07-25 00:26:58,361 - DEBUG - 20182 }
 2020-07-25 00:26:58,361 - DEBUG - 20562 }
 2020-07-25 00:26:58,361 - DEBUG - oop-behavioral-6
 2020-07-25 00:26:58,361 - DEBUG -  What is Mediator behavioral design pattern?
 2020-07-25 00:26:58,362 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-07-25 00:26:58,362 - DEBUG - 20584 }
 2020-07-25 00:26:58,362 - DEBUG - 20637 }
 2020-07-25 00:26:58,362 - DEBUG - 20945 }
 2020-07-25 00:26:58,362 - DEBUG - oop-behavioral-7
 2020-07-25 00:26:58,362 - DEBUG -  What is State behavioral design pattern?
 2020-07-25 00:26:58,362 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-07-25 00:26:58,362 - DEBUG - 20967 }
 2020-07-25 00:26:58,363 - DEBUG - 21023 }
 2020-07-25 00:26:58,363 - DEBUG - 21457 }
 2020-07-25 00:26:58,363 - DEBUG - oop-behavioral-8
 2020-07-25 00:26:58,363 - DEBUG -  What is Observer behavioral design pattern?
 2020-07-25 00:26:58,363 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-07-25 00:26:58,363 - DEBUG - 21479 }
 2020-07-25 00:26:58,363 - DEBUG - 21535 }
 2020-07-25 00:26:58,364 - DEBUG - 21801 }
 2020-07-25 00:26:58,364 - DEBUG - oop-behavioral-9
 2020-07-25 00:26:58,364 - DEBUG -  What is Iterator behavioral design pattern.
 2020-07-25 00:26:58,364 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-07-25 00:26:58,364 - DEBUG - 21824 }
 2020-07-25 00:26:58,364 - DEBUG - 21894 }
 2020-07-25 00:26:58,365 - DEBUG - 22311 }
 2020-07-25 00:26:58,365 - DEBUG - oop-behavioral-10
 2020-07-25 00:26:58,365 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-07-25 00:26:58,365 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-07-25 00:26:58,365 - DEBUG - 22334 }
 2020-07-25 00:26:58,365 - DEBUG - 22393 }
 2020-07-25 00:26:58,366 - DEBUG - 22719 }
 2020-07-25 00:26:58,366 - DEBUG - oop-behavioral-11
 2020-07-25 00:26:58,366 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-07-25 00:26:58,366 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-07-25 00:26:58,366 - DEBUG - 22742 }
 2020-07-25 00:26:58,366 - DEBUG - 22801 }
 2020-07-25 00:26:58,367 - DEBUG - 23266 }
 2020-07-25 00:26:58,367 - DEBUG - oop-behavioral-12
 2020-07-25 00:26:58,367 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-07-25 00:26:58,367 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-07-25 00:26:58,367 - DEBUG - 23288 }
 2020-07-25 00:26:58,367 - DEBUG - 23343 }
 2020-07-25 00:26:58,368 - DEBUG - 23656 }
 2020-07-25 00:26:58,368 - DEBUG - oop-structural-4
 2020-07-25 00:26:58,368 - DEBUG -  What is Adapter structural design pattern?
 2020-07-25 00:26:58,368 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-07-25 00:26:58,368 - DEBUG - 23678 }
 2020-07-25 00:26:58,368 - DEBUG - 23735 }
 2020-07-25 00:26:58,368 - DEBUG - 24091 }
 2020-07-25 00:26:58,368 - DEBUG - oop-structural-5
 2020-07-25 00:26:58,369 - DEBUG -  What is Composite structural design pattern?
 2020-07-25 00:26:58,369 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-07-25 00:26:58,369 - DEBUG - 24113 }
 2020-07-25 00:26:58,369 - DEBUG - 24170 }
 2020-07-25 00:26:58,369 - DEBUG - 24554 }
 2020-07-25 00:26:58,369 - DEBUG - oop-structural-6
 2020-07-25 00:26:58,369 - DEBUG -  What is Decorator structural design pattern?
 2020-07-25 00:26:58,369 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-07-25 00:26:58,370 - DEBUG - 24576 }
 2020-07-25 00:26:58,370 - DEBUG - 24629 }
 2020-07-25 00:26:58,370 - DEBUG - 24995 }
 2020-07-25 00:26:58,370 - DEBUG - oop-structural-7
 2020-07-25 00:26:58,370 - DEBUG -  What is Proxy structural design pattern?
 2020-07-25 00:26:58,370 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-07-25 00:26:58,370 - DEBUG - 25017 }
 2020-07-25 00:26:58,371 - DEBUG - 25071 }
 2020-07-25 00:26:58,371 - DEBUG - 25501 }
 2020-07-25 00:26:58,371 - DEBUG - oop-structural-8
 2020-07-25 00:26:58,371 - DEBUG -  What is Facade structural design pattern?
 2020-07-25 00:26:58,371 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-07-25 00:26:58,371 - DEBUG - 25523 }
 2020-07-25 00:26:58,371 - DEBUG - 25580 }
 2020-07-25 00:26:58,373 - DEBUG - 26139 }
 2020-07-25 00:26:58,373 - DEBUG - oop-structural-9
 2020-07-25 00:26:58,373 - DEBUG -  What is Flyweight structural design pattern?
 2020-07-25 00:26:58,373 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-07-25 00:26:58,373 - DEBUG - 26162 }
 2020-07-25 00:26:58,373 - DEBUG - 26216 }
 2020-07-25 00:26:58,374 - DEBUG - 26748 }
 2020-07-25 00:26:58,374 - DEBUG - oop-structural-10
 2020-07-25 00:26:58,374 - DEBUG -  What is Bridge structural design pattern?
 2020-07-25 00:26:58,375 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-07-25 00:26:58,375 - DEBUG - 26782 }
 2020-07-25 00:26:58,375 - DEBUG - 26838 }
 2020-07-25 00:26:58,376 - DEBUG - 26980 }
 2020-07-25 00:26:58,376 - DEBUG - python-datatypes-strings-1
 2020-07-25 00:26:58,376 - DEBUG -  Describe a basic python strings definition.
 2020-07-25 00:26:58,376 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-07-25 00:26:58,376 - DEBUG - 27013 }
 2020-07-25 00:26:58,377 - DEBUG - 27073 }
 2020-07-25 00:26:58,377 - DEBUG - 27141 }
 2020-07-25 00:26:58,377 - DEBUG - python-datatypes-strings-2
 2020-07-25 00:26:58,377 - DEBUG -  How can strings be defined over multiple lines?
 2020-07-25 00:26:58,378 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-07-25 00:26:58,378 - DEBUG - 27174 }
 2020-07-25 00:26:58,378 - DEBUG - 27247 }
 2020-07-25 00:26:58,378 - DEBUG - 27409 }
 2020-07-25 00:26:58,378 - DEBUG - python-datatypes-strings-3
 2020-07-25 00:26:58,378 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-07-25 00:26:58,378 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-07-25 00:26:58,378 - DEBUG - 27442 }
 2020-07-25 00:26:58,379 - DEBUG - 27502 }
 2020-07-25 00:26:58,379 - DEBUG - 27600 }
 2020-07-25 00:26:58,379 - DEBUG - python-datatypes-strings-4
 2020-07-25 00:26:58,379 - DEBUG -  How do you iterator over the chars of a string?
 2020-07-25 00:26:58,379 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-07-25 00:26:58,379 - DEBUG - 27634 }
 2020-07-25 00:26:58,380 - DEBUG - 27685 }
 2020-07-25 00:26:58,380 - DEBUG - 27715 }
 2020-07-25 00:26:58,380 - DEBUG - python-datatypes-strings-5
 2020-07-25 00:26:58,380 - DEBUG -  How do you get the lenght of a string?
 2020-07-25 00:26:58,380 - DEBUG -  len(mystring) is 5
 2020-07-25 00:26:58,380 - DEBUG - 27748 }
 2020-07-25 00:26:58,380 - DEBUG - 27790 }
 2020-07-25 00:26:58,380 - DEBUG - 27877 }
 2020-07-25 00:26:58,380 - DEBUG - python-datatypes-strings-6
 2020-07-25 00:26:58,380 - DEBUG -  How do you merge two strings?
 2020-07-25 00:26:58,380 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-07-25 00:26:58,381 - DEBUG - 27912 }
 2020-07-25 00:26:58,381 - DEBUG - 27961 }
 2020-07-25 00:26:58,381 - DEBUG - 28039 }
 2020-07-25 00:26:58,381 - DEBUG - python-datatypes-strings-7
 2020-07-25 00:26:58,381 - DEBUG -  How do you use a number in a string?
 2020-07-25 00:26:58,381 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-07-25 00:26:58,381 - DEBUG - 28074 }
 2020-07-25 00:26:58,381 - DEBUG - 28153 }
 2020-07-25 00:26:58,381 - DEBUG - 28184 }
 2020-07-25 00:26:58,381 - DEBUG - python-datatypes-strings-8
 2020-07-25 00:26:58,382 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-07-25 00:26:58,382 - DEBUG -  mystring.split(',')
 2020-07-25 00:26:58,382 - DEBUG - 28217 }
 2020-07-25 00:26:58,382 - DEBUG - 28272 }
 2020-07-25 00:26:58,382 - DEBUG - 28300 }
 2020-07-25 00:26:58,382 - DEBUG - python-datatypes-strings-9
 2020-07-25 00:26:58,382 - DEBUG -  How do you trim white space from a string?
 2020-07-25 00:26:58,382 - DEBUG -  mystring.strip()
 2020-07-25 00:26:58,382 - DEBUG - 28334 }
 2020-07-25 00:26:58,382 - DEBUG - 28394 }
 2020-07-25 00:26:58,383 - DEBUG - 28446 }
 2020-07-25 00:26:58,383 - DEBUG - python-datatypes-strings-10
 2020-07-25 00:26:58,383 - DEBUG -  How do you convert a string to an int or float?
 2020-07-25 00:26:58,383 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-07-25 00:26:58,383 - DEBUG - 28479 }
 2020-07-25 00:26:58,383 - DEBUG - 28525 }
 2020-07-25 00:26:58,383 - DEBUG - 28640 }
 2020-07-25 00:26:58,383 - DEBUG - python-datatypes-numbers-1
 2020-07-25 00:26:58,383 - DEBUG -  Describe types of python numbers.
 2020-07-25 00:26:58,383 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-07-25 00:26:58,383 - DEBUG - 28673 }
 2020-07-25 00:26:58,384 - DEBUG - 28745 }
 2020-07-25 00:26:58,384 - DEBUG - 28893 }
 2020-07-25 00:26:58,384 - DEBUG - python-datatypes-numbers-2
 2020-07-25 00:26:58,384 - DEBUG -  How do you work with really precise real numbers in python?
 2020-07-25 00:26:58,384 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-07-25 00:26:58,384 - DEBUG - 28926 }
 2020-07-25 00:26:58,384 - DEBUG - 29001 }
 2020-07-25 00:26:58,384 - DEBUG - 29095 }
 2020-07-25 00:26:58,385 - DEBUG - python-datatypes-numbers-3
 2020-07-25 00:26:58,385 - DEBUG -  How can you work with say fractional measurements with python?
 2020-07-25 00:26:58,385 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-07-25 00:26:58,385 - DEBUG - 29128 }
 2020-07-25 00:26:58,385 - DEBUG - 29179 }
 2020-07-25 00:26:58,385 - DEBUG - 29201 }
 2020-07-25 00:26:58,385 - DEBUG - python-datatypes-numbers-4
 2020-07-25 00:26:58,385 - DEBUG -  How do the absolute value of a number?
 2020-07-25 00:26:58,385 - DEBUG -  abs(mynum)
 2020-07-25 00:26:58,386 - DEBUG - 29234 }
 2020-07-25 00:26:58,386 - DEBUG - 29284 }
 2020-07-25 00:26:58,386 - DEBUG - 29313 }
 2020-07-25 00:26:58,386 - DEBUG - python-datatypes-numbers-5
 2020-07-25 00:26:58,386 - DEBUG -  How do you raise a number to a power?
 2020-07-25 00:26:58,386 - DEBUG -  pow(power,number)
 2020-07-25 00:26:58,386 - DEBUG - 29346 }
 2020-07-25 00:26:58,386 - DEBUG - 29390 }
 2020-07-25 00:26:58,386 - DEBUG - 29426 }
 2020-07-25 00:26:58,386 - DEBUG - python-datatypes-numbers-6
 2020-07-25 00:26:58,387 - DEBUG -  How do you round a real number?
 2020-07-25 00:26:58,387 - DEBUG -  round(num,decimalplaces)
 2020-07-25 00:26:58,387 - DEBUG - 29459 }
 2020-07-25 00:26:58,387 - DEBUG - 29513 }
 2020-07-25 00:26:58,387 - DEBUG - 29681 }
 2020-07-25 00:26:58,387 - DEBUG - python-datatypes-numbers-7
 2020-07-25 00:26:58,387 - DEBUG -  Whats involved in getting random numbers?
 2020-07-25 00:26:58,387 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-07-25 00:26:58,387 - DEBUG - 29695 }
 2020-07-25 00:26:58,387 - DEBUG - 29768 }
 2020-07-25 00:26:58,388 - DEBUG - 29837 }
 2020-07-25 00:26:58,388 - DEBUG - uml-1
 2020-07-25 00:26:58,388 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-07-25 00:26:58,388 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-07-25 00:26:58,388 - DEBUG - 29848 }
 2020-07-25 00:26:58,388 - DEBUG - 29892 }
 2020-07-25 00:26:58,388 - DEBUG - 29989 }
 2020-07-25 00:26:58,388 - DEBUG - uml-2
 2020-07-25 00:26:58,388 - DEBUG -  What is an interaction diagram?
 2020-07-25 00:26:58,388 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-07-25 00:26:58,388 - DEBUG - 30000 }
 2020-07-25 00:26:58,389 - DEBUG - 30041 }
 2020-07-25 00:26:58,389 - DEBUG - 30351 }
 2020-07-25 00:26:58,389 - DEBUG - uml-3
 2020-07-25 00:26:58,389 - DEBUG -  What is a structure diagram?
 2020-07-25 00:26:58,389 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-07-25 00:26:58,389 - DEBUG - 30362 }
 2020-07-25 00:26:58,389 - DEBUG - 30402 }
 2020-07-25 00:26:58,389 - DEBUG - 30516 }
 2020-07-25 00:26:58,390 - DEBUG - uml-4
 2020-07-25 00:26:58,390 - DEBUG -  What is a behavior diagram?
 2020-07-25 00:26:58,390 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-07-25 00:26:58,390 - DEBUG - 30537 }
 2020-07-25 00:26:58,390 - DEBUG - 30588 }
 2020-07-25 00:26:58,390 - DEBUG - 30670 }
 2020-07-25 00:26:58,390 - DEBUG - uml-structure-1
 2020-07-25 00:26:58,390 - DEBUG -  Name the seven UML structure diagrams.
 2020-07-25 00:26:58,390 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-07-25 00:26:58,390 - DEBUG - 30690 }
 2020-07-25 00:26:58,391 - DEBUG - 30755 }
 2020-07-25 00:26:58,391 - DEBUG - 30815 }
 2020-07-25 00:26:58,391 - DEBUG - uml-behavior-1
 2020-07-25 00:26:58,391 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-07-25 00:26:58,391 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-07-25 00:26:58,391 - DEBUG - 30838 }
 2020-07-25 00:26:58,391 - DEBUG - 30895 }
 2020-07-25 00:26:58,391 - DEBUG - 30960 }
 2020-07-25 00:26:58,392 - DEBUG - uml-interaction-1
 2020-07-25 00:26:58,392 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-07-25 00:26:58,392 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-07-25 00:26:58,392 - DEBUG - 30971 }
 2020-07-25 00:26:58,392 - DEBUG - 31015 }
 2020-07-25 00:26:58,392 - DEBUG - 31049 }
 2020-07-25 00:26:58,392 - DEBUG - uml-2
 2020-07-25 00:26:58,392 - DEBUG -  How many uml digrams are there?
 2020-07-25 00:26:58,392 - DEBUG -  Around 14 give or take.
 2020-07-25 00:26:58,392 - DEBUG - 31070 }
 2020-07-25 00:26:58,392 - DEBUG - 31121 }
 2020-07-25 00:26:58,393 - DEBUG - 31369 }
 2020-07-25 00:26:58,393 - DEBUG - uml-structure-2
 2020-07-25 00:26:58,393 - DEBUG -  Describe the structure Package diagram
 2020-07-25 00:26:58,393 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-07-25 00:26:58,393 - DEBUG - 31390 }
 2020-07-25 00:26:58,393 - DEBUG - 31440 }
 2020-07-25 00:26:58,393 - DEBUG - 31713 }
 2020-07-25 00:26:58,394 - DEBUG - uml-structure-3
 2020-07-25 00:26:58,394 - DEBUG -  Describe the structure Class diagram.
 2020-07-25 00:26:58,394 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-07-25 00:26:58,394 - DEBUG - 31734 }
 2020-07-25 00:26:58,394 - DEBUG - 31785 }
 2020-07-25 00:26:58,394 - DEBUG - 31919 }
 2020-07-25 00:26:58,394 - DEBUG - uml-structure-4
 2020-07-25 00:26:58,394 - DEBUG -  Describe the structure Object diagram.
 2020-07-25 00:26:58,394 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-07-25 00:26:58,394 - DEBUG - 31940 }
 2020-07-25 00:26:58,395 - DEBUG - 31994 }
 2020-07-25 00:26:58,395 - DEBUG - 32246 }
 2020-07-25 00:26:58,396 - DEBUG - uml-structure-5
 2020-07-25 00:26:58,396 - DEBUG -  Describe the structure Component diagram.
 2020-07-25 00:26:58,396 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-07-25 00:26:58,396 - DEBUG - 32267 }
 2020-07-25 00:26:58,396 - DEBUG - 32321 }
 2020-07-25 00:26:58,396 - DEBUG - 32658 }
 2020-07-25 00:26:58,396 - DEBUG - uml-structure-6
 2020-07-25 00:26:58,396 - DEBUG -  Describe the structure Composite diagram.
 2020-07-25 00:26:58,397 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-07-25 00:26:58,397 - DEBUG - 32679 }
 2020-07-25 00:26:58,397 - DEBUG - 32736 }
 2020-07-25 00:26:58,397 - DEBUG - 32924 }
 2020-07-25 00:26:58,397 - DEBUG - uml-structure-7
 2020-07-25 00:26:58,397 - DEBUG -  Describe the structure Collaboration diagram
 2020-07-25 00:26:58,397 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-07-25 00:26:58,397 - DEBUG - 32945 }
 2020-07-25 00:26:58,398 - DEBUG - 33000 }
 2020-07-25 00:26:58,398 - DEBUG - 33308 }
 2020-07-25 00:26:58,398 - DEBUG - uml-structure-8
 2020-07-25 00:26:58,398 - DEBUG -  Describe the structure Deployment diagram.
 2020-07-25 00:26:58,398 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-07-25 00:26:58,398 - DEBUG - 33328 }
 2020-07-25 00:26:58,399 - DEBUG - 33380 }
 2020-07-25 00:26:58,399 - DEBUG - 33546 }
 2020-07-25 00:26:58,399 - DEBUG - uml-behavior-1
 2020-07-25 00:26:58,399 - DEBUG -  Describe the behavior Activity diagram.
 2020-07-25 00:26:58,399 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-07-25 00:26:58,399 - DEBUG - 33566 }
 2020-07-25 00:26:58,400 - DEBUG - 33618 }
 2020-07-25 00:26:58,400 - DEBUG - 33863 }
 2020-07-25 00:26:58,400 - DEBUG - uml-behavior-2
 2020-07-25 00:26:58,400 - DEBUG -  Describe the behavior Use Case diagram.
 2020-07-25 00:26:58,400 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-07-25 00:26:58,400 - DEBUG - 33883 }
 2020-07-25 00:26:58,400 - DEBUG - 33932 }
 2020-07-25 00:26:58,401 - DEBUG - 34238 }
 2020-07-25 00:26:58,401 - DEBUG - uml-behavior-3
 2020-07-25 00:26:58,401 - DEBUG -  Describe the behavior State diagram.
 2020-07-25 00:26:58,401 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-07-25 00:26:58,401 - DEBUG - 34261 }
 2020-07-25 00:26:58,401 - DEBUG - 34316 }
 2020-07-25 00:26:58,401 - DEBUG - 34474 }
 2020-07-25 00:26:58,401 - DEBUG - uml-interaction-2
 2020-07-25 00:26:58,402 - DEBUG -  Describe the interaction Sequence diagram.
 2020-07-25 00:26:58,402 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-07-25 00:26:58,402 - DEBUG - 34497 }
 2020-07-25 00:26:58,402 - DEBUG - 34550 }
 2020-07-25 00:26:58,402 - DEBUG - 34800 }
 2020-07-25 00:26:58,402 - DEBUG - uml-interaction-3
 2020-07-25 00:26:58,402 - DEBUG -  Describe the interaction Timing diagram.
 2020-07-25 00:26:58,402 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-07-25 00:26:58,402 - DEBUG - 34823 }
 2020-07-25 00:26:58,403 - DEBUG - 34884 }
 2020-07-25 00:26:58,403 - DEBUG - 35155 }
 2020-07-25 00:26:58,403 - DEBUG - uml-interaction-4
 2020-07-25 00:26:58,403 - DEBUG -  Describe the interaction Communications diagram.
 2020-07-25 00:26:58,403 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-07-25 00:26:58,403 - DEBUG - 35178 }
 2020-07-25 00:26:58,403 - DEBUG - 35245 }
 2020-07-25 00:26:58,404 - DEBUG - 35403 }
 2020-07-25 00:26:58,404 - DEBUG - uml-interaction-5
 2020-07-25 00:26:58,404 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-07-25 00:26:58,404 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-07-25 00:26:58,405 - DEBUG - algo_cards
 2020-07-25 00:26:58,405 - DEBUG - box1
 2020-07-25 00:26:58,415 - DEBUG - algo_cards
 2020-07-25 00:26:58,415 - DEBUG - box1
 2020-07-25 00:26:58,415 - DEBUG - box2
 2020-07-25 00:26:58,423 - DEBUG - algo_cards
 2020-07-25 00:26:58,423 - DEBUG - box1
 2020-07-25 00:26:58,423 - DEBUG - box2
 2020-07-25 00:26:58,423 - DEBUG - box3
 2020-07-25 00:26:58,432 - DEBUG - algo_cards
 2020-07-25 00:26:58,432 - DEBUG - box1
 2020-07-25 00:26:58,432 - DEBUG - box2
 2020-07-25 00:26:58,432 - DEBUG - box3
 2020-07-25 00:26:58,432 - DEBUG - box4
 2020-07-25 00:26:58,440 - DEBUG - algo_cards
 2020-07-25 00:26:58,440 - DEBUG - box1
 2020-07-25 00:26:58,440 - DEBUG - box2
 2020-07-25 00:26:58,441 - DEBUG - box3
 2020-07-25 00:26:58,441 - DEBUG - box4
 2020-07-25 00:26:58,441 - DEBUG - box5
 2020-07-25 00:26:58,442 - DEBUG - algo_cards
 2020-07-25 00:26:58,442 - DEBUG - box1
 2020-07-25 00:26:58,442 - DEBUG - box2
 2020-07-25 00:26:58,442 - DEBUG - box3
 2020-07-25 00:26:58,442 - DEBUG - box4
 2020-07-25 00:26:58,442 - DEBUG - box5
 2020-07-25 00:26:58,443 - DEBUG - box6
 2020-07-25 00:26:58,443 - DEBUG - finding test cycle file
 2020-07-25 00:26:58,443 - DEBUG - quizs\
 2020-07-25 00:26:58,443 - DEBUG - algo_cards.txt
 2020-07-25 00:26:58,443 - DEBUG - box1.txt
 2020-07-25 00:26:58,443 - DEBUG - box2.txt
 2020-07-25 00:26:58,444 - DEBUG - box3.txt
 2020-07-25 00:26:58,444 - DEBUG - box4.txt
 2020-07-25 00:26:58,444 - DEBUG - box5.txt
 2020-07-25 00:26:58,444 - DEBUG - box6.txt
 2020-07-25 00:26:58,444 - DEBUG - data_struct_cards.txt
 2020-07-25 00:26:58,444 - DEBUG - java
 2020-07-25 00:26:58,444 - DEBUG - javascript
 2020-07-25 00:26:58,444 - DEBUG - oop_cards.txt
 2020-07-25 00:26:58,444 - DEBUG - python_cards.txt
 2020-07-25 00:26:58,444 - DEBUG - quizs.bak
 2020-07-25 00:26:58,444 - DEBUG - study
 2020-07-25 00:26:58,444 - DEBUG - testcycle4.txt
 2020-07-25 00:26:58,444 - DEBUG - uml_cards.txt
 2020-07-25 00:26:58,445 - DEBUG - algo_cards
 2020-07-25 00:26:58,445 - DEBUG - box1
 2020-07-25 00:26:58,446 - DEBUG - box2
 2020-07-25 00:26:58,446 - DEBUG - box3
 2020-07-25 00:26:58,446 - DEBUG - box4
 2020-07-25 00:26:58,446 - DEBUG - box5
 2020-07-25 00:26:58,446 - DEBUG - box6
 2020-07-25 00:26:58,446 - DEBUG - data_struct_cards
 2020-07-25 00:26:58,446 - DEBUG - 
 2020-07-25 00:26:58,446 - DEBUG - javasc
 2020-07-25 00:26:58,446 - DEBUG - oop_cards
 2020-07-25 00:26:58,446 - DEBUG - python_cards
 2020-07-25 00:26:58,446 - DEBUG - quizs
 2020-07-25 00:26:58,446 - DEBUG - s
 2020-07-25 00:26:58,447 - DEBUG - testcycle4
 2020-07-25 00:26:58,447 - DEBUG - found testcycle4.txt
 2020-07-25 00:26:58,447 - DEBUG - testcycle4
 2020-07-25 00:26:58,447 - DEBUG - quizs\
 2020-07-25 00:26:58,455 - DEBUG - Cycle number 4
 2020-07-25 11:45:09,426 - DEBUG - Moving to Box
 2020-07-25 11:45:09,426 - DEBUG - Remove From Box
 2020-07-25 11:45:09,428 - DEBUG - Add To Box
 2020-07-25 11:45:09,429 - DEBUG - Remove From Test Cycle
 2020-07-25 11:45:09,430 - DEBUG - Save Test Cycle
 2020-07-27 10:44:59,626 - DEBUG - Moving to Box
 2020-07-27 10:44:59,627 - DEBUG - Remove From Box
 2020-07-27 10:44:59,639 - DEBUG - Add To Box
 2020-07-27 10:44:59,647 - DEBUG - Remove From Test Cycle
 2020-07-27 10:44:59,656 - DEBUG - Save Test Cycle
 2020-07-27 10:45:40,214 - DEBUG - Moving to Box
 2020-07-27 10:45:40,215 - DEBUG - Remove From Box
 2020-07-27 10:45:40,224 - DEBUG - Add To Box
 2020-07-27 10:45:40,233 - DEBUG - Remove From Test Cycle
 2020-07-27 10:45:40,241 - DEBUG - Save Test Cycle
 2020-07-27 10:46:53,778 - DEBUG - Moving to Box
 2020-07-27 10:46:53,778 - DEBUG - Remove From Box
 2020-07-27 10:46:53,788 - DEBUG - Add To Box
 2020-07-27 10:46:53,796 - DEBUG - Remove From Test Cycle
 2020-07-27 10:46:53,804 - DEBUG - Save Test Cycle
 2020-07-27 10:54:49,417 - DEBUG - Remove From Test Cycle
 2020-07-27 10:54:49,425 - DEBUG - Save Test Cycle
 2020-07-27 11:36:47,084 - DEBUG - Moving to Box
 2020-07-27 11:36:47,084 - DEBUG - Remove From Box
 2020-07-27 11:36:47,094 - DEBUG - Add To Box
 2020-07-27 11:36:47,102 - DEBUG - Remove From Test Cycle
 2020-07-27 11:36:47,110 - DEBUG - Save Test Cycle
 2020-07-27 11:39:29,324 - DEBUG - Moving to Box
 2020-07-27 11:39:29,325 - DEBUG - Remove From Box
 2020-07-27 11:39:29,333 - DEBUG - Add To Box
 2020-07-27 11:39:29,341 - DEBUG - Remove From Test Cycle
 2020-07-27 11:39:29,349 - DEBUG - Save Test Cycle
 2020-07-27 11:41:39,513 - DEBUG - Moving to Box
 2020-07-27 11:41:39,513 - DEBUG - Remove From Box
 2020-07-27 11:41:39,524 - DEBUG - Add To Box
 2020-07-27 11:41:39,532 - DEBUG - Remove From Test Cycle
 2020-07-27 11:41:39,540 - DEBUG - Save Test Cycle
 2020-07-27 11:42:14,098 - DEBUG - Moving to Box
 2020-07-27 11:42:14,098 - DEBUG - Remove From Box
 2020-07-27 11:42:14,108 - DEBUG - Add To Box
 2020-07-27 11:42:14,116 - DEBUG - Remove From Test Cycle
 2020-07-27 11:42:14,126 - DEBUG - Save Test Cycle
 2020-07-27 11:43:22,034 - DEBUG - Remove From Test Cycle
 2020-07-27 11:43:22,045 - DEBUG - Save Test Cycle
 2020-07-27 11:43:44,703 - DEBUG - Moving to Box
 2020-07-27 11:43:44,704 - DEBUG - Remove From Box
 2020-07-27 11:43:44,713 - DEBUG - Add To Box
 2020-07-27 11:43:44,721 - DEBUG - Remove From Test Cycle
 2020-07-27 11:43:44,729 - DEBUG - Save Test Cycle
 2020-07-27 11:50:14,196 - DEBUG - Moving to Box
 2020-07-27 11:50:14,196 - DEBUG - Remove From Box
 2020-07-27 11:50:14,208 - DEBUG - Add To Box
 2020-07-27 11:50:14,218 - DEBUG - Remove From Test Cycle
 2020-07-27 11:50:14,225 - DEBUG - Save Test Cycle
 2020-07-27 11:50:26,891 - DEBUG - Moving to Box
 2020-07-27 11:50:26,892 - DEBUG - Remove From Box
 2020-07-27 11:50:26,900 - DEBUG - Add To Box
 2020-07-27 11:50:26,908 - DEBUG - Remove From Test Cycle
 2020-07-27 11:50:26,916 - DEBUG - Save Test Cycle
 2020-07-27 11:52:14,896 - DEBUG - Moving to Box
 2020-07-27 11:52:14,896 - DEBUG - Remove From Box
 2020-07-27 11:52:14,905 - DEBUG - Add To Box
 2020-07-27 11:52:14,913 - DEBUG - Remove From Test Cycle
 2020-07-27 11:52:14,921 - DEBUG - Save Test Cycle
 2020-07-27 11:53:00,171 - DEBUG - Moving to Box
 2020-07-27 11:53:00,171 - DEBUG - Remove From Box
 2020-07-27 11:53:00,180 - DEBUG - Add To Box
 2020-07-27 11:53:00,188 - DEBUG - Remove From Test Cycle
 2020-07-27 11:53:00,196 - DEBUG - Save Test Cycle
 2020-07-27 11:53:51,683 - DEBUG - Moving to Box
 2020-07-27 11:53:51,684 - DEBUG - Remove From Box
 2020-07-27 11:53:51,694 - DEBUG - Add To Box
 2020-07-27 11:53:51,703 - DEBUG - Remove From Test Cycle
 2020-07-27 11:53:51,710 - DEBUG - Save Test Cycle
 2020-07-27 11:56:26,207 - DEBUG - Moving to Box
 2020-07-27 11:56:26,207 - DEBUG - Remove From Box
 2020-07-27 11:56:26,218 - DEBUG - Add To Box
 2020-07-27 11:56:26,225 - DEBUG - Remove From Test Cycle
 2020-07-27 11:56:26,233 - DEBUG - Save Test Cycle
 2020-07-27 12:01:19,772 - DEBUG - Moving to Box
 2020-07-27 12:01:19,772 - DEBUG - Remove From Box
 2020-07-27 12:01:19,780 - DEBUG - Add To Box
 2020-07-27 12:01:19,789 - DEBUG - Remove From Test Cycle
 2020-07-27 12:01:19,796 - DEBUG - Save Test Cycle
 2020-07-27 12:02:12,246 - DEBUG - Moving to Box
 2020-07-27 12:02:12,246 - DEBUG - Remove From Box
 2020-07-27 12:02:12,260 - DEBUG - Add To Box
 2020-07-27 12:02:12,268 - DEBUG - Remove From Test Cycle
 2020-07-27 12:02:12,276 - DEBUG - Save Test Cycle
 2020-07-27 12:02:33,123 - DEBUG - Remove From Test Cycle
 2020-07-27 12:02:33,131 - DEBUG - Save Test Cycle
 2020-07-27 12:02:51,615 - DEBUG - Moving to Box
 2020-07-27 12:02:51,615 - DEBUG - Remove From Box
 2020-07-27 12:02:51,623 - DEBUG - Add To Box
 2020-07-27 12:02:51,631 - DEBUG - Remove From Test Cycle
 2020-07-27 12:02:51,638 - DEBUG - Save Test Cycle
 2020-07-27 12:10:55,805 - DEBUG - Moving to Box
 2020-07-27 12:10:55,805 - DEBUG - Remove From Box
 2020-07-27 12:10:55,815 - DEBUG - Add To Box
 2020-07-27 12:10:55,823 - DEBUG - Remove From Test Cycle
 2020-07-27 12:10:55,831 - DEBUG - Save Test Cycle
 2020-07-27 12:11:43,760 - DEBUG - Moving to Box
 2020-07-27 12:11:43,760 - DEBUG - Remove From Box
 2020-07-27 12:11:43,768 - DEBUG - Add To Box
 2020-07-27 12:11:43,776 - DEBUG - Remove From Test Cycle
 2020-07-27 12:11:43,784 - DEBUG - Save Test Cycle
 2020-07-27 12:16:00,921 - DEBUG - Moving to Box
 2020-07-27 12:16:00,921 - DEBUG - Remove From Box
 2020-07-27 12:16:00,933 - DEBUG - Add To Box
 2020-07-27 12:16:00,944 - DEBUG - Remove From Test Cycle
 2020-07-27 12:16:00,953 - DEBUG - Save Test Cycle
 2020-07-27 12:17:21,349 - DEBUG - Moving to Box
 2020-07-27 12:17:21,349 - DEBUG - Remove From Box
 2020-07-27 12:17:21,358 - DEBUG - Add To Box
 2020-07-27 12:17:21,367 - DEBUG - Remove From Test Cycle
 2020-07-27 12:17:21,374 - DEBUG - Save Test Cycle
 2020-07-27 20:58:02,521 - DEBUG - Moving to Box
 2020-07-27 20:58:02,522 - DEBUG - Remove From Box
 2020-07-27 20:58:02,532 - DEBUG - Add To Box
 2020-07-27 20:58:02,540 - DEBUG - Remove From Test Cycle
 2020-07-27 20:58:02,549 - DEBUG - Save Test Cycle
 2020-07-27 20:59:01,419 - DEBUG - Moving to Box
 2020-07-27 20:59:01,419 - DEBUG - Remove From Box
 2020-07-27 20:59:01,427 - DEBUG - Add To Box
 2020-07-27 20:59:01,435 - DEBUG - Remove From Test Cycle
 2020-07-27 20:59:01,442 - DEBUG - Save Test Cycle
 2020-07-27 20:59:27,931 - DEBUG - Moving to Box
 2020-07-27 20:59:27,931 - DEBUG - Remove From Box
 2020-07-27 20:59:27,940 - DEBUG - Add To Box
 2020-07-27 20:59:27,949 - DEBUG - Remove From Test Cycle
 2020-07-27 20:59:27,956 - DEBUG - Save Test Cycle
 2020-07-27 21:00:11,077 - DEBUG - Remove From Test Cycle
 2020-07-27 21:00:11,087 - DEBUG - Save Test Cycle
 2020-07-27 21:01:16,782 - DEBUG - Remove From Test Cycle
 2020-07-27 21:01:16,792 - DEBUG - Save Test Cycle
 2020-07-27 21:07:39,047 - DEBUG - Moving to Box
 2020-07-27 21:07:39,047 - DEBUG - Remove From Box
 2020-07-27 21:07:39,057 - DEBUG - Add To Box
 2020-07-27 21:07:39,065 - DEBUG - Remove From Test Cycle
 2020-07-27 21:07:39,084 - DEBUG - Save Test Cycle
 2020-07-27 21:08:09,653 - DEBUG - Moving to Box
 2020-07-27 21:08:09,653 - DEBUG - Remove From Box
 2020-07-27 21:08:09,662 - DEBUG - Add To Box
 2020-07-27 21:08:09,670 - DEBUG - Remove From Test Cycle
 2020-07-27 21:08:09,677 - DEBUG - Save Test Cycle
 2020-07-27 21:09:45,576 - DEBUG - Moving to Box
 2020-07-27 21:09:45,576 - DEBUG - Remove From Box
 2020-07-27 21:09:45,585 - DEBUG - Add To Box
 2020-07-27 21:09:45,593 - DEBUG - Remove From Test Cycle
 2020-07-27 21:09:45,600 - DEBUG - Save Test Cycle
 2020-07-27 21:10:06,864 - DEBUG - Moving to Box
 2020-07-27 21:10:06,864 - DEBUG - Remove From Box
 2020-07-27 21:10:06,872 - DEBUG - Add To Box
 2020-07-27 21:10:06,881 - DEBUG - Remove From Test Cycle
 2020-07-27 21:10:06,888 - DEBUG - Save Test Cycle
 2020-07-27 21:20:33,053 - DEBUG - Moving to Box
 2020-07-27 21:20:33,053 - DEBUG - Remove From Box
 2020-07-27 21:20:33,063 - DEBUG - Add To Box
 2020-07-27 21:20:33,072 - DEBUG - Remove From Test Cycle
 2020-07-27 21:20:33,080 - DEBUG - Save Test Cycle
 2020-07-27 21:21:07,485 - DEBUG - Moving to Box
 2020-07-27 21:21:07,485 - DEBUG - Remove From Box
 2020-07-27 21:21:07,499 - DEBUG - Add To Box
 2020-07-27 21:21:07,507 - DEBUG - Remove From Test Cycle
 2020-07-27 21:21:07,515 - DEBUG - Save Test Cycle
 2020-07-27 21:22:28,692 - DEBUG - Moving to Box
 2020-07-27 21:22:28,692 - DEBUG - Remove From Box
 2020-07-27 21:22:28,708 - DEBUG - Add To Box
 2020-07-27 21:22:28,717 - DEBUG - Remove From Test Cycle
 2020-07-27 21:22:28,728 - DEBUG - Save Test Cycle
 2020-07-27 21:23:12,584 - DEBUG - Moving to Box
 2020-07-27 21:23:12,585 - DEBUG - Remove From Box
 2020-07-27 21:23:12,593 - DEBUG - Add To Box
 2020-07-27 21:23:12,602 - DEBUG - Remove From Test Cycle
 2020-07-27 21:23:12,609 - DEBUG - Save Test Cycle
 2020-07-27 21:23:58,267 - DEBUG - Moving to Box
 2020-07-27 21:23:58,267 - DEBUG - Remove From Box
 2020-07-27 21:23:58,281 - DEBUG - Add To Box
 2020-07-27 21:23:58,293 - DEBUG - Remove From Test Cycle
 2020-07-27 21:23:58,305 - DEBUG - Save Test Cycle
 2020-07-27 21:24:29,413 - DEBUG - Moving to Box
 2020-07-27 21:24:29,414 - DEBUG - Remove From Box
 2020-07-27 21:24:29,422 - DEBUG - Add To Box
 2020-07-27 21:24:29,431 - DEBUG - Remove From Test Cycle
 2020-07-27 21:24:29,438 - DEBUG - Save Test Cycle
 2020-07-27 21:25:22,931 - DEBUG - Moving to Box
 2020-07-27 21:25:22,931 - DEBUG - Remove From Box
 2020-07-27 21:25:22,940 - DEBUG - Add To Box
 2020-07-27 21:25:22,954 - DEBUG - Remove From Test Cycle
 2020-07-27 21:25:22,962 - DEBUG - Save Test Cycle
 2020-07-27 21:25:38,550 - DEBUG - Moving to Box
 2020-07-27 21:25:38,550 - DEBUG - Remove From Box
 2020-07-27 21:25:38,558 - DEBUG - Add To Box
 2020-07-27 21:25:38,567 - DEBUG - Remove From Test Cycle
 2020-07-27 21:25:38,579 - DEBUG - Save Test Cycle
 2020-07-27 21:26:24,603 - DEBUG - Remove From Test Cycle
 2020-07-27 21:26:24,610 - DEBUG - Save Test Cycle
 2020-07-27 21:27:53,421 - DEBUG - Moving to Box
 2020-07-27 21:27:53,421 - DEBUG - Remove From Box
 2020-07-27 21:27:53,431 - DEBUG - Add To Box
 2020-07-27 21:27:53,439 - DEBUG - Remove From Test Cycle
 2020-07-27 21:27:53,448 - DEBUG - Save Test Cycle
 2020-07-27 21:28:26,593 - DEBUG - Moving to Box
 2020-07-27 21:28:26,593 - DEBUG - Remove From Box
 2020-07-27 21:28:26,602 - DEBUG - Add To Box
 2020-07-27 21:28:26,611 - DEBUG - Remove From Test Cycle
 2020-07-27 21:28:26,618 - DEBUG - Save Test Cycle
 2020-08-05 23:52:35,649 - DEBUG - Remove From Test Cycle
 2020-08-05 23:52:35,660 - DEBUG - Save Test Cycle
 2020-08-05 23:54:01,818 - DEBUG - Moving to Box
 2020-08-05 23:54:01,819 - DEBUG - Remove From Box
 2020-08-05 23:54:01,832 - DEBUG - Add To Box
 2020-08-05 23:54:01,844 - DEBUG - Remove From Test Cycle
 2020-08-05 23:54:01,853 - DEBUG - Save Test Cycle
 2020-08-05 23:54:53,677 - DEBUG - Moving to Box
 2020-08-05 23:54:53,677 - DEBUG - Remove From Box
 2020-08-05 23:54:53,687 - DEBUG - Add To Box
 2020-08-05 23:54:53,695 - DEBUG - Remove From Test Cycle
 2020-08-05 23:54:53,702 - DEBUG - Save Test Cycle
 2020-08-05 23:55:13,813 - DEBUG - Moving to Box
 2020-08-05 23:55:13,813 - DEBUG - Remove From Box
 2020-08-05 23:55:13,823 - DEBUG - Add To Box
 2020-08-05 23:55:13,837 - DEBUG - Remove From Test Cycle
 2020-08-05 23:55:13,845 - DEBUG - Save Test Cycle
 2020-08-05 23:56:26,237 - DEBUG - Remove From Test Cycle
 2020-08-05 23:56:26,246 - DEBUG - Save Test Cycle
 2020-08-06 00:17:54,697 - DEBUG - Remove From Test Cycle
 2020-08-06 00:17:54,706 - DEBUG - Save Test Cycle
 2020-08-06 00:19:08,661 - DEBUG - Moving to Box
 2020-08-06 00:19:08,662 - DEBUG - Remove From Box
 2020-08-06 00:19:08,672 - DEBUG - Add To Box
 2020-08-06 00:19:08,682 - DEBUG - Remove From Test Cycle
 2020-08-06 00:19:08,689 - DEBUG - Save Test Cycle
 2020-08-06 01:22:19,275 - DEBUG - Remove From Test Cycle
 2020-08-06 01:22:19,283 - DEBUG - Save Test Cycle
 2020-08-06 01:22:34,484 - DEBUG - Remove From Test Cycle
 2020-08-06 01:22:34,492 - DEBUG - Save Test Cycle
 2020-08-06 01:23:10,828 - DEBUG - Remove From Test Cycle
 2020-08-06 01:23:10,842 - DEBUG - Save Test Cycle
 2020-08-06 01:24:29,803 - DEBUG - Moving to Box
 2020-08-06 01:24:29,803 - DEBUG - Remove From Box
 2020-08-06 01:24:29,814 - DEBUG - Add To Box
 2020-08-06 01:24:29,823 - DEBUG - Remove From Test Cycle
 2020-08-06 01:24:29,831 - DEBUG - Save Test Cycle
 2020-08-06 01:24:49,982 - DEBUG - Moving to Box
 2020-08-06 01:24:49,982 - DEBUG - Remove From Box
 2020-08-06 01:24:49,991 - DEBUG - Add To Box
 2020-08-06 01:24:49,999 - DEBUG - Remove From Test Cycle
 2020-08-06 01:24:50,006 - DEBUG - Save Test Cycle
 2020-08-06 01:25:47,978 - DEBUG - Remove From Test Cycle
 2020-08-06 01:25:47,987 - DEBUG - Save Test Cycle
 2020-08-06 01:25:58,357 - DEBUG - Moving to Box
 2020-08-06 01:25:58,358 - DEBUG - Remove From Box
 2020-08-06 01:25:58,366 - DEBUG - Add To Box
 2020-08-06 01:25:58,374 - DEBUG - Remove From Test Cycle
 2020-08-06 01:25:58,381 - DEBUG - Save Test Cycle
 2020-08-06 01:26:50,625 - DEBUG - Moving to Box
 2020-08-06 01:26:50,625 - DEBUG - Remove From Box
 2020-08-06 01:26:50,634 - DEBUG - Add To Box
 2020-08-06 01:26:50,642 - DEBUG - Remove From Test Cycle
 2020-08-06 01:26:50,650 - DEBUG - Save Test Cycle
 2020-08-06 01:27:58,033 - DEBUG - Remove From Test Cycle
 2020-08-06 01:27:58,043 - DEBUG - Save Test Cycle
 2020-08-06 01:28:58,189 - DEBUG - Moving to Box
 2020-08-06 01:28:58,189 - DEBUG - Remove From Box
 2020-08-06 01:28:58,201 - DEBUG - Add To Box
 2020-08-06 01:28:58,212 - DEBUG - Remove From Test Cycle
 2020-08-06 01:28:58,223 - DEBUG - Save Test Cycle
 2020-08-06 01:29:36,510 - DEBUG - Moving to Box
 2020-08-06 01:29:36,510 - DEBUG - Remove From Box
 2020-08-06 01:29:36,518 - DEBUG - Add To Box
 2020-08-06 01:29:36,526 - DEBUG - Remove From Test Cycle
 2020-08-06 01:29:36,533 - DEBUG - Save Test Cycle
 2020-08-06 01:29:44,111 - DEBUG - Moving to Box
 2020-08-06 01:29:44,111 - DEBUG - Remove From Box
 2020-08-06 01:29:44,119 - DEBUG - Add To Box
 2020-08-06 01:29:44,127 - DEBUG - Remove From Test Cycle
 2020-08-06 01:29:44,139 - DEBUG - Save Test Cycle
 2020-08-06 01:30:42,144 - DEBUG - Remove From Test Cycle
 2020-08-06 01:30:42,152 - DEBUG - Save Test Cycle
 2020-08-06 01:31:16,281 - DEBUG - Remove From Test Cycle
 2020-08-06 01:31:16,291 - DEBUG - Save Test Cycle
 2020-08-06 01:31:39,935 - DEBUG - Moving to Box
 2020-08-06 01:31:39,935 - DEBUG - Remove From Box
 2020-08-06 01:31:39,944 - DEBUG - Add To Box
 2020-08-06 01:31:39,952 - DEBUG - Remove From Test Cycle
 2020-08-06 01:31:39,960 - DEBUG - Save Test Cycle
 2020-08-06 01:38:00,865 - DEBUG - Moving to Box
 2020-08-06 01:38:00,866 - DEBUG - Remove From Box
 2020-08-06 01:38:00,875 - DEBUG - Add To Box
 2020-08-06 01:38:00,884 - DEBUG - Remove From Test Cycle
 2020-08-06 01:38:00,896 - DEBUG - Save Test Cycle
 2020-08-06 01:38:16,717 - DEBUG - Moving to Box
 2020-08-06 01:38:16,717 - DEBUG - Remove From Box
 2020-08-06 01:38:16,726 - DEBUG - Add To Box
 2020-08-06 01:38:16,734 - DEBUG - Remove From Test Cycle
 2020-08-06 01:38:16,741 - DEBUG - Save Test Cycle
 2020-08-06 01:42:08,863 - DEBUG - Moving to Box
 2020-08-06 01:42:08,863 - DEBUG - Remove From Box
 2020-08-06 01:42:08,874 - DEBUG - Add To Box
 2020-08-06 01:42:08,881 - DEBUG - Remove From Test Cycle
 2020-08-06 01:42:08,894 - DEBUG - Save Test Cycle
 2020-08-06 01:42:20,813 - DEBUG - Moving to Box
 2020-08-06 01:42:20,813 - DEBUG - Remove From Box
 2020-08-06 01:42:20,822 - DEBUG - Add To Box
 2020-08-06 01:42:20,830 - DEBUG - Remove From Test Cycle
 2020-08-06 01:42:20,837 - DEBUG - Save Test Cycle
 2020-08-06 01:42:42,386 - DEBUG - Moving to Box
 2020-08-06 01:42:42,386 - DEBUG - Remove From Box
 2020-08-06 01:42:42,395 - DEBUG - Add To Box
 2020-08-06 01:42:42,403 - DEBUG - Remove From Test Cycle
 2020-08-06 01:42:42,410 - DEBUG - Save Test Cycle
 2020-08-06 01:45:12,098 - DEBUG - Moving to Box
 2020-08-06 01:45:12,098 - DEBUG - Remove From Box
 2020-08-06 01:45:12,108 - DEBUG - Add To Box
 2020-08-06 01:45:12,116 - DEBUG - Remove From Test Cycle
 2020-08-06 01:45:12,123 - DEBUG - Save Test Cycle
 2020-08-06 01:46:22,766 - DEBUG - Moving to Box
 2020-08-06 01:46:22,766 - DEBUG - Remove From Box
 2020-08-06 01:46:22,776 - DEBUG - Add To Box
 2020-08-06 01:46:22,784 - DEBUG - Remove From Test Cycle
 2020-08-06 01:46:22,792 - DEBUG - Save Test Cycle
 2020-08-06 01:46:52,312 - DEBUG - Moving to Box
 2020-08-06 01:46:52,312 - DEBUG - Remove From Box
 2020-08-06 01:46:52,321 - DEBUG - Add To Box
 2020-08-06 01:46:52,329 - DEBUG - Remove From Test Cycle
 2020-08-06 01:46:52,336 - DEBUG - Save Test Cycle
 2020-08-06 01:57:22,353 - DEBUG - Moving to Box
 2020-08-06 01:57:22,353 - DEBUG - Remove From Box
 2020-08-06 01:57:22,365 - DEBUG - Add To Box
 2020-08-06 01:57:22,374 - DEBUG - Remove From Test Cycle
 2020-08-06 01:57:22,383 - DEBUG - Save Test Cycle
 2020-08-06 02:02:19,932 - DEBUG - Moving to Box
 2020-08-06 02:02:19,932 - DEBUG - Remove From Box
 2020-08-06 02:02:19,942 - DEBUG - Add To Box
 2020-08-06 02:02:19,950 - DEBUG - Remove From Test Cycle
 2020-08-06 02:02:19,957 - DEBUG - Save Test Cycle
 2020-08-06 02:10:22,667 - DEBUG - Remove From Test Cycle
 2020-08-06 02:10:22,678 - DEBUG - Save Test Cycle
 2020-08-06 02:11:00,686 - DEBUG - Moving to Box
 2020-08-06 02:11:00,686 - DEBUG - Remove From Box
 2020-08-06 02:11:00,695 - DEBUG - Add To Box
 2020-08-06 02:11:00,703 - DEBUG - Remove From Test Cycle
 2020-08-06 02:11:00,710 - DEBUG - Save Test Cycle
 2020-08-06 02:11:11,115 - DEBUG - Moving to Box
 2020-08-06 02:11:11,115 - DEBUG - Remove From Box
 2020-08-06 02:11:11,123 - DEBUG - Add To Box
 2020-08-06 02:11:11,131 - DEBUG - Remove From Test Cycle
 2020-08-06 02:11:11,138 - DEBUG - Save Test Cycle
 2020-08-29 18:57:43,579 - DEBUG - Remove From Test Cycle
 2020-08-29 18:57:43,613 - DEBUG - Save Test Cycle
 2020-08-29 21:04:44,373 - DEBUG - Moving to Box
 2020-08-29 21:04:44,375 - DEBUG - Remove From Box
 2020-08-29 21:04:44,396 - DEBUG - Add To Box
 2020-08-29 21:04:44,408 - DEBUG - Remove From Test Cycle
 2020-08-29 21:04:44,419 - DEBUG - Save Test Cycle
 2020-08-30 01:16:46,727 - DEBUG - Moving to Box
 2020-08-30 01:16:46,729 - DEBUG - Remove From Box
 2020-08-30 01:16:46,753 - DEBUG - Add To Box
 2020-08-30 01:16:46,767 - DEBUG - Remove From Test Cycle
 2020-08-30 01:16:46,778 - DEBUG - Save Test Cycle
 2020-08-30 23:46:20,815 - DEBUG - Moving to Box
 2020-08-30 23:46:20,820 - DEBUG - Remove From Box
 2020-08-30 23:46:20,845 - DEBUG - Add To Box
 2020-08-30 23:46:20,859 - DEBUG - Remove From Test Cycle
 2020-08-30 23:46:20,874 - DEBUG - Save Test Cycle
 2020-09-02 00:35:32,563 - DEBUG - Moving to Box
 2020-09-02 00:35:32,568 - DEBUG - Remove From Box
 2020-09-02 00:35:32,607 - DEBUG - Add To Box
 2020-09-02 00:35:32,639 - DEBUG - Remove From Test Cycle
 2020-09-02 00:35:32,664 - DEBUG - Save Test Cycle
 2020-09-03 00:31:18,345 - DEBUG - Remove From Test Cycle
 2020-09-03 00:31:18,362 - DEBUG - Save Test Cycle
 2020-11-24 23:38:07,686 - DEBUG - Start of Logging Leitner Module
 2020-11-24 23:38:07,686 - INFO - Leitner modules are methods and classes that support the quiz.py app.
 2020-11-24 23:38:07,686 - INFO - This is a efficient learning method. Google or Wiki Leitner Learning System.
 2020-11-24 23:38:07,686 - INFO - This is where you are tested more often on things you get wrong and less often
 2020-11-24 23:38:07,686 - INFO - on things you get right.
 2020-11-24 23:38:07,787 - DEBUG - C:\dev2\github\python\quiz
 2020-11-24 23:38:07,787 - DEBUG - 15 }
 2020-11-24 23:38:07,787 - DEBUG - 57 }
 2020-11-24 23:38:07,787 - DEBUG - 225 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-1
 2020-11-24 23:38:07,787 - DEBUG -  What is algorithm efficiency?
 2020-11-24 23:38:07,787 - DEBUG -  This is described as time or space complexity. It's asymtotic meaning calculated as aproaching infinity. It's based on number of input items described as N.
 2020-11-24 23:38:07,787 - DEBUG - 242 }
 2020-11-24 23:38:07,787 - DEBUG - 324 }
 2020-11-24 23:38:07,787 - DEBUG - 403 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-2
 2020-11-24 23:38:07,787 - DEBUG -  What are three types of functions that desbribe algorithm complexity?
 2020-11-24 23:38:07,787 - DEBUG -  Big O(worst case), Big Omega(best case) and Big Theta(average case).
 2020-11-24 23:38:07,787 - DEBUG - 420 }
 2020-11-24 23:38:07,787 - DEBUG - 502 }
 2020-11-24 23:38:07,787 - DEBUG - 531 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-3
 2020-11-24 23:38:07,787 - DEBUG -  What is a 4th type of function used to describe algorithm complexity?
 2020-11-24 23:38:07,787 - DEBUG -  Little O notation.
 2020-11-24 23:38:07,787 - DEBUG - 554 }
 2020-11-24 23:38:07,787 - DEBUG - 597 }
 2020-11-24 23:38:07,787 - DEBUG - 846 }
 2020-11-24 23:38:07,787 - DEBUG - alogorithm-bigo-1
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(1) time complexity.
 2020-11-24 23:38:07,787 - DEBUG -  Constant time complexity. The algorithm always has same value for N orotherwise uses same time to complete. A loop that always processes each of the 50 states willhave constant time complexity. Graphed this is a straght horizontal line.
 2020-11-24 23:38:07,787 - DEBUG - 868 }
 2020-11-24 23:38:07,787 - DEBUG - 911 }
 2020-11-24 23:38:07,787 - DEBUG - 1271 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-2
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(n) time complexity.
 2020-11-24 23:38:07,787 - DEBUG -  Linear time complexity. As number of input increases so does time, same amountof time for each input item. An example is a loop that may have any number of input items.A loop that processes people from all 50 states could grow infniitly over time as populationgrows. Linear Search is an example for this. Graphed this is a straight diagonal line.
 2020-11-24 23:38:07,787 - DEBUG - 1293 }
 2020-11-24 23:38:07,787 - DEBUG - 1338 }
 2020-11-24 23:38:07,787 - DEBUG - 1581 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-3
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(n^2) time complexity.
 2020-11-24 23:38:07,787 - DEBUG -  Quadratic time complexity. This is like a loop within a loop. But could alsobe a recursive time complexity such as in QuickSort worst case. Same for Bubble sort.Graphed this is a curved line that is quickly steaper to straight up.
 2020-11-24 23:38:07,787 - DEBUG - 1603 }
 2020-11-24 23:38:07,787 - DEBUG - 1650 }
 2020-11-24 23:38:07,787 - DEBUG - 1941 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-4
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(log n) time complexity.
 2020-11-24 23:38:07,787 - DEBUG -  Logorithmic time complexity. This describes algorithms that divide the problem in half oneach step such as Binary Search. Graphed this is a curved line that uses less time for larger N. So it curves quickly up in the beginning and is less steep moving to the right of the graph.
 2020-11-24 23:38:07,787 - DEBUG - 1963 }
 2020-11-24 23:38:07,787 - DEBUG - 2008 }
 2020-11-24 23:38:07,787 - DEBUG - 2088 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-5
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(n^c) time complexity.
 2020-11-24 23:38:07,787 - DEBUG -  Polynomial or Algerbaic, Tree adjoining grammer or parsing. No Graph.
 2020-11-24 23:38:07,787 - DEBUG - 2110 }
 2020-11-24 23:38:07,787 - DEBUG - 2155 }
 2020-11-24 23:38:07,787 - DEBUG - 2250 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-6
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(c^n) time complexity.
 2020-11-24 23:38:07,787 - DEBUG -  Exponential. Graph curvs upward very quickly. Example is traveling salesman problem.
 2020-11-24 23:38:07,787 - DEBUG - 2272 }
 2020-11-24 23:38:07,787 - DEBUG - 2321 }
 2020-11-24 23:38:07,787 - DEBUG - 2517 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-7
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(n log n) time complexity.
 2020-11-24 23:38:07,787 - DEBUG -  Linearithmic, Loglinear or Quasilinear or simply n log n. Examplesare fastes comparison sort, heap sort and merge sort. Graphs almost like Linear with slightcurve upward in beginning.
 2020-11-24 23:38:07,787 - DEBUG - 2539 }
 2020-11-24 23:38:07,787 - DEBUG - 2606 }
 2020-11-24 23:38:07,787 - DEBUG - 2693 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-8
 2020-11-24 23:38:07,787 - DEBUG -  Describe O(n^c) time complexity where c > 0 and c < 1.
 2020-11-24 23:38:07,787 - DEBUG -  Fractional Power. Example searching in a K-D Tree or multi-dimentional tree.
 2020-11-24 23:38:07,787 - DEBUG - 2715 }
 2020-11-24 23:38:07,787 - DEBUG - 2765 }
 2020-11-24 23:38:07,787 - DEBUG - 2893 }
 2020-11-24 23:38:07,787 - DEBUG - algorithm-bigo-9
 2020-11-24 23:38:07,803 - DEBUG -  Describe O(n log* n) time complexity.
 2020-11-24 23:38:07,803 - DEBUG -  Called n log star n.  Example is triangulation of a simple polygon using Seidel's algorithm.Or union find algorithm.
 2020-11-24 23:38:07,803 - DEBUG - 2915 }
 2020-11-24 23:38:07,803 - DEBUG - 2959 }
 2020-11-24 23:38:07,803 - DEBUG - 3176 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-9
 2020-11-24 23:38:07,803 - DEBUG -  Describe O(n!) time complexity.
 2020-11-24 23:38:07,803 - DEBUG -  Factorial. Bogo Sort.  Enumerating all partitions of a set. Generating all unrestricted permutations of a poset. The slowest algorithm there is. This graph curves upward more quickly than other functions.
 2020-11-24 23:38:07,803 - DEBUG - 3199 }
 2020-11-24 23:38:07,803 - DEBUG - 3250 }
 2020-11-24 23:38:07,803 - DEBUG - 3415 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-10
 2020-11-24 23:38:07,803 - DEBUG -  Describe O(log log n) time complexity.
 2020-11-24 23:38:07,803 - DEBUG -  Double Logorithmic. Example is number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values.
 2020-11-24 23:38:07,803 - DEBUG - 3438 }
 2020-11-24 23:38:07,803 - DEBUG - 3493 }
 2020-11-24 23:38:07,803 - DEBUG - 3618 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-11
 2020-11-24 23:38:07,803 - DEBUG -  Describe O((log n)^c) c>1 time complexity.
 2020-11-24 23:38:07,803 - DEBUG -  Polylogorithmic. Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.
 2020-11-24 23:38:07,803 - DEBUG - 3641 }
 2020-11-24 23:38:07,803 - DEBUG - 3686 }
 2020-11-24 23:38:07,803 - DEBUG - 3838 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-12
 2020-11-24 23:38:07,803 - DEBUG -  Describe O(n^3) time complexity.
 2020-11-24 23:38:07,803 - DEBUG -  Cubic. Naive multiplication of two n√ón matrices. Calculating partial correlation. Processing a 3D data structure. Loop in a loop in a loop.
 2020-11-24 23:38:07,803 - DEBUG - 3861 }
 2020-11-24 23:38:07,803 - DEBUG - 3916 }
 2020-11-24 23:38:07,803 - DEBUG - 4018 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-13
 2020-11-24 23:38:07,803 - DEBUG -  What is the rule about constants in Big O?
 2020-11-24 23:38:07,803 - DEBUG -  Constant factors O(1) in code are ignored only code that equates to a function is accepted.
 2020-11-24 23:38:07,803 - DEBUG - 4041 }
 2020-11-24 23:38:07,803 - DEBUG - 4094 }
 2020-11-24 23:38:07,803 - DEBUG - 4229 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-14
 2020-11-24 23:38:07,803 - DEBUG -  What is the transivtivity rule in Big O?
 2020-11-24 23:38:07,803 - DEBUG -  If function h(n) grows at most as fast as g(n), which grows at most as fast as f(n), then h(n)grows at most as fast as f(n)
 2020-11-24 23:38:07,803 - DEBUG - 4252 }
 2020-11-24 23:38:07,803 - DEBUG - 4299 }
 2020-11-24 23:38:07,803 - DEBUG - 4365 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-15
 2020-11-24 23:38:07,803 - DEBUG -  What is the rule of sums in Big O?
 2020-11-24 23:38:07,803 - DEBUG -  The sum of functions grows as its fastest-growing term.
 2020-11-24 23:38:07,803 - DEBUG - 4388 }
 2020-11-24 23:38:07,803 - DEBUG - 4439 }
 2020-11-24 23:38:07,803 - DEBUG - 4545 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-16
 2020-11-24 23:38:07,803 - DEBUG -  What is the rule of products in Big O?
 2020-11-24 23:38:07,803 - DEBUG -  The product of upper bounds of functions gives an upper bound for the product of the functions.
 2020-11-24 23:38:07,803 - DEBUG - 4568 }
 2020-11-24 23:38:07,803 - DEBUG - 4613 }
 2020-11-24 23:38:07,803 - DEBUG - 4720 }
 2020-11-24 23:38:07,803 - DEBUG - algorithm-bigo-17
 2020-11-24 23:38:07,803 - DEBUG -  What is the limit rule in Big O?
 2020-11-24 23:38:07,803 - DEBUG -  Didn't understand this one. A limit might be calculated with calculus under certain situations.
 2020-11-24 23:38:07,803 - DEBUG - 4742 }
 2020-11-24 23:38:07,803 - DEBUG - 4806 }
 2020-11-24 23:38:07,803 - DEBUG - 4927 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-1
 2020-11-24 23:38:07,803 - DEBUG -  What are the 3 most basic forms of data structures?
 2020-11-24 23:38:07,803 - DEBUG -  1. Bit (boolean) and Byte. 2. Primitives such as integer, real numbers and characters. 3. Strings and arrays.
 2020-11-24 23:38:07,803 - DEBUG - 4950 }
 2020-11-24 23:38:07,803 - DEBUG - 5021 }
 2020-11-24 23:38:07,803 - DEBUG - 5096 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-2
 2020-11-24 23:38:07,803 - DEBUG -  Name seven common names for main types of data structures.
 2020-11-24 23:38:07,803 - DEBUG -  Linked, List, Vector, Stack, Queue, Ditionary, Set, Tree, Graph.
 2020-11-24 23:38:07,803 - DEBUG - 5119 }
 2020-11-24 23:38:07,803 - DEBUG - 5169 }
 2020-11-24 23:38:07,803 - DEBUG - 5250 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-3
 2020-11-24 23:38:07,803 - DEBUG -  List kinds of Linked data structures.
 2020-11-24 23:38:07,803 - DEBUG -  Linked List, Double Linked List, Circularly Linked list, Trees, Graphs
 2020-11-24 23:38:07,803 - DEBUG - 5273 }
 2020-11-24 23:38:07,803 - DEBUG - 5344 }
 2020-11-24 23:38:07,803 - DEBUG - 5390 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-4
 2020-11-24 23:38:07,803 - DEBUG -  List alternative language names for Vector dat structures.
 2020-11-24 23:38:07,803 - DEBUG -  List, ArrayList, Tuple, Vector, Set
 2020-11-24 23:38:07,803 - DEBUG - 5413 }
 2020-11-24 23:38:07,803 - DEBUG - 5447 }
 2020-11-24 23:38:07,803 - DEBUG - 5479 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-5
 2020-11-24 23:38:07,803 - DEBUG -  List kinds of Queues.
 2020-11-24 23:38:07,803 - DEBUG -  Queue, Piority Queue.
 2020-11-24 23:38:07,803 - DEBUG - 5502 }
 2020-11-24 23:38:07,803 - DEBUG - 5553 }
 2020-11-24 23:38:07,803 - DEBUG - 5614 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-6
 2020-11-24 23:38:07,803 - DEBUG -  List alternate names for Dictionaries.
 2020-11-24 23:38:07,803 - DEBUG -  Dictionary, Hast Table, Hash Map, JavaScript Array
 2020-11-24 23:38:07,803 - DEBUG - 5637 }
 2020-11-24 23:38:07,803 - DEBUG - 5680 }
 2020-11-24 23:38:07,803 - DEBUG - 5746 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-7
 2020-11-24 23:38:07,803 - DEBUG -  List some main kinds of Trees.
 2020-11-24 23:38:07,803 - DEBUG -  Tree, B-Tree, Binary Tree, Balanced Tree, Document, DOM
 2020-11-24 23:38:07,803 - DEBUG - 5769 }
 2020-11-24 23:38:07,803 - DEBUG - 5829 }
 2020-11-24 23:38:07,803 - DEBUG - 5922 }
 2020-11-24 23:38:07,803 - DEBUG - data_structures-8
 2020-11-24 23:38:07,803 - DEBUG -  List types of arrays and array like structures.
 2020-11-24 23:38:07,803 - DEBUG -  Array, Multi-Dimensioned Array, Jagged Arrays, List, Tuple, Some Collections in c#
 2020-11-24 23:38:07,803 - DEBUG - 5945 }
 2020-11-24 23:38:07,803 - DEBUG - 6050 }
 2020-11-24 23:38:07,803 - DEBUG - 6359 }
 2020-11-24 23:38:07,818 - DEBUG - data_structures-9
 2020-11-24 23:38:07,818 - DEBUG -  Name and describe two important data structures that are basic building blocks in languages.
 2020-11-24 23:38:07,818 - DEBUG - Records and Objects. Both Records and Obects have fields that can be primitive data types, record orobject data types, and even functions (which is a type of object) in some languages. Object but not Recordshave functions called methods associated with it's data. Objects are defined by Classes.
 2020-11-24 23:38:07,818 - DEBUG - 6383 }
 2020-11-24 23:38:07,818 - DEBUG - 6428 }
 2020-11-24 23:38:07,818 - DEBUG - 6848 }
 2020-11-24 23:38:07,818 - DEBUG - data_structures-10
 2020-11-24 23:38:07,818 - DEBUG -  What is a linked data structure?
 2020-11-24 23:38:07,818 - DEBUG -  Linked data structures have nodes which contain pointers(references) to other nodes and data. Nodes can haveforward and backward pointers or upward and downward pointers. Trees can have list of nodes called siblings.A list can have a front node and back node, next node and previous node. Trees can have root, child and parent nodes, ansetor and decendents. A graph has vertices nodes, neighbors and edges.
 2020-11-24 23:38:07,818 - DEBUG - 6872 }
 2020-11-24 23:38:07,818 - DEBUG - 6905 }
 2020-11-24 23:38:07,818 - DEBUG - 6937 }
 2020-11-24 23:38:07,818 - DEBUG - data_structures-11
 2020-11-24 23:38:07,818 - DEBUG -  List kinds of Graphs
 2020-11-24 23:38:07,818 - DEBUG -  Graph and Scene Graph
 2020-11-24 23:38:07,818 - DEBUG - 6961 }
 2020-11-24 23:38:07,818 - DEBUG - 6988 }
 2020-11-24 23:38:07,823 - DEBUG - 7456 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-12
 2020-11-24 23:38:07,823 - DEBUG -  Describe List.
 2020-11-24 23:38:07,823 - DEBUG -  List data can be accesed by element number like an array with set(index,object) and object get(index).List also has behavior for adding to the end of list, getting size of list, removing(index) itemfrom list. List may have a way to search list for object and sort list. List can add other listand remove another list of items from the list. Vectors an list are almost the same thing. A set is a list with no duplicates. Can be array or LinkedList based.
 2020-11-24 23:38:07,823 - DEBUG - 7480 }
 2020-11-24 23:38:07,823 - DEBUG - 7511 }
 2020-11-24 23:38:07,823 - DEBUG - 7625 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-13
 2020-11-24 23:38:07,823 - DEBUG -  Describe a Vector.
 2020-11-24 23:38:07,823 - DEBUG -  Another name for List. See list Description. Vectors or List can be based on LinkedList orarray based.
 2020-11-24 23:38:07,823 - DEBUG - 7649 }
 2020-11-24 23:38:07,823 - DEBUG - 7675 }
 2020-11-24 23:38:07,823 - DEBUG - 7840 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-14
 2020-11-24 23:38:07,823 - DEBUG -  Describe Set.
 2020-11-24 23:38:07,823 - DEBUG -  A list with no duplicates. Sets have operations like union, intersection, differenceand subset. A HashSet is like a Dictionary with unique value entries.
 2020-11-24 23:38:07,823 - DEBUG - 7864 }
 2020-11-24 23:38:07,823 - DEBUG - 7894 }
 2020-11-24 23:38:07,823 - DEBUG - 8360 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-15
 2020-11-24 23:38:07,823 - DEBUG -  Describe a Stack.
 2020-11-24 23:38:07,823 - DEBUG -  A stack has push and pop methods to add values to the top of the stack. Imagine ofcourse processing an inbox for paperwork on your desk where you always work the papers lastplaced on top. This is also called LIFO or last in first out. Call stack is common application.When you get an exception the error message wiil list a call stack trace. Called unwiding thestack. Stack overflow is where you fill the stack up so much you run out of memory for it.
 2020-11-24 23:38:07,823 - DEBUG - 8384 }
 2020-11-24 23:38:07,823 - DEBUG - 8414 }
 2020-11-24 23:38:07,823 - DEBUG - 8949 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-16
 2020-11-24 23:38:07,823 - DEBUG -  Describe a queue.
 2020-11-24 23:38:07,823 - DEBUG -  A queue is a list that is FIFO or first in first out. It's like working from the bottom of the Stack. A common example would be a keyboard Queue. As characters come in thelist builds and as your software gets time it pulls characters that first to come into the queue.A priority queue is like the system process or thread processing. Each process or thread mightbe given a level. Higher priority is given processor timeslice until that queue is empty, then lower pirority. Priority queue is really like multiple queues.
 2020-11-24 23:38:07,823 - DEBUG - 8973 }
 2020-11-24 23:38:07,823 - DEBUG - 9008 }
 2020-11-24 23:38:07,823 - DEBUG - 9456 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-17
 2020-11-24 23:38:07,823 - DEBUG -  Describe a Dictionary.
 2020-11-24 23:38:07,823 - DEBUG -  Also called HashTable or HashMap or perhaps Map. These store key,value pairs. They are very efficientat adding to the storage or retrieving. These cards in this Leitner app are stored ina dictionary. JavaScript arrays become a Dictionary if you use non numeric indexes. These may have set(key,value) or value get(key) behavior. In some languages the key is the index ofthe array or list. Should be able to get list of keys or values.
 2020-11-24 23:38:07,823 - DEBUG - 9480 }
 2020-11-24 23:38:07,823 - DEBUG - 9525 }
 2020-11-24 23:38:07,823 - DEBUG - 10271 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-18
 2020-11-24 23:38:07,823 - DEBUG -  Describe a Tree data structures.
 2020-11-24 23:38:07,823 - DEBUG -  Trees have a root, branches and leaves. Each branch can have one, two or more branches. a node has no branches its called a leaf. Nodes are named as root, child, parent, sibling, ancestors and decedents. A common tree structure is the file system on any computer. There are many kinds of trees in coding such as Trees, B-Trees and Binary Trees. If you  get a tree such as an xml or html document the root node is returned. Trees have getChildren() getParent(), getSiblngs(), addChild() behavior. Might have getLeftChild() addLeftChild()  getRightChild() addRightChild(). A child node is a root for all of its decendents. A  child node might be a leaf node if it has no decendents. A child node might have removeNode() behavior.
 2020-11-24 23:38:07,823 - DEBUG - 10295 }
 2020-11-24 23:38:07,823 - DEBUG - 10325 }
 2020-11-24 23:38:07,823 - DEBUG - 10932 }
 2020-11-24 23:38:07,823 - DEBUG - data_structures-19
 2020-11-24 23:38:07,823 - DEBUG -  Describe a Graph.
 2020-11-24 23:38:07,823 - DEBUG -  Graphs have edges, vertices and neihbors. Nodes are vertices andneighbors. In a graph any node can be a neighbor of any other node. I would have called this data structure a Net or Network. Examples are the power grid system,the internet, or our highway system. Could even be three dimensional in somethinglike a cave system. Games and JavaFX uses a Scene Graph. In javafx it is called a graph,but it seems to me to be more of a composition or Tree. Graphs have addVertex() removeVertex()addEdge() removeEdge() behavior. Also getEdgeValue() getVertexValue() adjacent() neighbor() behavior.
 2020-11-24 23:38:07,823 - DEBUG - 10960 }
 2020-11-24 23:38:07,823 - DEBUG - 11042 }
 2020-11-24 23:38:07,839 - DEBUG - 11361 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-java-1
 2020-11-24 23:38:07,839 - DEBUG -  List some Java Integer Primitives and describe their possible values.
 2020-11-24 23:38:07,839 - DEBUG -  byte, char, short int, int, long int. Byte 1 byte is -128 to 127. char 2 bytes is 0 to 65535.short 2 bytes is -32,768 to 32,767. int 4 bytes is around +/- 2 million. long 8 bytes is around +/- 9 Million Trillion. Java also has an object for BigInteger that willhandle any size integer up to available ram.
 2020-11-24 23:38:07,839 - DEBUG - 11389 }
 2020-11-24 23:38:07,839 - DEBUG - 11460 }
 2020-11-24 23:38:07,839 - DEBUG - 11641 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-java-2
 2020-11-24 23:38:07,839 - DEBUG -  List Java Real numbers and describe their possible values.
 2020-11-24 23:38:07,839 - DEBUG -  float and double. float 4 bytes is signed real 6-7 significant digits  ¬±3.40282347E+38F .double 8 bytes is signed real 15 significant digits  ¬±1.79769313486231570E+308
 2020-11-24 23:38:07,839 - DEBUG - 11669 }
 2020-11-24 23:38:07,839 - DEBUG - 11714 }
 2020-11-24 23:38:07,839 - DEBUG - 11877 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-java-3
 2020-11-24 23:38:07,839 - DEBUG -  Describe java boolean primitive.
 2020-11-24 23:38:07,839 - DEBUG -  Stored in 1 byte but JVM dependent, true or false value. BitSet is anobject for working with bit size values. Called flags in some programming context.
 2020-11-24 23:38:07,839 - DEBUG - 11905 }
 2020-11-24 23:38:07,839 - DEBUG - 11943 }
 2020-11-24 23:38:07,839 - DEBUG - 12272 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-java-4
 2020-11-24 23:38:07,839 - DEBUG -  Describe java references.
 2020-11-24 23:38:07,839 - DEBUG -  References are like pointers to Java objects. They are 4 bytess on 32bit JVMs and 8bytes on 64bit JVMs. An object of course contains data fields which may be primitives orother references, and may also contain methods. A lambda is a special Java object thatonly has a single function and is treated like a funciton.
 2020-11-24 23:38:07,839 - DEBUG - 12296 }
 2020-11-24 23:38:07,839 - DEBUG - 12375 }
 2020-11-24 23:38:07,839 - DEBUG - 12458 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-20
 2020-11-24 23:38:07,839 - DEBUG -  What do modern programming languages usually call data structures?
 2020-11-24 23:38:07,839 - DEBUG -  Collections. Though Arrays and Objects are technically a data structure.
 2020-11-24 23:38:07,839 - DEBUG - 12492 }
 2020-11-24 23:38:07,839 - DEBUG - 12532 }
 2020-11-24 23:38:07,839 - DEBUG - 12826 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-javascript-1
 2020-11-24 23:38:07,839 - DEBUG -  Name JavaScript primitives.
 2020-11-24 23:38:07,839 - DEBUG -  Boolean, Null, Undefined, Number, BigInt, String, Symbol, and Object. A JavaScript function is technically and Object and can be assigned to a variable andbe passed around like any value. JavaScript numbers can be very large. Numbers are both real and integer and consume 8 bytes.
 2020-11-24 23:38:07,839 - DEBUG - 12850 }
 2020-11-24 23:38:07,839 - DEBUG - 12956 }
 2020-11-24 23:38:07,839 - DEBUG - 13123 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-21
 2020-11-24 23:38:07,839 - DEBUG -  What's a main difference in Arrays from other DataStructures likeList, Vectors, Tuples etc.
 2020-11-24 23:38:07,839 - DEBUG -  Depending on the Language arrays are fixed in size. The others cangrow to fill all available memory. In some situations using arrays can be moreefficient.
 2020-11-24 23:38:07,839 - DEBUG - 13153 }
 2020-11-24 23:38:07,839 - DEBUG - 13189 }
 2020-11-24 23:38:07,839 - DEBUG - 13247 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-python-1
 2020-11-24 23:38:07,839 - DEBUG -  List python primitives.
 2020-11-24 23:38:07,839 - DEBUG -   Boolean, int, float, complex, Strings, Objects
 2020-11-24 23:38:07,839 - DEBUG - 13277 }
 2020-11-24 23:38:07,839 - DEBUG - 13309 }
 2020-11-24 23:38:07,839 - DEBUG - 13422 }
 2020-11-24 23:38:07,839 - DEBUG - data_structures-csharp-1
 2020-11-24 23:38:07,839 - DEBUG -  List c# primitives.
 2020-11-24 23:38:07,839 - DEBUG -  bool, byte, sbyte, char, short, ushort, int, uint, long, ulong,decimal, float, double, object, string
 2020-11-24 23:38:07,839 - DEBUG - 13434 }
 2020-11-24 23:38:07,839 - DEBUG - 13477 }
 2020-11-24 23:38:07,839 - DEBUG - 13821 }
 2020-11-24 23:38:07,839 - DEBUG - oop-1
 2020-11-24 23:38:07,839 - DEBUG -  What is an OOP Design Pattern?
 2020-11-24 23:38:07,839 - DEBUG -   OOP Design Patterns are reusable solutions to commonly occuring software design problems. Design patterns were started as best practices that were applied again and again  to similar problems encountered in different contexts. Some patterns are composted of other patterns. And some are very similar but for different situations.
 2020-11-24 23:38:07,839 - DEBUG - 13832 }
 2020-11-24 23:38:07,839 - DEBUG - 13899 }
 2020-11-24 23:38:07,839 - DEBUG - 13965 }
 2020-11-24 23:38:07,839 - DEBUG - oop-2
 2020-11-24 23:38:07,839 - DEBUG -  What is a good OOP Design Patterns website to know of?
 2020-11-24 23:38:07,839 - DEBUG -  http://www.vincehuston.org/dp/ Huston Design Patterns.
 2020-11-24 23:38:07,839 - DEBUG - 13976 }
 2020-11-24 23:38:07,839 - DEBUG - 14039 }
 2020-11-24 23:38:07,839 - DEBUG - 14084 }
 2020-11-24 23:38:07,839 - DEBUG - oop-3
 2020-11-24 23:38:07,839 - DEBUG -  What are the 3 main categories of design patterns?
 2020-11-24 23:38:07,839 - DEBUG -  Creational, Behavioral, Structural
 2020-11-24 23:38:07,839 - DEBUG - 14095 }
 2020-11-24 23:38:07,839 - DEBUG - 14149 }
 2020-11-24 23:38:07,839 - DEBUG - 14406 }
 2020-11-24 23:38:07,839 - DEBUG - oop-4
 2020-11-24 23:38:07,839 - DEBUG -  What is an OOP Creational design pattern?
 2020-11-24 23:38:07,839 - DEBUG -  This copies objects, creates objects or reuses objects. Some languagesuse the 'new' operator. Some objects have a class or a prototype to partern new object on.And sometimes you will make your own functions or methods to make or return objects.
 2020-11-24 23:38:07,839 - DEBUG - 14417 }
 2020-11-24 23:38:07,839 - DEBUG - 14471 }
 2020-11-24 23:38:07,839 - DEBUG - 14834 }
 2020-11-24 23:38:07,839 - DEBUG - oop-5
 2020-11-24 23:38:07,839 - DEBUG -  What is an OOP Behavioral design pattern?
 2020-11-24 23:38:07,839 - DEBUG -  In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication. They define your functions ormethods and a pattern for how objects communicate for different situations.
 2020-11-24 23:38:07,839 - DEBUG - 14845 }
 2020-11-24 23:38:07,839 - DEBUG - 14899 }
 2020-11-24 23:38:07,839 - DEBUG - 15220 }
 2020-11-24 23:38:07,839 - DEBUG - oop-6
 2020-11-24 23:38:07,839 - DEBUG -  What is an OOP Structural design pattern?
 2020-11-24 23:38:07,839 - DEBUG -  Oop structural design patterns are simple ways to relate objects in common situations. Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient. They are not how objects communicate somuch as they are how they fit together.
 2020-11-24 23:38:07,839 - DEBUG - 15242 }
 2020-11-24 23:38:07,839 - DEBUG - 15294 }
 2020-11-24 23:38:07,839 - DEBUG - 15369 }
 2020-11-24 23:38:07,839 - DEBUG - oop-creational-1
 2020-11-24 23:38:07,839 - DEBUG -  Name 5 most common creational patterns.
 2020-11-24 23:38:07,839 - DEBUG -  Factory Method, Prototype, Singleton, Abstract Factory, Builder.
 2020-11-24 23:38:07,839 - DEBUG - 15391 }
 2020-11-24 23:38:07,839 - DEBUG - 15444 }
 2020-11-24 23:38:07,839 - DEBUG - 15583 }
 2020-11-24 23:38:07,839 - DEBUG - oop-behavioral-1
 2020-11-24 23:38:07,839 - DEBUG -  Name 11 most common behaviroal patterns.
 2020-11-24 23:38:07,839 - DEBUG -  Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,Chain of Responsibility, Interpreter, Visitor.
 2020-11-24 23:38:07,839 - DEBUG - 15605 }
 2020-11-24 23:38:07,839 - DEBUG - 15657 }
 2020-11-24 23:38:07,839 - DEBUG - 15733 }
 2020-11-24 23:38:07,839 - DEBUG - oop-structural-1
 2020-11-24 23:38:07,839 - DEBUG -  Name 7 most common structural patterns.
 2020-11-24 23:38:07,839 - DEBUG -  Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.
 2020-11-24 23:38:07,839 - DEBUG - 15755 }
 2020-11-24 23:38:07,839 - DEBUG - 15842 }
 2020-11-24 23:38:07,839 - DEBUG - 15882 }
 2020-11-24 23:38:07,839 - DEBUG - oop-structural-2
 2020-11-24 23:38:07,839 - DEBUG -  Name a very most common structural design pattern used in user interfaces.
 2020-11-24 23:38:07,839 - DEBUG -  Model View Controller or MVC.
 2020-11-24 23:38:07,855 - DEBUG - 15904 }
 2020-11-24 23:38:07,855 - DEBUG - 15938 }
 2020-11-24 23:38:07,855 - DEBUG - 16451 }
 2020-11-24 23:38:07,855 - DEBUG - oop-structural-3
 2020-11-24 23:38:07,855 - DEBUG -  Describe MVC pattern.
 2020-11-24 23:38:07,855 - DEBUG -  MVC separates Model which is the database or data files or data structures in memory from View  and Controller. View can be the reports or gui components. A view could also be data file types such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case  of gui, the controller code and view code can be kept in same source file or classes. The idea is that  generally views may be swapped or models may be swapped without affecting the other components.
 2020-11-24 23:38:07,855 - DEBUG - 16473 }
 2020-11-24 23:38:07,855 - DEBUG - 16513 }
 2020-11-24 23:38:07,855 - DEBUG - 16769 }
 2020-11-24 23:38:07,855 - DEBUG - oop-creational-2
 2020-11-24 23:38:07,855 - DEBUG -  What is the Factory Method?
 2020-11-24 23:38:07,855 - DEBUG -  Static mehod that returns an object of the Class typeor a subclass type. It may return areference to an already created object for reuse. It may have more descriptive names that a constructor which of course must be the same name as the class.
 2020-11-24 23:38:07,855 - DEBUG - 16791 }
 2020-11-24 23:38:07,855 - DEBUG - 16822 }
 2020-11-24 23:38:07,855 - DEBUG - 17062 }
 2020-11-24 23:38:07,855 - DEBUG - oop-creational-3
 2020-11-24 23:38:07,855 - DEBUG -  What is Prototype?
 2020-11-24 23:38:07,855 - DEBUG -  In Java the Class and new operator are examples of prototype. JavaScript has a prototype objectfor making classes. clone() method is also example of Prototype. This is basically making an instance object orcopy of a base class.
 2020-11-24 23:38:07,855 - DEBUG - 17084 }
 2020-11-24 23:38:07,855 - DEBUG - 17115 }
 2020-11-24 23:38:07,855 - DEBUG - 17404 }
 2020-11-24 23:38:07,855 - DEBUG - oop-creational-4
 2020-11-24 23:38:07,855 - DEBUG -  What is Singleton?
 2020-11-24 23:38:07,855 - DEBUG -  No args constructor made private. Instead use a static getInstance() method. The class will make a private instance of itself the first time getInstance() is called. After that getInstance()returns the sole instance of the class. Java Runtime class is an exaple of Singleton.
 2020-11-24 23:38:07,855 - DEBUG - 17426 }
 2020-11-24 23:38:07,855 - DEBUG - 17464 }
 2020-11-24 23:38:07,855 - DEBUG - 18097 }
 2020-11-24 23:38:07,855 - DEBUG - oop-creational-5
 2020-11-24 23:38:07,855 - DEBUG -  What is Abstract Factory?
 2020-11-24 23:38:07,855 - DEBUG -  Create a base abstract factory class which will be extended to make concrete factories. Factoryhas any number of createProduct()methods for making different products. These products extend a baseproduct. In this way products can differ depending on the concrete factory that makes them. To add a new line of products just build the new concrete products and concrete factory for the product line. Anexample of this might be a board game with unit types and factions. Each faction would have it's own concretefactory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.
 2020-11-24 23:38:07,855 - DEBUG - 18119 }
 2020-11-24 23:38:07,855 - DEBUG - 18174 }
 2020-11-24 23:38:07,855 - DEBUG - 18512 }
 2020-11-24 23:38:07,855 - DEBUG - oop-creational-6
 2020-11-24 23:38:07,855 - DEBUG -  What is Builder creational design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  Constructs a large complex object in steps. The representation of the ojbect can be one of many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. Thisis used where there are many paramters for constructing an object. Can force immutability once the object is fullycreated.
 2020-11-24 23:38:07,855 - DEBUG - 18534 }
 2020-11-24 23:38:07,855 - DEBUG - 18597 }
 2020-11-24 23:38:07,855 - DEBUG - 18869 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-2
 2020-11-24 23:38:07,855 - DEBUG -  What is Template Method behavioral design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is defined by other methods. Unlike the Interface some of the basic implementation is already coded. TemplateMethod uses inheritance to vary part of the algorithm.
 2020-11-24 23:38:07,855 - DEBUG - 18891 }
 2020-11-24 23:38:07,855 - DEBUG - 18947 }
 2020-11-24 23:38:07,855 - DEBUG - 19298 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-3
 2020-11-24 23:38:07,855 - DEBUG -  What is Strategy behavioral design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  Java Interface is an example of this pattern. Defines implementation to be supplied. Varyingalgorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable interface which has a compareTo(O) method. For example one implementation might be made for assending sort,and another for decending sort.
 2020-11-24 23:38:07,855 - DEBUG - 19320 }
 2020-11-24 23:38:07,855 - DEBUG - 19379 }
 2020-11-24 23:38:07,855 - DEBUG - 19657 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-4
 2020-11-24 23:38:07,855 - DEBUG -  What is the Command behavioral design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  A good example of this is in adding a Listener to a Button. Callback. Make a command object with execute() method. Give the command to another class which will call the execute() method. Chainof Responisibility can use Command Pattern to execute a list of commands.
 2020-11-24 23:38:07,855 - DEBUG - 19679 }
 2020-11-24 23:38:07,855 - DEBUG - 19734 }
 2020-11-24 23:38:07,855 - DEBUG - 20104 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-5
 2020-11-24 23:38:07,855 - DEBUG -  What is Memento behavioral design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  A good example for Memento is undo/redo opertions in an editor. Memento capturesan objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretakerkeeps Mememto objects and decided when to restore one on the Originator.
 2020-11-24 23:38:07,855 - DEBUG - 20126 }
 2020-11-24 23:38:07,855 - DEBUG - 20182 }
 2020-11-24 23:38:07,855 - DEBUG - 20562 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-6
 2020-11-24 23:38:07,855 - DEBUG -  What is Mediator behavioral design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  Where objects have a many to many relationship. Unix users to group mappings is an example. anotherexample is air traffic control tower. Planes do not talk to each other but only to tower which talks to all planes. Another example would be a dialog that talks to all it's components. If a component needs to messageanother component it does so via the dialog object.
 2020-11-24 23:38:07,855 - DEBUG - 20584 }
 2020-11-24 23:38:07,855 - DEBUG - 20637 }
 2020-11-24 23:38:07,855 - DEBUG - 20945 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-7
 2020-11-24 23:38:07,855 - DEBUG -  What is State behavioral design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  An object's behavior changes based on changes to it's state. Prime example is various edit modes in text editors. State objects are often Singltons. Another example was state of a ceiling fan, low, medhigh and off. State of a vending machine, product in stock, change available, money deposited.
 2020-11-24 23:38:07,855 - DEBUG - 20967 }
 2020-11-24 23:38:07,855 - DEBUG - 21023 }
 2020-11-24 23:38:07,855 - DEBUG - 21457 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-8
 2020-11-24 23:38:07,855 - DEBUG -  What is Observer behavioral design pattern?
 2020-11-24 23:38:07,855 - DEBUG -  One to many relationship. In user interfaces this can be listeners. A component can have anynumber of listeners. An object has a method to add observers. Observers have an update() method. This is also like callback design. In HTML with JavaScript components can have multiple observers. One example isan auctioneer and bidders(observers). If one observer bids then the auctioneer notifies all observers of newhigh bid.
 2020-11-24 23:38:07,855 - DEBUG - 21479 }
 2020-11-24 23:38:07,855 - DEBUG - 21535 }
 2020-11-24 23:38:07,855 - DEBUG - 21801 }
 2020-11-24 23:38:07,855 - DEBUG - oop-behavioral-9
 2020-11-24 23:38:07,855 - DEBUG -  What is Iterator behavioral design pattern.
 2020-11-24 23:38:07,855 - DEBUG -  Define a hasNext() method on a collection. Define a next() method to get the next item in the colleciton. The colleciton can have a method iterator() to return a fresh iterator ofitself. Generally for each or for in or for of is prefered over Iterators.
 2020-11-24 23:38:07,855 - DEBUG - 21824 }
 2020-11-24 23:38:07,855 - DEBUG - 21894 }
 2020-11-24 23:38:07,870 - DEBUG - 22311 }
 2020-11-24 23:38:07,870 - DEBUG - oop-behavioral-10
 2020-11-24 23:38:07,870 - DEBUG -  What is Chain of Responsibilty behavioral design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  A linked list of command objects. Each command wraps a command that preceded it. When the first orfront command is called, it then calls the one it wraps. Only commands pertinent to the call at hand will execute. Multiple commands may execute for a given call. Real world example is coin bank that sorts coinsinto stacks. Coins are sorted into stacks based on size, dime, penny, nickle, quarter, dollar.
 2020-11-24 23:38:07,870 - DEBUG - 22334 }
 2020-11-24 23:38:07,870 - DEBUG - 22393 }
 2020-11-24 23:38:07,870 - DEBUG - 22719 }
 2020-11-24 23:38:07,870 - DEBUG - oop-behavioral-11
 2020-11-24 23:38:07,870 - DEBUG -  What is Interpreter behavioral design pattern.
 2020-11-24 23:38:07,870 - DEBUG -  Maps a recursive grammar to a tree structure. You have composite nodes which is a rule that references other rules or a terminal leaf node. The composite will have a solve or iterpret method. This uses Composite designpattern. A real world example is a musician interpreting sheet music notes. Notes are terminal.
 2020-11-24 23:38:07,870 - DEBUG - 22742 }
 2020-11-24 23:38:07,870 - DEBUG - 22801 }
 2020-11-24 23:38:07,870 - DEBUG - 23266 }
 2020-11-24 23:38:07,870 - DEBUG - oop-behavioral-12
 2020-11-24 23:38:07,870 - DEBUG -  What is the Visitor behavioral design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  If you want to add behavior to an object without chanigng it. Add an accept(Visitor) method. Make a Visitorobject with one or more visit() methods. Can have more than one visitor or call accept more than once withdifferent visitors. Real world example is Cab Compnay, Customer and Cab Driver(Visitor) So Customer has accept(Driver) and calls visit() on the Driver. More than one Driver could be dispatched by cab company for example closest available.
 2020-11-24 23:38:07,870 - DEBUG - 23288 }
 2020-11-24 23:38:07,870 - DEBUG - 23343 }
 2020-11-24 23:38:07,870 - DEBUG - 23656 }
 2020-11-24 23:38:07,870 - DEBUG - oop-structural-4
 2020-11-24 23:38:07,870 - DEBUG -  What is Adapter structural design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  Converts the interface of a class into interface that is expected. A java example is iterator() or asList(). The adapter would implement an interface and wrap the class it is adapting. It makes a class lookand act like another kind of class. Real world examples are socket adapters and plug adapters.
 2020-11-24 23:38:07,870 - DEBUG - 23678 }
 2020-11-24 23:38:07,870 - DEBUG - 23735 }
 2020-11-24 23:38:07,870 - DEBUG - 24091 }
 2020-11-24 23:38:07,870 - DEBUG - oop-structural-5
 2020-11-24 23:38:07,870 - DEBUG -  What is Composite structural design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  Recursive tree structure of objects that "has a" object or objects. A graphical user interface is such a design. With Java Swing it was Frame, Panel, Component. With JavaFX it is Stage, Scene, Components. In HTML it is <html><body><elements>. An xml document is also composite design. Directory structure on file system is a composite design.
 2020-11-24 23:38:07,870 - DEBUG - 24113 }
 2020-11-24 23:38:07,870 - DEBUG - 24170 }
 2020-11-24 23:38:07,870 - DEBUG - 24554 }
 2020-11-24 23:38:07,870 - DEBUG - oop-structural-6
 2020-11-24 23:38:07,870 - DEBUG -  What is Decorator structural design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  One to one composite design. One object constructs and wraps another object to enhance it's capabilities or alter its function. IO Streams in Java are examples of decorators. A FileInputStream wrapsa File. A BufferedInputStream can wrap an InputStream or a FileInputStream. Other examples of decorator can be seen in Views in MVC. A DoubleLineBorder might wrap a Border.
 2020-11-24 23:38:07,870 - DEBUG - 24576 }
 2020-11-24 23:38:07,870 - DEBUG - 24629 }
 2020-11-24 23:38:07,870 - DEBUG - 24995 }
 2020-11-24 23:38:07,870 - DEBUG - oop-structural-7
 2020-11-24 23:38:07,870 - DEBUG -  What is Proxy structural design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  RMI is a perfect example with Java. So you make an Interface and a class on each side of aninternet connection implements it. The class on client side simply calls the same methods on theserver side. The server side executes the logic and may or may not return some value to the client side class.  A real world example is writing a check for payment.
 2020-11-24 23:38:07,870 - DEBUG - 25017 }
 2020-11-24 23:38:07,870 - DEBUG - 25071 }
 2020-11-24 23:38:07,870 - DEBUG - 25501 }
 2020-11-24 23:38:07,870 - DEBUG - oop-structural-8
 2020-11-24 23:38:07,870 - DEBUG -  What is Facade structural design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  Wraps a complicated sub system with simpler interface. An example of a facade is dealingwith customer service representative when placing an order. The representative knows about and handlesall the complexities of the orders, and ordering process. One area where I might be tempted to createa facade is in dealing with complex tables in modern UI's. Facade defines a simpler inerface and does notadd functionallity.
 2020-11-24 23:38:07,870 - DEBUG - 25523 }
 2020-11-24 23:38:07,870 - DEBUG - 25580 }
 2020-11-24 23:38:07,870 - DEBUG - 26139 }
 2020-11-24 23:38:07,870 - DEBUG - oop-structural-9
 2020-11-24 23:38:07,870 - DEBUG -  What is Flyweight structural design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  An example of flyweight is the icons used in the folder tree to represent folders and differentfile types. Instead of having 100's image copies, One object holds the image and is retrieved over and overby window pain when needed by a factory. So you have 3 parts, a factory, a base class and a subclass forspecific types. Flyweight objects have state dependent and state independent parts. The independend partsare used over and over or shared. I used this pattern for an RPG map composed of square tiles representing terrain or other objects.
 2020-11-24 23:38:07,870 - DEBUG - 26162 }
 2020-11-24 23:38:07,870 - DEBUG - 26216 }
 2020-11-24 23:38:07,870 - DEBUG - 26748 }
 2020-11-24 23:38:07,870 - DEBUG - oop-structural-10
 2020-11-24 23:38:07,870 - DEBUG -  What is Bridge structural design pattern?
 2020-11-24 23:38:07,870 - DEBUG -  A house hold example is power switch. In a home you can have many types of switches, and differenttypes of appliances to be switched on or off. You may have a pole switch, or a toggle switch or a dial switch. You can have a light, or a fan or an outlet or anything on the switch. In OO design the abstraction and implementation vary independently. This is like making one class and putting the behavior in a different class. So the interface can vary with the first class and the behavior can vary with the 2nd class.
 2020-11-24 23:38:07,870 - DEBUG - 26782 }
 2020-11-24 23:38:07,870 - DEBUG - 26838 }
 2020-11-24 23:38:07,886 - DEBUG - 26980 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-1
 2020-11-24 23:38:07,886 - DEBUG -  Describe a basic python strings definition.
 2020-11-24 23:38:07,886 - DEBUG -  use 'xxxx' or "xxxx" . Created with mystringvarname = 'Hello world' .use \ for escape characters such as \n newline \" or \' etc.
 2020-11-24 23:38:07,886 - DEBUG - 27013 }
 2020-11-24 23:38:07,886 - DEBUG - 27073 }
 2020-11-24 23:38:07,886 - DEBUG - 27141 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-2
 2020-11-24 23:38:07,886 - DEBUG -  How can strings be defined over multiple lines?
 2020-11-24 23:38:07,886 - DEBUG - """ String cancover multiple lines"""  or '''  and '''
 2020-11-24 23:38:07,886 - DEBUG - 27174 }
 2020-11-24 23:38:07,886 - DEBUG - 27247 }
 2020-11-24 23:38:07,886 - DEBUG - 27409 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-3
 2020-11-24 23:38:07,886 - DEBUG -  How can you get a single char from a string? Or a substring?
 2020-11-24 23:38:07,886 - DEBUG - They can be treated like an array or list '1234'[0] is '1' .mystring='12345'  so mystring[:2] is '12'  and mystring[3:] is '45'mystring[1:3] is '23'
 2020-11-24 23:38:07,886 - DEBUG - 27442 }
 2020-11-24 23:38:07,886 - DEBUG - 27502 }
 2020-11-24 23:38:07,886 - DEBUG - 27600 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-4
 2020-11-24 23:38:07,886 - DEBUG -  How do you iterator over the chars of a string?
 2020-11-24 23:38:07,886 - DEBUG -  You can use a string like a list in a for in statementfor c in mystring:    print(c)
 2020-11-24 23:38:07,886 - DEBUG - 27634 }
 2020-11-24 23:38:07,886 - DEBUG - 27685 }
 2020-11-24 23:38:07,886 - DEBUG - 27715 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-5
 2020-11-24 23:38:07,886 - DEBUG -  How do you get the lenght of a string?
 2020-11-24 23:38:07,886 - DEBUG -  len(mystring) is 5
 2020-11-24 23:38:07,886 - DEBUG - 27748 }
 2020-11-24 23:38:07,886 - DEBUG - 27790 }
 2020-11-24 23:38:07,886 - DEBUG - 27877 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-6
 2020-11-24 23:38:07,886 - DEBUG -  How do you merge two strings?
 2020-11-24 23:38:07,886 - DEBUG -  use + to concatinate strings. 'Hello'+'World' Also can use a join() method
 2020-11-24 23:38:07,886 - DEBUG - 27912 }
 2020-11-24 23:38:07,886 - DEBUG - 27961 }
 2020-11-24 23:38:07,886 - DEBUG - 28039 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-7
 2020-11-24 23:38:07,886 - DEBUG -  How do you use a number in a string?
 2020-11-24 23:38:07,886 - DEBUG -  use str(myint) or str(myfloat) to convert int or float to string.
 2020-11-24 23:38:07,886 - DEBUG - 28074 }
 2020-11-24 23:38:07,886 - DEBUG - 28153 }
 2020-11-24 23:38:07,886 - DEBUG - 28184 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-8
 2020-11-24 23:38:07,886 - DEBUG -  How do you divide a string by some delimiter such as ',' a string?
 2020-11-24 23:38:07,886 - DEBUG -  mystring.split(',')
 2020-11-24 23:38:07,886 - DEBUG - 28217 }
 2020-11-24 23:38:07,886 - DEBUG - 28272 }
 2020-11-24 23:38:07,886 - DEBUG - 28300 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-9
 2020-11-24 23:38:07,886 - DEBUG -  How do you trim white space from a string?
 2020-11-24 23:38:07,886 - DEBUG -  mystring.strip()
 2020-11-24 23:38:07,886 - DEBUG - 28334 }
 2020-11-24 23:38:07,886 - DEBUG - 28394 }
 2020-11-24 23:38:07,886 - DEBUG - 28446 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-strings-10
 2020-11-24 23:38:07,886 - DEBUG -  How do you convert a string to an int or float?
 2020-11-24 23:38:07,886 - DEBUG -  int(mystringint) or float(mystringfloat)
 2020-11-24 23:38:07,886 - DEBUG - 28479 }
 2020-11-24 23:38:07,886 - DEBUG - 28525 }
 2020-11-24 23:38:07,886 - DEBUG - 28640 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-numbers-1
 2020-11-24 23:38:07,886 - DEBUG -  Describe types of python numbers.
 2020-11-24 23:38:07,886 - DEBUG -  There is int, float and complex numbers.   int 55   float 3.25  complex is 5+3j where 3j is imaginary!
 2020-11-24 23:38:07,886 - DEBUG - 28673 }
 2020-11-24 23:38:07,886 - DEBUG - 28745 }
 2020-11-24 23:38:07,886 - DEBUG - 28893 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-numbers-2
 2020-11-24 23:38:07,886 - DEBUG -  How do you work with really precise real numbers in python?
 2020-11-24 23:38:07,886 - DEBUG -  Use decimal module.Decimal is for really long precise numbes  1.01002039487233987290374972374987239879238749082387decimal.Decimal(1.1)
 2020-11-24 23:38:07,886 - DEBUG - 28926 }
 2020-11-24 23:38:07,886 - DEBUG - 29001 }
 2020-11-24 23:38:07,886 - DEBUG - 29095 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-numbers-3
 2020-11-24 23:38:07,886 - DEBUG -  How can you work with say fractional measurements with python?
 2020-11-24 23:38:07,886 - DEBUG -  Use fractions modulefractions.Fraction(1,2) is 1/2fractions.Fraction(1.5) is 3/2
 2020-11-24 23:38:07,886 - DEBUG - 29128 }
 2020-11-24 23:38:07,886 - DEBUG - 29179 }
 2020-11-24 23:38:07,886 - DEBUG - 29201 }
 2020-11-24 23:38:07,886 - DEBUG - python-datatypes-numbers-4
 2020-11-24 23:38:07,886 - DEBUG -  How do the absolute value of a number?
 2020-11-24 23:38:07,886 - DEBUG -  abs(mynum)
 2020-11-24 23:38:07,886 - DEBUG - 29234 }
 2020-11-24 23:38:07,886 - DEBUG - 29284 }
 2020-11-24 23:38:07,902 - DEBUG - 29313 }
 2020-11-24 23:38:07,902 - DEBUG - python-datatypes-numbers-5
 2020-11-24 23:38:07,902 - DEBUG -  How do you raise a number to a power?
 2020-11-24 23:38:07,902 - DEBUG -  pow(power,number)
 2020-11-24 23:38:07,902 - DEBUG - 29346 }
 2020-11-24 23:38:07,902 - DEBUG - 29390 }
 2020-11-24 23:38:07,902 - DEBUG - 29426 }
 2020-11-24 23:38:07,902 - DEBUG - python-datatypes-numbers-6
 2020-11-24 23:38:07,902 - DEBUG -  How do you round a real number?
 2020-11-24 23:38:07,902 - DEBUG -  round(num,decimalplaces)
 2020-11-24 23:38:07,902 - DEBUG - 29459 }
 2020-11-24 23:38:07,902 - DEBUG - 29513 }
 2020-11-24 23:38:07,902 - DEBUG - 29681 }
 2020-11-24 23:38:07,902 - DEBUG - python-datatypes-numbers-7
 2020-11-24 23:38:07,902 - DEBUG -  Whats involved in getting random numbers?
 2020-11-24 23:38:07,902 - DEBUG -  use random module use random.seed() first then random.Random() returns next float  0.0 to 1.0 or random.randint(start,end) so randint(0,100) is 0 to 100
 2020-11-24 23:38:07,902 - DEBUG - 29695 }
 2020-11-24 23:38:07,902 - DEBUG - 29768 }
 2020-11-24 23:38:07,902 - DEBUG - 29837 }
 2020-11-24 23:38:07,902 - DEBUG - uml-1
 2020-11-24 23:38:07,902 - DEBUG -  What are the two main types one one subtype of uml diagrams?
 2020-11-24 23:38:07,902 - DEBUG -  structure, behavior and interaction is subtype of behavior
 2020-11-24 23:38:07,902 - DEBUG - 29848 }
 2020-11-24 23:38:07,902 - DEBUG - 29892 }
 2020-11-24 23:38:07,902 - DEBUG - 29989 }
 2020-11-24 23:38:07,902 - DEBUG - uml-2
 2020-11-24 23:38:07,902 - DEBUG -  What is an interaction diagram?
 2020-11-24 23:38:07,902 - DEBUG -  They describe how groups of objects collaborate in some behavior, senario or use case.
 2020-11-24 23:38:07,902 - DEBUG - 30000 }
 2020-11-24 23:38:07,902 - DEBUG - 30041 }
 2020-11-24 23:38:07,902 - DEBUG - 30351 }
 2020-11-24 23:38:07,902 - DEBUG - uml-3
 2020-11-24 23:38:07,902 - DEBUG -  What is a structure diagram?
 2020-11-24 23:38:07,902 - DEBUG -  A structure diagram is a conceptual modeling tool used to document the different structures that make up a system such as a database or an application. It shows the hierarchy or structure of the different components or modules of the system and shows how they connect and interact with each other.
 2020-11-24 23:38:07,902 - DEBUG - 30362 }
 2020-11-24 23:38:07,902 - DEBUG - 30402 }
 2020-11-24 23:38:07,902 - DEBUG - 30516 }
 2020-11-24 23:38:07,902 - DEBUG - uml-4
 2020-11-24 23:38:07,902 - DEBUG -  What is a behavior diagram?
 2020-11-24 23:38:07,902 - DEBUG -  UML behavioral diagrams visualize, specify, construct, and document the dynamic aspects of a system.
 2020-11-24 23:38:07,902 - DEBUG - 30537 }
 2020-11-24 23:38:07,902 - DEBUG - 30588 }
 2020-11-24 23:38:07,902 - DEBUG - 30670 }
 2020-11-24 23:38:07,902 - DEBUG - uml-structure-1
 2020-11-24 23:38:07,902 - DEBUG -  Name the seven UML structure diagrams.
 2020-11-24 23:38:07,902 - DEBUG -  Package, Class, Object, Component, Composite, Collaboration, Deployment
 2020-11-24 23:38:07,902 - DEBUG - 30690 }
 2020-11-24 23:38:07,902 - DEBUG - 30755 }
 2020-11-24 23:38:07,902 - DEBUG - 30815 }
 2020-11-24 23:38:07,902 - DEBUG - uml-behavior-1
 2020-11-24 23:38:07,902 - DEBUG -  Name the 3 UML behavior diagrams and the one subtype
 2020-11-24 23:38:07,902 - DEBUG -  Activity, Use Case, State and subtype Interaction
 2020-11-24 23:38:07,902 - DEBUG - 30838 }
 2020-11-24 23:38:07,902 - DEBUG - 30895 }
 2020-11-24 23:38:07,902 - DEBUG - 30960 }
 2020-11-24 23:38:07,902 - DEBUG - uml-interaction-1
 2020-11-24 23:38:07,902 - DEBUG -  Name the 4 types of UML interaction diagrams
 2020-11-24 23:38:07,902 - DEBUG -  Sequence, Timing, Communications, Interaction Overview
 2020-11-24 23:38:07,902 - DEBUG - 30971 }
 2020-11-24 23:38:07,902 - DEBUG - 31015 }
 2020-11-24 23:38:07,902 - DEBUG - 31049 }
 2020-11-24 23:38:07,902 - DEBUG - uml-2
 2020-11-24 23:38:07,902 - DEBUG -  How many uml digrams are there?
 2020-11-24 23:38:07,902 - DEBUG -  Around 14 give or take.
 2020-11-24 23:38:07,902 - DEBUG - 31070 }
 2020-11-24 23:38:07,902 - DEBUG - 31121 }
 2020-11-24 23:38:07,902 - DEBUG - 31369 }
 2020-11-24 23:38:07,902 - DEBUG - uml-structure-2
 2020-11-24 23:38:07,902 - DEBUG -  Describe the structure Package diagram
 2020-11-24 23:38:07,902 - DEBUG -  Shows package grouping of classes usually in a symbol that looks like a folder with tab. Packages can implement an inteface or package. Dashed lines with arrowsshows dependencies. A package symbol can be nested within a package symbol.
 2020-11-24 23:38:07,902 - DEBUG - 31390 }
 2020-11-24 23:38:07,902 - DEBUG - 31440 }
 2020-11-24 23:38:07,902 - DEBUG - 31713 }
 2020-11-24 23:38:07,902 - DEBUG - uml-structure-3
 2020-11-24 23:38:07,902 - DEBUG -  Describe the structure Class diagram.
 2020-11-24 23:38:07,902 - DEBUG -  Have boxes that represent classes with name, properties whichare attributes and opeartions. Various association lines with different arrowsshow how classes interelate. Keywords can describe things. Multiplicity is wherethee is 0, 0..#, 0..* or 1..#, 1..* etc.
 2020-11-24 23:38:07,902 - DEBUG - 31734 }
 2020-11-24 23:38:07,902 - DEBUG - 31785 }
 2020-11-24 23:38:07,902 - DEBUG - 31919 }
 2020-11-24 23:38:07,902 - DEBUG - uml-structure-4
 2020-11-24 23:38:07,902 - DEBUG -  Describe the structure Object diagram.
 2020-11-24 23:38:07,902 - DEBUG -  Snapshot of objects in a system at a point in time. Boxes that show objectname:classname andname=value for fields or data.
 2020-11-24 23:38:07,902 - DEBUG - 31940 }
 2020-11-24 23:38:07,902 - DEBUG - 31994 }
 2020-11-24 23:38:07,902 - DEBUG - 32246 }
 2020-11-24 23:38:07,902 - DEBUG - uml-structure-5
 2020-11-24 23:38:07,902 - DEBUG -  Describe the structure Component diagram.
 2020-11-24 23:38:07,902 - DEBUG - Use a box with symbol that looks like a plug. Also use assocition lines with round ciricle in half circle socket. Can be nested. Use :somename[value] in box. May have ports or squares on sides where connectors come in. Similar to composite.
 2020-11-24 23:38:07,917 - DEBUG - 32267 }
 2020-11-24 23:38:07,917 - DEBUG - 32321 }
 2020-11-24 23:38:07,917 - DEBUG - 32658 }
 2020-11-24 23:38:07,917 - DEBUG - uml-structure-6
 2020-11-24 23:38:07,917 - DEBUG -  Describe the structure Composite diagram.
 2020-11-24 23:38:07,917 - DEBUG -  Uses box with lolipop lines connecting to box or half ciricle lolipops connection to box.Circle lolipops are controls and half circle are input/output. These boxes can be nested and theremaybe be control flow association lines called connectors. May have little squares on the sides ofbox called ports. Similar to Component
 2020-11-24 23:38:07,917 - DEBUG - 32679 }
 2020-11-24 23:38:07,917 - DEBUG - 32736 }
 2020-11-24 23:38:07,917 - DEBUG - 32924 }
 2020-11-24 23:38:07,917 - DEBUG - uml-structure-7
 2020-11-24 23:38:07,917 - DEBUG -  Describe the structure Collaboration diagram
 2020-11-24 23:38:07,917 - DEBUG -  Collaboration is UML 1. Mostly boxes with associations and mutipliticy.Has no flow or arrows and a dashed circle or lines that show collaboration occurance.Boxes name roles.
 2020-11-24 23:38:07,917 - DEBUG - 32945 }
 2020-11-24 23:38:07,917 - DEBUG - 33000 }
 2020-11-24 23:38:07,917 - DEBUG - 33308 }
 2020-11-24 23:38:07,917 - DEBUG - uml-structure-8
 2020-11-24 23:38:07,917 - DEBUG -  Describe the structure Deployment diagram.
 2020-11-24 23:38:07,917 - DEBUG -  These diagrams show communications paths between parts of a system. And show the parts of the system in a 3d box for hardware and other or 3d cylinder for data stores. They canshow artifacts like executables, and containers or execution enviroments. Also deployment files and operating systems.
 2020-11-24 23:38:07,917 - DEBUG - 33328 }
 2020-11-24 23:38:07,917 - DEBUG - 33380 }
 2020-11-24 23:38:07,917 - DEBUG - 33546 }
 2020-11-24 23:38:07,917 - DEBUG - uml-behavior-1
 2020-11-24 23:38:07,917 - DEBUG -  Describe the behavior Activity diagram.
 2020-11-24 23:38:07,917 - DEBUG -  Activity diagrams describe procedural logic, business processs and work flow. These are reminicent of flow charts. However they support parallel behavior.
 2020-11-24 23:38:07,917 - DEBUG - 33566 }
 2020-11-24 23:38:07,917 - DEBUG - 33618 }
 2020-11-24 23:38:07,917 - DEBUG - 33863 }
 2020-11-24 23:38:07,917 - DEBUG - uml-behavior-2
 2020-11-24 23:38:07,917 - DEBUG -  Describe the behavior Use Case diagram.
 2020-11-24 23:38:07,917 - DEBUG -  These capture the functional requirements of a system. Describe users of a system and interaction with the system itself. Uses a senario which are steps that a user takes tointeract with the system. Users are actors that play roles.
 2020-11-24 23:38:07,917 - DEBUG - 33883 }
 2020-11-24 23:38:07,917 - DEBUG - 33932 }
 2020-11-24 23:38:07,917 - DEBUG - 34238 }
 2020-11-24 23:38:07,917 - DEBUG - uml-behavior-3
 2020-11-24 23:38:07,917 - DEBUG -  Describe the behavior State diagram.
 2020-11-24 23:38:07,917 - DEBUG -  State machine diagrams show changing states of objects. You might draw a state machine diagram to show the lifetime behavior of a single object. They use flow lines thatsshow flow of change in state, not flow of execution. You can have physical or activity states. Canhave concurrent states.
 2020-11-24 23:38:07,917 - DEBUG - 34261 }
 2020-11-24 23:38:07,917 - DEBUG - 34316 }
 2020-11-24 23:38:07,917 - DEBUG - 34474 }
 2020-11-24 23:38:07,917 - DEBUG - uml-interaction-2
 2020-11-24 23:38:07,917 - DEBUG -  Describe the interaction Sequence diagram.
 2020-11-24 23:38:07,917 - DEBUG -  Captures the behavior of a single senario. Show messages that are passedbetween objects in a given use case. This resembles a call trace diagram.
 2020-11-24 23:38:07,917 - DEBUG - 34497 }
 2020-11-24 23:38:07,917 - DEBUG - 34550 }
 2020-11-24 23:38:07,917 - DEBUG - 34800 }
 2020-11-24 23:38:07,917 - DEBUG - uml-interaction-3
 2020-11-24 23:38:07,917 - DEBUG -  Describe the interaction Timing diagram.
 2020-11-24 23:38:07,917 - DEBUG -  Used a lot in electronic engineering. Focus on timing constraints for a single objector more usefully for a bunch of objects. Shows a horizontal time line and list state changes oractivities with time shown in (s)econds or (m)inutes etc.
 2020-11-24 23:38:07,917 - DEBUG - 34823 }
 2020-11-24 23:38:07,917 - DEBUG - 34884 }
 2020-11-24 23:38:07,917 - DEBUG - 35155 }
 2020-11-24 23:38:07,924 - DEBUG - uml-interaction-4
 2020-11-24 23:38:07,924 - DEBUG -  Describe the interaction Communications diagram.
 2020-11-24 23:38:07,924 - DEBUG -  Emphasises data links between various participants in the diagram. Like sequence but uses boxes with arrowed lines to show direction of communication. Uses numbers 1, 1.1, 1.5.2 etc to show steps or sequence. Boxes can be placed anywhere around the diagram.
 2020-11-24 23:38:07,924 - DEBUG - 35178 }
 2020-11-24 23:38:07,924 - DEBUG - 35245 }
 2020-11-24 23:38:07,924 - DEBUG - 35403 }
 2020-11-24 23:38:07,924 - DEBUG - uml-interaction-5
 2020-11-24 23:38:07,924 - DEBUG -  Describe the interaction Interaction Overview daigram.
 2020-11-24 23:38:07,924 - DEBUG -  Combination of Activity and Sequnece diagrams. Can be show as Activity diagram with Sequnece diagrams or Sequinece diagrams with Activity digrams.
 2020-11-24 23:38:07,924 - DEBUG - algo_cards
 2020-11-24 23:38:07,924 - DEBUG - box1
 2020-11-24 23:38:07,924 - DEBUG - algo_cards
 2020-11-24 23:38:07,924 - DEBUG - box1
 2020-11-24 23:38:07,924 - DEBUG - box2
 2020-11-24 23:38:07,924 - DEBUG - algo_cards
 2020-11-24 23:38:07,924 - DEBUG - box1
 2020-11-24 23:38:07,924 - DEBUG - box2
 2020-11-24 23:38:07,924 - DEBUG - box3
 2020-11-24 23:38:07,924 - DEBUG - algo_cards
 2020-11-24 23:38:07,924 - DEBUG - box1
 2020-11-24 23:38:07,924 - DEBUG - box2
 2020-11-24 23:38:07,924 - DEBUG - box3
 2020-11-24 23:38:07,924 - DEBUG - box4
 2020-11-24 23:38:07,924 - DEBUG - algo_cards
 2020-11-24 23:38:07,924 - DEBUG - box1
 2020-11-24 23:38:07,924 - DEBUG - box2
 2020-11-24 23:38:07,924 - DEBUG - box3
 2020-11-24 23:38:07,924 - DEBUG - box4
 2020-11-24 23:38:07,924 - DEBUG - box5
 2020-11-24 23:38:07,924 - DEBUG - algo_cards
 2020-11-24 23:38:07,939 - DEBUG - box1
 2020-11-24 23:38:07,939 - DEBUG - box2
 2020-11-24 23:38:07,939 - DEBUG - box3
 2020-11-24 23:38:07,939 - DEBUG - box4
 2020-11-24 23:38:07,939 - DEBUG - box5
 2020-11-24 23:38:07,939 - DEBUG - box6
 2020-11-24 23:38:07,939 - DEBUG - finding test cycle file
 2020-11-24 23:38:07,939 - DEBUG - quizs\
 2020-11-24 23:38:07,939 - DEBUG - algo_cards.txt
 2020-11-24 23:38:07,939 - DEBUG - box1.txt
 2020-11-24 23:38:07,939 - DEBUG - box2.txt
 2020-11-24 23:38:07,939 - DEBUG - box3.txt
 2020-11-24 23:38:07,939 - DEBUG - box4.txt
 2020-11-24 23:38:07,939 - DEBUG - box5.txt
 2020-11-24 23:38:07,939 - DEBUG - box6.txt
 2020-11-24 23:38:07,939 - DEBUG - data_struct_cards.txt
 2020-11-24 23:38:07,939 - DEBUG - java
 2020-11-24 23:38:07,939 - DEBUG - javascript
 2020-11-24 23:38:07,939 - DEBUG - oop_cards.txt
 2020-11-24 23:38:07,939 - DEBUG - python_cards.txt
 2020-11-24 23:38:07,939 - DEBUG - quizs.bak
 2020-11-24 23:38:07,939 - DEBUG - study
 2020-11-24 23:38:07,939 - DEBUG - testcycle4.txt
 2020-11-24 23:38:07,939 - DEBUG - uml_cards.txt
 2020-11-24 23:38:07,939 - DEBUG - algo_cards
 2020-11-24 23:38:07,939 - DEBUG - box1
 2020-11-24 23:38:07,939 - DEBUG - box2
 2020-11-24 23:38:07,939 - DEBUG - box3
 2020-11-24 23:38:07,939 - DEBUG - box4
 2020-11-24 23:38:07,939 - DEBUG - box5
 2020-11-24 23:38:07,939 - DEBUG - box6
 2020-11-24 23:38:07,939 - DEBUG - data_struct_cards
 2020-11-24 23:38:07,939 - DEBUG - 
 2020-11-24 23:38:07,939 - DEBUG - javasc
 2020-11-24 23:38:07,939 - DEBUG - oop_cards
 2020-11-24 23:38:07,939 - DEBUG - python_cards
 2020-11-24 23:38:07,939 - DEBUG - quizs
 2020-11-24 23:38:07,939 - DEBUG - s
 2020-11-24 23:38:07,939 - DEBUG - testcycle4
 2020-11-24 23:38:07,939 - DEBUG - found testcycle4.txt
 2020-11-24 23:38:07,939 - DEBUG - testcycle4
 2020-11-24 23:38:07,939 - DEBUG - quizs\
 2020-11-24 23:38:07,939 - DEBUG - Cycle number 4
 2020-11-24 23:39:55,590 - DEBUG - Moving to Box
 2020-11-24 23:39:55,590 - DEBUG - Remove From Box
 2020-11-24 23:39:55,590 - DEBUG - Add To Box
 2020-11-24 23:39:55,590 - DEBUG - Remove From Test Cycle
 2020-11-24 23:39:55,590 - DEBUG - Save Test Cycle
