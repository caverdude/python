{ID:oop-1}
{QUESTION: What is an OOP Design Pattern?}
{ANSWER:  OOP Design Patterns are reusable solutions to commonly occuring software design problems.
 Design patterns were started as best practices that were applied again and again 
 to similar problems encountered in different contexts. Some patterns are composted of other
 patterns. And some are very similar but for different situations.}
{ID:oop-2}
{QUESTION: What is a good OOP Design Patterns website to know of?}
{ANSWER: http://www.vincehuston.org/dp/ Huston Design Patterns. }
{ID:oop-3}
{QUESTION: What are the 3 main categories of design patterns?}
{ANSWER: Creational, Behavioral, Structural}
{ID:oop-4}
{QUESTION: What is an OOP Creational design pattern?}
{ANSWER: This copies objects, creates objects or reuses objects. Some languages
use the 'new' operator. Some objects have a class or a prototype to partern new object on.
And sometimes you will make your own functions or methods to make or return objects.}
{ID:oop-5}
{QUESTION: What is an OOP Behavioral design pattern?}
{ANSWER: In software engineering, behavioral design patterns are design patterns that identify 
common communication patterns between objects and realize these patterns. By doing so, these 
patterns increase flexibility in carrying out this communication. They define your functions or
methods and a pattern for how objects communicate for different situations.}
{ID:oop-6}
{QUESTION: What is an OOP Structural design pattern?}
{ANSWER: Oop structural design patterns are simple ways to relate objects in 
common situations. Structural patterns explain how to assemble objects and classes into larger 
structures while keeping these structures flexible and efficient. They are not how objects communicate so
much as they are how they fit together.}
{ID:oop-creational-1}
{QUESTION: Name 5 most common creational patterns.}
{ANSWER: Factory Method, Prototype, Singleton, Abstract Factory, Builder.}
{ID:oop-behavioral-1}
{QUESTION: Name 11 most common behaviroal patterns.}
{ANSWER: Template Method, Strategy, Command, Memento, Mediator, State, Observer, Iterator,
Chain of Responsibility, Interpreter, Visitor.}
{ID:oop-structural-1}
{QUESTION: Name 7 most common structural patterns.}
{ANSWER: Adapter, Composite, Decorator, Proxy, Facade, Fly Weight, Bridge.}
{ID:oop-structural-2}
{QUESTION: Name a very most common structural design pattern used in user interfaces.}
{ANSWER: Model View Controller or MVC.}
{ID:oop-structural-3}
{QUESTION: Describe MVC pattern.}
{ANSWER: MVC separates Model which is the database or data files or data structures in memory from View  
and Controller. View can be the reports or gui components. A view could also be data file types
 such as JSON, CSV, XML or HTML. The controller might be commmand pattern or observer pattern. In the case 
 of gui, the controller code and view code can be kept in same source file or classes. The idea is that 
 generally views may be swapped or models may be swapped without affecting the other components.}
{ID:oop-creational-2}
{QUESTION: What is the Factory Method?}
{ANSWER: Static mehod that returns an object of the Class typeor a subclass type. It may return a
reference to an already created object for reuse. It may have more descriptive names that a 
constructor which of course must be the same name as the class.}
{ID:oop-creational-3}
{QUESTION: What is Prototype?}
{ANSWER: In Java the Class and new operator are examples of prototype. JavaScript has a prototype object
for making classes. clone() method is also example of Prototype. This is basically making an instance object or
copy of a base class.}
{ID:oop-creational-4}
{QUESTION: What is Singleton?}
{ANSWER: No args constructor made private. Instead use a static getInstance() method. The class 
will make a private instance of itself the first time getInstance() is called. After that getInstance()
returns the sole instance of the class. Java Runtime class is an exaple of Singleton. }
{ID:oop-creational-5}
{QUESTION: What is Abstract Factory?}
{ANSWER: Create a base abstract factory class which will be extended to make concrete factories. Factory
has any number of createProduct()methods for making different products. These products extend a base
product. In this way products can differ depending on the concrete factory that makes them. To add a 
new line of products just build the new concrete products and concrete factory for the product line. An
example of this might be a board game with unit types and factions. Each faction would have it's own concrete
factory for getting units with faction imagry and other faction specs. Flyweight pattern uses factory design.}
{ID:oop-creational-6}
{QUESTION: What is Builder creational design pattern?}
{ANSWER: Constructs a large complex object in steps. The representation of the ojbect can be one of 
many. Used when parsing files or data. Java examples are Dialog boxes, StringBuilder, DocumentBuilder etc. This
is used where there are many paramters for constructing an object. Can force immutability once the object is fully
created.}
{ID:oop-behavioral-2}
{QUESTION: What is Template Method behavioral design pattern?}
{ANSWER: Short answer is the Java Abstract Class. Some methods are declaired abstract and basic behavior is 
defined by other methods. Unlike the Interface some of the basic implementation is already coded. Template
Method uses inheritance to vary part of the algorithm.}
{ID:oop-behavioral-3}
{QUESTION: What is Strategy behavioral design pattern?}
{ANSWER: Java Interface is an example of this pattern. Defines implementation to be supplied. Varying
algorithms can be supplied for one interface. Algorithms can be swapped out. An example is Java Comparable 
interface which has a compareTo(O) method. For example one implementation might be made for assending sort,
and another for decending sort.}
{ID:oop-behavioral-4}
{QUESTION: What is the Command behavioral design pattern?}
{ANSWER: A good example of this is in adding a Listener to a Button. Callback. Make a command 
object with execute() method. Give the command to another class which will call the execute() method. Chain
of Responisibility can use Command Pattern to execute a list of commands.}
{ID:oop-behavioral-5}
{QUESTION: What is Memento behavioral design pattern?}
{ANSWER: A good example for Memento is undo/redo opertions in an editor. Memento captures
an objects state so that it can be restored. Example is undo or rollback. Memento has 3 objectss, 
Originator, Caretaker, and Memento. Originator knows how to store its state in a Memento object. Caretaker
keeps Mememto objects and decided when to restore one on the Originator.}
{ID:oop-behavioral-6}
{QUESTION: What is Mediator behavioral design pattern?}
{ANSWER: Where objects have a many to many relationship. Unix users to group mappings is an example. another
example is air traffic control tower. Planes do not talk to each other but only to tower which talks to 
all planes. Another example would be a dialog that talks to all it's components. If a coponent needs to message
another component it does so via the dialog object.}
{ID:oop-behavioral-7}
{QUESTION: What is State behavioral design pattern?}
{ANSWER: }
